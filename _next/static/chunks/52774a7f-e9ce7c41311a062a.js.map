{"version":3,"file":"static/chunks/52774a7f-e9ce7c41311a062a.js","mappings":"4bA8VAA,EACAC,EAs+DAC,EAuxCAC,EACAC,EAslBAC,uCA5nIAC,EAqmDAC,EAUAC,EAoBAC,EAcAC,EAQAJ,EASAA,EAu0FAA,EA1+I0mBK,EAypD1mBC,EASAC,EAu0FAP,8TAvhJA,IAAAQ,EAAeC,EAAAC,UAAU,CAEzBC,EAAA,sBAEAC,EAAA,wBA0CA,SAAAC,EAAAC,CAAA,CAAAC,CAAA,SAA0C,MAAAD,EAAmBA,EAAqBC,GAAA,CAAmB,SAAAC,GAAAC,CAAA,MAAiCC,EAA+B,IAAAC,EAAAF,CAAA,IAAoBG,EAAA,EAAW,KAAAA,EAAAH,EAAAI,MAAA,GAAyB,IAAAC,EAAAL,CAAA,CAAAG,EAAA,CAAmBG,EAAAN,CAAA,CAAAG,EAAA,GAA+B,GAARA,GAAA,EAAQ,CAAAE,mBAAAA,GAAAA,iBAAAA,CAAA,GAAAH,MAAAA,EAA2E,MAAoBG,CAAA,WAAAA,GAAAA,mBAAAA,GAAkDJ,EAAAC,EAAuBA,EAAAI,EAAAJ,IAAqBG,CAAAA,SAAAA,GAAAA,iBAAAA,CAAA,IAAmDH,EAAAI,EAAA,IAAAC,IAAAL,EAAAM,IAAA,CAAAP,KAAAM,IAA6DN,EAAAQ,KAAAA,EAAA,CAA+B,OAAAP,CAAA,CAa3lB,SAAAQ,GAAAC,CAAA,EACA,IAAAC,EAAAb,GAAA,CAAAY,EAAA,iBAAAE,GAAAA,EAAAD,IAAA,GACA,OAAAb,GAAA,CAAAa,EAAA,iBAAAE,GAAAA,EAAAC,UAAA,KAAAJ,CACA,CACA,SAAAK,GAAAD,CAAA,EACA,MAAAE,wBAAAA,OAAAC,SAAA,CAAAC,QAAA,CAAAX,IAAA,CAAAO,EACA,CA2BA,SAAAK,GAAAC,CAAA,EACA,QA3BAC,EA4BA,IAAAC,EAAAF,EAAAE,KAAA,EAAAF,EAAAG,QAAA,CACA,OAAAD,GA5BAD,CADAA,EA8BAG,MAAAC,IAAA,CAAAH,EAAAI,IAAAC,IAAA,MA7BAC,QAAA,6BACA,CAAAP,EAAAO,QAAA,qCACAP,CAAAA,EAAAA,EAAAQ,OAAA,+BAA6D,yDAA2D,EAExHR,GA0BA,IACA,CACA,MAAAS,EAAA,CACA,WACA,CACA,CAWA,SAAAJ,GAAAK,CAAA,EACA,IAAAC,EACA,GA8BA,eA9BAD,EACA,IACAC,EACAb,GAAAY,EAAAE,UAAA,GACAC,SA9CAH,CAAA,EACA,IAAYV,QAAAA,CAAA,EAAUU,EACtB,GAAAV,EAAAc,KAAA,MAAAhC,MAAA,GACA,OAAAkB,EACA,IAAAe,EAAA,kBAAyCC,KAAAC,SAAA,CAAAP,EAAAQ,IAAA,EAA0B,IAanE,MAZAR,KAAAA,EAAAS,SAAA,CACAJ,EAAAK,IAAA,UAEAV,EAAAS,SAAA,EACAJ,EAAAK,IAAA,UAAgCV,EAAAS,SAAA,CAAe,IAE/CT,EAAAW,YAAA,EACAN,EAAAK,IAAA,aAAmCV,EAAAW,YAAA,CAAkB,IAErDX,EAAAY,KAAA,CAAAxC,MAAA,EACAiC,EAAAK,IAAA,CAAAV,EAAAY,KAAA,CAAAC,SAAA,EAEAR,EAAAT,IAAA,SACA,EA4BAI,EACA,CACA,MAAAD,EAAA,CACA,MAEA,GAwBA,iBAxBAC,EAAA,CACA,IAAAV,EAAAU,EAAAV,OAAA,CACAwB,EAAAd,EAAAe,YAAA,CAAAlB,QAAA,MACAmB,EAAA,iBAAAhB,EAAAiB,KAAA,MAAAjB,EAAAiB,KAAA,KAOA,GANAD,GACA1B,CAAAA,EAAA4B,SA1BAlB,CAAA,EACA,IAAAmB,EAAA,GACA,QAAAhD,EAAA,EAAoBA,EAAA6B,EAAAiB,KAAA,CAAA7C,MAAA,CAAuBD,IAAA,CAC3C,IAAAiD,EAAApB,EAAAiB,KAAA,CACAI,EAAAD,CAAA,CAAAjD,EAAA,CACAmD,EAAAF,EAAAG,mBAAA,CAAAF,GACAF,GAAA,GAAqBE,EAAU,GAAGD,EAAAI,gBAAA,CAAAH,GAA6C,EAAEC,EAAA,kBAAkC,EAEnH,SAActB,EAAAe,YAAA,IAAqB,EAAEI,EAAA,EAAS,GAkB9CnB,EAAA,EAEAc,GACAxB,CAAAA,EAUAmC,EAAA3B,OAAA,CADA,uCACA,SAVA,EAEAgB,GAAAE,EACA,OAAA1B,CAEA,CACA,OAAAW,GAAAD,EAAAV,OAAA,CA1FAvC,CADAA,EAOCK,GAAAA,CAAAA,EAAA,IAND,CAAAL,EAAA,uBACAA,CAAA,CAAAA,EAAA,+BACAA,CAAA,CAAAA,EAAA,qBACAA,CAAA,CAAAA,EAAA,eACAA,CAAA,CAAAA,EAAA,iBACAA,CAAA,CAAAA,EAAA,oBAiGA,OAAA2E,GACAC,aAAA,CACA,KAAAC,SAAA,KAAAC,IACA,KAAAC,WAAA,KAAAC,OACA,CACAC,MAAArD,CAAA,SACA,EAGAf,EADAG,GAAA,eAAAkE,GAAAA,EAAAC,OAAA,QAAAC,GAAAA,EAAAxD,GAAA,iBAAAyD,GAAAA,EAAAC,EAAA,GACA,QAFA,EAGA,CACAC,QAAAD,CAAA,EACA,YAAAT,SAAA,CAAAW,GAAA,CAAAF,IAAA,IACA,CACAG,QAAA,CACA,OAAA/C,MAAAC,IAAA,MAAAkC,SAAA,CAAAa,IAAA,GACA,CACAP,QAAAvD,CAAA,EACA,YAAAmD,WAAA,CAAAS,GAAA,CAAA5D,IAAA,IACA,CACA+D,kBAAA/D,CAAA,EACA,IAAA0D,EAAA,KAAAL,KAAA,CAAArD,GACA,KAAAiD,SAAA,CAAAe,MAAA,CAAAN,GACA1D,EAAAiE,UAAA,EACAjE,EAAAiE,UAAA,CAAAC,OAAA,SAAAH,iBAAA,CAAAI,GAEA,CACAC,IAAAV,CAAA,EACA,YAAAT,SAAA,CAAAmB,GAAA,CAAAV,EACA,CACAW,QAAAC,CAAA,EACA,YAAAnB,WAAA,CAAAiB,GAAA,CAAAE,EACA,CACAC,IAAAvE,CAAA,CAAAwE,CAAA,EACA,IAAAd,EAAAc,EAAAd,EAAA,CACA,KAAAT,SAAA,CAAAwB,GAAA,CAAAf,EAAA1D,GACA,KAAAmD,WAAA,CAAAsB,GAAA,CAAAzE,EAAAwE,EACA,CACArD,QAAAuC,CAAA,CAAA1D,CAAA,EACA,IAAA0E,EAAA,KAAAf,OAAA,CAAAD,GACA,GAAAgB,EAAA,CACA,IAAAF,EAAA,KAAArB,WAAA,CAAAS,GAAA,CAAAc,GACAF,GACA,KAAArB,WAAA,CAAAsB,GAAA,CAAAzE,EAAAwE,EACA,CACA,KAAAvB,SAAA,CAAAwB,GAAA,CAAAf,EAAA1D,EACA,CACA2E,OAAA,CACA,KAAA1B,SAAA,KAAAC,IACA,KAAAC,WAAA,KAAAC,OACA,CACA,CAIA,SAAAwB,GAAA,CAA2BC,iBAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAkC,EAI7D,MAHA,WAAAD,GACAA,CAAAA,EAAA,UAEAE,CAAAA,CAAAH,CAAAA,CAAA,CAAAC,EAAAG,WAAA,KACAF,GAAAF,CAAA,CAAAE,EAAA,EACAA,aAAAA,GACAD,UAAAA,GAAA,CAAAC,GAAAF,EAAA,KACA,CACA,SAAAK,GAAA,CAA0BC,SAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAA7F,MAAAA,CAAA,CAAA8F,YAAAA,CAAA,CAAwC,EAClE,IAAAC,EAAA/F,GAAA,UACA,GAGA8F,GACAC,CAAAA,EAAAD,EAAAC,EAAAF,EAAA,EAEA,IAAAG,MAAA,CAAAD,EAAA7F,MAAA,GALA6F,CAMA,CACA,SAAAL,GAAAO,CAAA,EACA,OAAAA,EAAAP,WAAA,EACA,CACA,SAAAQ,GAAAD,CAAA,EACA,OAAAA,EAAAC,WAAA,EACA,CACA,IAAAC,GAAA,qBAmBA,SAAAC,GAAAP,CAAA,EACA,IAAAL,EAAAK,EAAAL,IAAA,CACA,OAAAK,EAAAQ,YAAA,wBACA,WACAb,EAEAE,GAAAF,GACA,IACA,CACA,SAAAc,GAAAC,CAAA,CAAAhB,CAAA,CAAAC,CAAA,QACA,UAAAD,GAAAC,CAAAA,UAAAA,GAAAA,aAAAA,CAAA,EACAe,EAAAC,YAAA,cAEAD,EAAAvG,KAAA,CAEA,SAAAyG,GAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EACA,IACAA,EAAA,IAAAC,IAAAH,EAAAhH,EAAAiH,EAAA,IAAAG,OAAAC,QAAA,CAAAzE,IAAA,EACA,CACA,MAAA0E,EAAA,CACA,WACA,CAGA,OAAAtH,EAAAG,GAAA,CADA+G,EAAAK,QAAA,CAAAC,KAAA,CADA,uBAEA,iBAAAC,GAAAA,CAAA,eACA,CACA,IAAAC,GAAA,GACA,SAAAC,GAAAC,CAAA,EACA,IAAAC,EAAAH,EAAA,CAAAE,EAAA,CACA,GAAAC,EACA,OAAAA,EAEA,IAAAC,EAAAV,OAAAU,QAAA,CACAC,EAAAX,MAAA,CAAAQ,EAAA,CACA,GAAAE,GAAA,mBAAAA,EAAAE,aAAA,CACA,IACA,IAAAC,EAAAH,EAAAE,aAAA,UACAC,CAAAA,EAAAC,MAAA,IACAJ,EAAAK,IAAA,CAAAC,WAAA,CAAAH,GACA,IAAAI,EAAAJ,EAAAI,aAAA,CACAA,GAAAA,CAAA,CAAAT,EAAA,EACAG,CAAAA,EACAM,CAAA,CAAAT,EAAA,EAEAE,EAAAK,IAAA,CAAAG,WAAA,CAAAL,EACA,CACA,MAAAM,EAAA,CACA,CAEA,OAAAb,EAAA,CAAAE,EAAA,CAAAG,EAAAS,IAAA,CAAApB,OACA,CACA,SAAAqB,GAAA,GAAAC,CAAA,EACA,OAAAf,GAAA,iBAAAe,EACA,CACA,SAAAC,GAAA,GAAAD,CAAA,EACA,OAAAf,GAAA,mBAAAe,EACA,CACA,SAAAE,GAAAC,CAAA,EACA,IACA,OAAAA,EAAAC,eAAA,CAEA,MAAAP,EAAA,CACA,CACA,CAEA,IAAAQ,GAAA,EACAC,GAAA,uBAEA,SAAAC,KACA,OAAAF,IACA,CAwBA,IAAAG,GAAA,6CACAC,GAAA,sBACAC,GAAA,YACAC,GAAA,wBACA,SAAAC,GAAA5H,CAAA,CAAAkB,CAAA,EACA,OAAAlB,GAAA,IAAAQ,OAAA,CAAAgH,GAAA,CAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,KACA,IAAAC,EAAAJ,GAAAE,GAAAC,EACAE,EAAAN,GAAAE,GAAA,GACA,IAAAG,EACA,OAAAN,EAEA,GAAAJ,GAAAY,IAAA,CAAAF,IAAAT,GAAAW,IAAA,CAAAF,IAGAR,GAAAU,IAAA,CAAAF,GAFA,aAA0BC,EAAW,EAAED,EAAS,EAAEC,EAAW,GAK7D,GAAAD,MAAAA,CAAA,IACA,aAA0BC,EAAW,EAvBrCP,CANArC,EAAA8C,OAAA,UACA9C,EAAA1E,KAAA,MAAAyH,KAAA,MAAAjI,IAAA,MAGAkF,EAAA1E,KAAA,UAEAA,KAAA,SAuBuCqH,EAA+B,EAAEC,EAAW,GAEnF,IAAAI,EAAAtH,EAAAJ,KAAA,MACA2H,EAAAN,EAAArH,KAAA,MAEA,QAAA4H,KADAF,EAAAG,GAAA,GACAF,GACA,MAAAC,IAGAA,OAAAA,EACAF,EAAAG,GAAA,GAGAH,EAAApH,IAAA,CAAAsH,IAGA,aAAsBN,EAAW,EAAEI,EAAAlI,IAAA,MAAgB,EAAE8H,EAAW,IAEhE,CACA,IAAAQ,GAAA,qBACAC,GAAA,qBA2DAC,GAAA,IAAArG,QACA,SAAAsG,GAAAC,CAAA,CAAAC,CAAA,SACA,GAAAA,KAAAA,EAAAC,IAAA,GAGAC,GAAAH,EAAAC,GAFAA,CAGA,CAIA,SAAAE,GAAAH,CAAA,CAAAI,CAAA,EACA,IAAAC,EAAAP,GAAA7F,GAAA,CAAA+F,GAKA,GAJAK,IACAA,EAAAL,EAAA1C,aAAA,MACAwC,GAAAhF,GAAA,CAAAkF,EAAAK,IAEAD,EAGA,IAAAA,EAAAE,UAAA,WAAAF,EAAAE,UAAA,UACA,OAAAF,CACA,MAJAA,EAAA,GAMA,OADAC,EAAAE,YAAA,QAAAH,GACAC,EAAAnI,IAAA,CAEA,SAAAsI,GAAAR,CAAA,CAAA7E,CAAA,CAAA+B,CAAA,CAAAtH,CAAA,CAAA6F,CAAA,CAAAgF,CAAA,SACA,EAGA,QAAAvD,GACAA,CAAAA,SAAAA,GAAA/B,QAAAA,GAAAvF,MAAAA,CAAA,MAGAsH,CAAAA,eAAAA,GAAAtH,MAAAA,CAAA,MAGAsH,CAAAA,eAAAA,GACA/B,UAAAA,GAAAA,OAAAA,GAAAA,OAAAA,CAAA,EAGA+B,WAAAA,EACAwD,SAnGAV,CAAA,CAAAC,CAAA,EACA,GAAAA,KAAAA,EAAAC,IAAA,GACA,OAAAD,EAEA,IAAAU,EAAA,EACA,SAAAC,EAAAC,CAAA,MACAC,EACA,IAAAhE,EAAA+D,EAAAE,IAAA,CAAAd,EAAAe,SAAA,CAAAL,WACA,GACAG,EAAAhE,CAAA,IACA6D,GAAAG,EAAAhL,MAAA,CACAgL,GAEA,EACA,CACA,IAAAG,EAAA,GACA,KACAL,EAAAf,KACAc,CAAAA,GAAAV,EAAAnK,MAAA,GAFA,CAKA,IAAA0G,EAAAoE,EAAAhB,IACA,GAAApD,MAAAA,EAAA+C,KAAA,KACA/C,EAAAuD,GAAAC,EAAAxD,EAAAwE,SAAA,GAAAxE,EAAA1G,MAAA,KACAmL,EAAA7I,IAAA,CAAAoE,OAEA,CACA,IAAA0E,EAAA,GACA1E,EAAAuD,GAAAC,EAAAxD,GACA,IAAA2E,EAAA,GACA,QACA,IAAAC,EAAAnB,EAAAoB,MAAA,CAAAV,GACA,GAAAS,KAAAA,EAAA,CACAH,EAAA7I,IAAA,EAAAoE,EAAA0E,CAAA,EAAAhB,IAAA,IACA,KACA,CACA,GAAAiB,EAWA,MAAAC,GACAD,CAAAA,EAAA,QAZA,CACA,GAAAC,MAAAA,EAAA,CACAT,GAAA,EACAM,EAAA7I,IAAA,EAAAoE,EAAA0E,CAAA,EAAAhB,IAAA,IACA,KACA,CACA,MAAAkB,GACAD,CAAAA,EAAA,GAEA,CAMAD,GAAAE,EACAT,GAAA,CACA,CACA,CACA,CACA,OAAAM,EAAA3J,IAAA,MACA,EA0CA0I,EAAApK,GAEAsH,UAAAA,EACA0B,GAAAhJ,EAAAuK,GAAAH,IAEA7E,WAAAA,GAAA+B,SAAAA,EACA6C,GAAAC,EAAApK,GAEA,mBAAA6K,EACAA,EAAAvD,EAAAtH,EAAA6F,GAEA7F,EArBAmK,GAAAC,EAAApK,GAJAA,CA0BA,CACA,SAAA0L,GAAAnG,CAAA,CAAA+B,CAAA,CAAAqE,CAAA,EACA,OAAApG,UAAAA,GAAAA,UAAAA,CAAA,GAAA+B,aAAAA,CACA,CAoCA,SAAAsE,GAAA7G,CAAA,CAAA8G,CAAA,CAAAC,EAAAC,GAAA,CAAAC,EAAA,SACA,CAAAjH,GAEAA,EAAAkH,QAAA,GAAAlH,EAAAmH,YAAA,EAEAF,EAAAF,EAHA,GAKAD,EAAA9G,GACAiH,EACAJ,GAAA7G,EAAAoH,UAAA,CAAAN,EAAAC,EAAAE,EAAA,EACA,CACA,SAAAI,GAAAC,CAAA,CAAAC,CAAA,EACA,WAEA,GAAA/F,OADAxB,EAEA,SACA,IACA,GAAAsH,GACA,oBAAAA,EACA,IAAA9F,EAAAgG,OAAA,KAAuCF,EAAU,GACjD,cAEA,GAAAG,SA/BAjG,CAAA,CAAAkG,CAAA,EACA,QAAAC,EAAAnG,EAAAoG,SAAA,CAAAzM,MAAA,CAA2CwM,KAAS,CACpD,IAAAL,EAAA9F,EAAAoG,SAAA,CAAAD,EAAA,CACA,GAAAD,EAAAhD,IAAA,CAAA4C,GACA,QAEA,CACA,QACA,EAcAtH,EASAsH,GACA,SAGA,GAAAC,GAAA/F,EAAAgG,OAAA,CAAAD,GACA,SACA,QACA,CACA,MAAAM,EAAA,CACA,QACA,CACA,CACA,CACA,SAAAC,GAAA9H,CAAA,CAAA+H,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IACA,IAAA3G,EAAAxB,EAAAkH,QAAA,GAAAlH,EAAAmH,YAAA,CACAnH,EACAA,EAAAoI,aAAA,CACA,GAAA5G,OAAAA,EACA,SACA,GAAAA,UAAAA,EAAAhB,OAAA,EACA,IAAA6H,EAAA7G,EAAAC,YAAA,iBAUA,GAAA6G,CARA,mBACA,eACA,YACA,SACA,eACA,cACA,SACA,CACA1L,QAAA,CAAAyL,GACA,QAEA,CACA,IAAAE,EAAA,GACAC,EAAA,GACA,GAAAL,EAAA,CAEA,GAAAK,CADAA,EAAA3B,GAAArF,EAAA6F,GAAAY,EAAAC,GAAA,EACA,EACA,SAEAK,EAAA1B,GAAArF,EAAA6F,GAAAU,EAAAC,GAAAQ,GAAA,EAAAA,EAAAxB,IACA,KACA,CAEA,GAAAuB,CADAA,EAAA1B,GAAArF,EAAA6F,GAAAU,EAAAC,GAAA,EACA,EACA,SAEAQ,EAAA3B,GAAArF,EAAA6F,GAAAY,EAAAC,GAAAK,GAAA,EAAAA,EAAAvB,IACA,CACA,OAAAuB,GAAA,EACAC,CAAAA,CAAAA,GAAA,IACAD,GAAAC,EAEAA,CAAAA,CAAAA,GAAA,IAEA,EAAAL,CACA,CACA,MAAAjF,EAAA,CACA,CACA,QAAAiF,CACA,CAgXA,SAAAM,GAAAC,CAAA,SACA,MAAAA,EACA,GAGAA,EAAA/H,WAAA,EAEA,CAwEA,SAAAgI,GAAAjN,CAAA,CAAAkN,CAAA,MA6BAxJ,EA5BA,IAAYiG,IAAAA,CAAA,CAAAwD,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAb,YAAAA,CAAA,CAAAJ,cAAAA,CAAA,CAAAE,gBAAAA,CAAA,CAAAD,iBAAAA,CAAA,CAAAE,mBAAAA,CAAA,CAAAe,UAAAA,EAAA,GAAAC,iBAAAA,EAAA,GAAA3I,iBAAAA,EAAA,EAA6M,CAAAuF,gBAAAA,CAAA,CAAAqD,WAAAA,CAAA,CAAApI,YAAAA,CAAA,CAAAqI,eAAAA,CAAA,CAAAC,eAAAA,EAAA,EAA+E,CAAAC,aAAAA,EAAA,GAAAC,aAAAA,EAAA,GAAAC,YAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,kBAAAA,EAAA,IAAAC,iBAAAA,CAAA,CAAAC,sBAAAA,EAAA,IAAAC,gBAAAA,EAAA,OAAAC,kBAAAA,EAAA,IAA+MlB,EACvf,CAAUmB,mBAAAA,EAAA,IAA4BnB,EACtCoB,EAAAC,SAtYAvO,CAAA,CAAAkN,CAAA,EACA,IAAYvD,IAAAA,CAAA,CAAAwD,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAb,YAAAA,CAAA,CAAArC,gBAAAA,CAAA,CAAAiC,cAAAA,CAAA,CAAAE,gBAAAA,CAAA,CAAAD,iBAAAA,CAAA,CAAAE,mBAAAA,CAAA,CAAAgB,iBAAAA,CAAA,CAAA3I,iBAAAA,EAAA,EAAoM,CAAA4I,WAAAA,CAAA,CAAApI,YAAAA,CAAA,CAAAsI,eAAAA,EAAA,EAA8C,CAAAC,aAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAM,gBAAAA,CAAA,CAAAC,kBAAAA,EAAA,IAA4ElB,EAC1UsB,EAAAC,SA2EA9E,CAAA,CAAAwD,CAAA,EACA,IAAAA,EAAA9I,OAAA,CAAAsF,GACA,OACA,IAAA+E,EAAAvB,EAAA9J,KAAA,CAAAsG,GACA,OAAA+E,IAAAA,EAAA5O,KAAAA,EAAA4O,CACA,EAhFA/E,EAAAwD,GACA,OAAAnN,EAAAwL,QAAA,EACA,KAAAxL,EAAA2O,aAAA,CACA,GAAA3O,eAAAA,EAAA4O,UAAA,CACA,OACA7J,KAAAtG,EAAAoQ,QAAA,CACA5K,WAAA,GACA2K,WAAA5O,EAAA4O,UAAA,EAIA,OACA7J,KAAAtG,EAAAoQ,QAAA,CACA5K,WAAA,GAGA,MAAAjE,EAAA8O,kBAAA,CACA,OACA/J,KAAAtG,EAAAsQ,YAAA,CACAlI,KAAA7G,EAAA6G,IAAA,CACAmI,SAAAhP,EAAAgP,QAAA,CACAC,SAAAjP,EAAAiP,QAAA,CACAT,OAAAA,CACA,CACA,MAAAxO,EAAAyL,YAAA,CACA,OAAAyD,SA8GAlP,CAAA,CAAAkN,CAAA,MAyJAiC,EAxJA,IAAYxF,IAAAA,CAAA,CAAAyD,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAE,iBAAAA,CAAA,CAAA3I,iBAAAA,EAAA,EAAwF,CAAAuF,gBAAAA,CAAA,CAAA/E,YAAAA,CAAA,CAAAsI,eAAAA,EAAA,EAAmD,CAAAC,aAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAM,gBAAAA,CAAA,CAAAC,kBAAAA,EAAA,GAAAI,OAAAA,CAAA,CAAA/B,YAAAA,CAAA,CAAAJ,cAAAA,CAAA,CAAAE,gBAAAA,CAAA,CAAAD,iBAAAA,CAAA,CAAAE,mBAAAA,CAAA,EAAuKU,EAC9TkC,EAAAC,SA9TAjK,CAAA,CAAAgI,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IACA,GAAAA,GAAAlI,EAAA0G,OAAA,CAAAwB,GACA,SAEA,oBAAAF,EACA,IAAAhI,EAAA8G,SAAA,CAAAoD,QAAA,CAAAlC,GACA,QACA,MAGA,QAAAnB,EAAA7G,EAAA8G,SAAA,CAAAzM,MAAA,CAAwDwM,KAAS,CACjE,IAAAL,EAAAxG,EAAA8G,SAAA,CAAAD,EAAA,CACA,GAAAmB,EAAApE,IAAA,CAAA4C,GACA,QAEA,CAEA,GAAAyB,EACA,OAAAjI,EAAA0G,OAAA,CAAAuB,EAEA,CACA,MAAA7F,EAAA,CACA,CACA,QACA,EAqSAxH,EAAAoN,EAAAC,EAAAC,GACAxI,EAAAyK,SAhfAnK,CAAA,EACA,GAAAA,aAAAoK,gBACA,aAEA,IAAAC,EAAAxK,GAAAG,EAAAN,OAAA,SACA,GAAAkE,IAAA,CAAAyG,GACA,MAEAA,CACA,EAueAzP,GACA0P,EAAA,GACAC,EAAA3P,EAAA0P,UAAA,CAAAjQ,MAAA,CACA,QAAAD,EAAA,EAAoBA,EAAAmQ,EAASnQ,IAAA,CAC7B,IAAAoQ,EAAA5P,EAAA0P,UAAA,CAAAlQ,EAAA,CACAoQ,EAAA/I,IAAA,GAAAoE,GAAAnG,EAAA8K,EAAA/I,IAAA,CAAA+I,EAAArQ,KAAA,GACAmQ,CAAAA,CAAA,CAAAE,EAAA/I,IAAA,EAAAsD,GAAAR,EAAA7E,EAAAG,GAAA2K,EAAA/I,IAAA,EAAA+I,EAAArQ,KAAA,CAAAS,EAAAoK,EAAA,CAEA,CACA,GAAAtF,SAAAA,GAAA0I,EAAA,CACA,IAAAqC,EAAA/O,MAAAC,IAAA,CAAA4I,EAAAmG,WAAA,EAAAC,IAAA,IACArP,EAAAmB,IAAA,GAAA7B,EAAA6B,IAAA,EAEAlB,EAAA,KACAkP,GACAlP,CAAAA,EAAAF,GAAAoP,EAAA,EAEAlP,IACA+O,EAAAM,GAAA,MACAN,EAAA7N,IAAA,MACA6N,EAAAO,WAAA,MACAP,EAAAQ,QAAA,CAAA3H,GAAA5H,EAAAkP,EAAAhO,IAAA,EAEA,CACA,GAAAiD,UAAAA,GACA9E,EAAAmQ,KAAA,EACA,EAAAnQ,EAAAoQ,SAAA,EAAApQ,EAAAqQ,WAAA,MAAAxG,IAAA,GAAApK,MAAA,EACA,IAAAkB,EAAAF,GAAAT,EAAAmQ,KAAA,EACAxP,GACA+O,CAAAA,EAAAQ,QAAA,CAAA3H,GAAA5H,EAAAmJ,GAAAH,GAAA,CAEA,CACA,GAAA7E,UAAAA,GACAA,aAAAA,GACAA,WAAAA,GACAA,WAAAA,EAAA,CAEA,IAAAC,EAAAY,GADA3F,GAEAT,EAAAsG,GAFA7F,EAEAyF,GAAAX,GAAAC,GACAuL,EAAAxK,EAAAwK,OAAA,CACA,GAAAvL,WAAAA,GAAAA,WAAAA,GAAAxF,EAAA,CACA,IAAAgR,EAAAnE,GALApM,EAKAqM,EAAAC,EAAAC,EAAAC,EAAA5H,GAAA,CACAG,KAAAA,EACAD,QAAAW,GAAAX,GACAD,iBAAAA,CACA,GACA6K,CAAAA,EAAAnQ,KAAA,CAAA2F,GAAA,CACAC,SAAAoL,EACAnL,QAZApF,EAaAT,MAAAA,EACA8F,YAAAA,CACA,EACA,CACAiL,GACAZ,CAAAA,EAAAY,OAAA,CAAAA,CAAA,CAEA,CASA,GARA,WAAAxL,IACA9E,EAAAwQ,QAAA,GAAA3L,EAAA,OACA6K,EAAAc,QAAA,IAGA,OAAAd,EAAAc,QAAA,EAGA1L,WAAAA,GAAA+I,GACA,GAAA7N,OAAAA,EAAAyQ,SAAA,CACA,CAAAC,SA7oBAC,CAAA,EACA,IAAAC,EAAAD,EAAAE,UAAA,OACA,IAAAD,EACA,SAEA,QAAAE,EAAA,EAAoBA,EAAAH,EAAAI,KAAA,CAAkBD,GADtC,GAEA,QAAAE,EAAA,EAAwBA,EAAAL,EAAAM,MAAA,CAAmBD,GAF3C,GAE2C,CAC3C,IAAAE,EAAAN,EAAAM,YAAA,CAKA,GAAAC,IADAC,YAAAC,CAHA3L,MAAAwL,EACAA,CAAA,CAAAxL,GAAA,CACAwL,CAAA,EACArR,IAAA,CAAA+Q,EAAAE,EAAAE,EAAAM,KAAAC,GAAA,CAPA,GAOAZ,EAAAI,KAAA,CAAAD,GAAAQ,KAAAC,GAAA,CAPA,GAOAZ,EAAAM,MAAA,CAAAD,IAAAQ,IAAA,CAAAC,MAAA,EACAC,IAAA,IAAAC,IAAAA,GACA,QACA,CAEA,QACA,EA4nBA3R,IACA0P,CAAAA,EAAAkC,UAAA,CAAA5R,EAAA6R,SAAA,CAAAlE,EAAA5I,IAAA,CAAA4I,EAAAmE,OAAA,QAGA,mBAAA9R,CAAAA,EAAA,CACA,IAAA+R,EAAA/R,EAAA6R,SAAA,CAAAlE,EAAA5I,IAAA,CAAA4I,EAAAmE,OAAA,EACAE,EAAArI,EAAA1C,aAAA,UACA+K,CAAAA,EAAAjB,KAAA,CAAA/Q,EAAA+Q,KAAA,CACAiB,EAAAf,MAAA,CAAAjR,EAAAiR,MAAA,CAEAc,IADAC,EAAAH,SAAA,CAAAlE,EAAA5I,IAAA,CAAA4I,EAAAmE,OAAA,GAEApC,CAAAA,EAAAkC,UAAA,CAAAG,CAAA,CAEA,EAEA,GAAAjN,QAAAA,GAAA8I,EAAA,CACA9P,GAEAC,CAAAA,EAAAD,CADAA,EAAA6L,EAAA1C,aAAA,YACA4J,UAAA,QAGA,IAAAoB,EAAAC,EAAAC,UAAA,EAAAD,EAAAnM,YAAA,yBACAqM,EAAAF,EAAAG,WAAA,CACAC,EAAA,KACAJ,EAAAK,mBAAA,QAAAD,GACA,IACAxU,EAAAiT,KAAA,CAAAmB,EAAAM,YAAA,CACA1U,EAAAmT,MAAA,CAAAiB,EAAAO,aAAA,CACA1U,EAAA2U,SAAA,CARA1S,EAQA,KACA0P,EAAAkC,UAAA,CAAA9T,EAAA+T,SAAA,CAAAlE,EAAA5I,IAAA,CAAA4I,EAAAmE,OAAA,CACA,CACA,MAAAvL,EAAA,CACA,GAAA2L,cAAAA,EAAAG,WAAA,EACAH,EAAAG,WAAA,aACAH,EAAAS,QAAA,EAAAT,IAAAA,EAAAM,YAAA,CACAF,IAEAJ,EAAAU,gBAAA,QAAAN,GACA,MACA,CAEAO,QAAAC,IAAA,0BAA0Db,EAAS,WAAW1L,EAAI,EAElF,CACA,cAAA2L,EAAAG,WAAA,EACAD,CAAAA,EACA1C,EAAA2C,WAAA,CAAAD,EACAF,EAAAa,eAAA,gBAEA,CACAb,CA9BAlS,EA8BA2S,QAAA,EAAAT,IAAAA,EAAAM,YAAA,CACAF,IAEAJ,EAAAU,gBAAA,QAAAN,EACA,CAeA,GAdAxN,CAAAA,UAAAA,GAAAA,UAAAA,CAAA,IACA4K,EAAAsD,aAAA,CAAAhT,EAAAiT,MAAA,CACA,SACA,SACAvD,EAAAwD,mBAAA,CAAAlT,EAAAmT,WAAA,EAEA,CAAA/E,IACApO,EAAAoT,UAAA,EACA1D,CAAAA,EAAA2D,aAAA,CAAArT,EAAAoT,UAAA,EAEApT,EAAAsT,SAAA,EACA5D,CAAAA,EAAA6D,YAAA,CAAAvT,EAAAsT,SAAA,GAGAlE,EAAA,CACA,IAAgB2B,MAAAA,CAAA,CAAAE,OAAAA,CAAA,EAAgBjR,EAAAwT,qBAAA,GAChC9D,EAAA,CACA+D,MAAA/D,EAAA+D,KAAA,CACAC,SAAA,GAAyB3C,EAAM,IAC/B4C,UAAA,GAA0B1C,EAAO,IAEjC,CACA,WAAAnM,GAAAqJ,EAAAuB,EAAAkE,GAAA,IACAxE,GAAAvH,GAAA7H,IACA0P,CAAAA,EAAAmE,MAAA,CAAAnE,EAAAkE,GAAA,EAEA,OAAAlE,EAAAkE,GAAA,EAGA,IACAE,eAAAlQ,GAAA,CAAAkB,IACAqK,CAAAA,EAAA,GACA,CACA,MAAA3H,EAAA,CACA,CACA,OACAzC,KAAAtG,EAAAsV,OAAA,CACAjP,QAAAA,EACA4K,WAAAA,EACAzL,WAAA,GACA+P,MAAAC,CAlhBAjP,CAAAc,CAAAA,QAAAA,EAAAhB,OAAA,EAAAgB,EAAAoO,eAAA,GAkhBApU,KAAAA,EACAsP,UAAAA,EACAZ,OAAAA,EACA2F,SAAAhF,CACA,CACA,EAxRAnP,EAAA,CACA2J,IAAAA,EACAyD,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAE,iBAAAA,EACApD,gBAAAA,EACAvF,iBAAAA,EACAQ,YAAAA,EACAsI,eAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAM,gBAAAA,EACAC,kBAAAA,EACAI,OAAAA,EACA/B,YAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,CACA,EACA,MAAAxM,EAAAoU,SAAA,CACA,OAAAC,SAkCArU,CAAA,CAAAkN,CAAA,EACA,IAAYT,YAAAA,CAAA,CAAAJ,cAAAA,CAAA,CAAAE,gBAAAA,CAAA,CAAAD,iBAAAA,CAAA,CAAAE,mBAAAA,CAAA,CAAAiB,WAAAA,CAAA,CAAA5I,iBAAAA,CAAA,CAAAQ,YAAAA,CAAA,CAAAmJ,OAAAA,CAAA,EAAwItB,EACpJoH,EAAAtU,EAAA0L,UAAA,EAAA1L,EAAA0L,UAAA,CAAA5G,OAAA,CACAuL,EAAArQ,EAAAqQ,WAAA,CACAkE,EAAAD,UAAAA,GAAAxU,KAAAA,EACA0U,EAAAF,WAAAA,GAAAxU,KAAAA,EACA2U,EAAAH,aAAAA,GAAAxU,KAAAA,EACA,GAAAyU,GAAAlE,EAAA,CACA,IACArQ,EAAA0U,WAAA,EAAA1U,EAAA2U,eAAA,EAEAvV,GAAA,CAAAY,EAAA,SAAA4U,GAAAA,EAAAlJ,UAAA,UAAAmJ,GAAAA,EAAA1E,KAAA,kBAAA2E,GAAAA,EAAAjU,QAAA,IACAwP,CAAAA,EAAA5P,GAAAT,EAAA0L,UAAA,CAAAyE,KAAA,EAEA,CACA,MAAA5J,EAAA,CACAsM,QAAAC,IAAA,yDAAiFvM,EAAI,EAAAvG,EACrF,CACAqQ,EAAA9H,GAAA8H,EAAAvG,GAAAoD,EAAAvD,GAAA,EACA,CACA6K,GACAnE,CAAAA,EAAA,sBAEA,IAAAE,EAAAnE,GAAApM,EAAAqM,EAAAC,EAAAC,EAAAC,EAAAC,GAwBA,OAvBA8H,GAAAC,GAAAC,IAAApE,IAAAE,GACAF,CAAAA,EAAA5C,EACAA,EAAA4C,EAAArQ,EAAA0M,aAAA,EACA2D,EAAAlP,OAAA,eAEAsT,GAAApE,GAAAxL,CAAAA,EAAAkQ,QAAA,EAAAxE,CAAA,GACAF,CAAAA,EAAAhL,EACAA,EAAAgL,EAAArQ,EAAA0L,UAAA,EACA2E,EAAAlP,OAAA,eAEA,WAAAmT,GAAAjE,GAMAA,CAAAA,EAAAnL,GAAA,CACAC,SAAAiH,GAAApM,EAAAqM,EAAAC,EAAAC,EAAAC,EANA5H,GAAA,CACAG,KAAA,KACAD,QAAAwP,EACAzP,iBAAAA,CACA,IAGAO,QAAApF,EACAT,MAAA8Q,EACAhL,YAAAA,CACA,EAAS,EAET,CACAN,KAAAtG,EAAAuW,IAAA,CACA3E,YAAAA,GAAA,GACAkE,QAAAA,EACA/F,OAAAA,CACA,CACA,EAvFAxO,EAAA,CACA2J,IAAAA,EACA8C,YAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACAiB,WAAAA,EACA5I,iBAAAA,EACAQ,YAAAA,EACAmJ,OAAAA,CACA,EACA,MAAAxO,EAAAiV,kBAAA,CACA,OACAlQ,KAAAtG,EAAAyW,KAAA,CACA7E,YAAA,GACA7B,OAAAA,CACA,CACA,MAAAxO,EAAAmV,YAAA,CACA,OACApQ,KAAAtG,EAAA2W,OAAA,CACA/E,YAAArQ,EAAAqQ,WAAA,KACA7B,OAAAA,CACA,CACA,SACA,QACA,CACA,EA0TAxO,EAAA,CACA2J,IAAAA,EACAwD,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAZ,YAAAA,EACAa,gBAAAA,EACAjB,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACAgB,iBAAAA,EACA3I,iBAAAA,EACAuF,gBAAAA,EACAqD,WAAAA,EACApI,YAAAA,EACAsI,eAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAM,gBAAAA,EACAC,kBAAAA,CACA,GACA,IAAAE,EAEA,OADAuE,QAAAC,IAAA,CAAA9S,EAAA,kBACA,KAIA0D,EADAyJ,EAAA9I,OAAA,CAAArE,GACAmN,EAAA9J,KAAA,CAAArD,GAEAqV,CAAAA,SAxGAC,CAAA,CAAA5H,CAAA,EACA,GAAAA,EAAA6H,OAAA,EAAAD,EAAAvQ,IAAA,GAAAtG,EAAA2W,OAAA,CACA,SAEA,GAAAE,EAAAvQ,IAAA,GAAAtG,EAAAsV,OAAA,EACA,GAAArG,EAAA8H,MAAA,EACAF,CAAAA,WAAAA,EAAAxQ,OAAA,EACAwQ,SAAAA,EAAAxQ,OAAA,EACAwQ,CAAAA,YAAAA,EAAA5F,UAAA,CAAAM,GAAA,EACAsF,kBAAAA,EAAA5F,UAAA,CAAAM,GAAA,GACAsF,SAAAA,EAAAxQ,OAAA,EACAwQ,aAAAA,EAAA5F,UAAA,CAAAM,GAAA,EACA,iBAAAsF,EAAA5F,UAAA,CAAA7N,IAAA,EACAmE,OAAAA,GAAAsP,EAAA5F,UAAA,CAAA7N,IAAA,IAGA6L,EAAA+H,WAAA,EACA,UAAAH,EAAAxQ,OAAA,EAAAwQ,kBAAAA,EAAA5F,UAAA,CAAAM,GAAA,EACAsF,SAAAA,EAAAxQ,OAAA,EACAiI,CAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,EAAAJ,KAAA,uCACAsG,qBAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,SAAAA,GAAAuI,EAAA5F,UAAA,CAAAM,GAAA,GACAjD,qBAAAA,GAAAuI,EAAA5F,UAAA,CAAAM,GAAA,GACAjD,kBAAAA,GAAAuI,EAAA5F,UAAA,CAAAM,GAAA,IATA,SAYA,GAAAsF,SAAAA,EAAAxQ,OAAA,EACA,GAAA4I,EAAAgI,oBAAA,EACA3I,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,EAAAJ,KAAA,4BAGAiH,EAAAiI,cAAA,EACA5I,CAAAA,GAAAuI,EAAA5F,UAAA,CAAAkG,QAAA,EAAAnP,KAAA,uBACAsG,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,EAAAJ,KAAA,oBACAsG,cAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GALA,SAQA,GAAA6G,EAAAmI,cAAA,EACA9I,CAAAA,WAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,cAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,YAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACA,SAEA,GAAA6G,EAAAoI,iBAAA,EACAR,KAAAxV,IAAAwV,EAAA5F,UAAA,eACA,cAEA,GAAAhC,EAAAqI,kBAAA,EACAhJ,CAAAA,WAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,cAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,cAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,cAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,WAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,GAAAuI,EAAA5F,UAAA,CAAAkG,QAAA,EAAAnP,KAAA,eACAsG,GAAAuI,EAAA5F,UAAA,CAAAkG,QAAA,EAAAnP,KAAA,eACA,cAEA,GAAAiH,EAAAsI,oBAAA,EACAjJ,CAAAA,6BAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,wBAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,eAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,oBAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,cAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,iBAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACAkG,+BAAAA,GAAAuI,EAAA5F,UAAA,CAAA7I,IAAA,GACA,QAEA,CACA,CACA,QACA,EAkCAyH,EAAAZ,IACA,IACAY,EAAAvJ,IAAA,GAAAtG,EAAAuW,IAAA,EACA1G,EAAAiG,OAAA,EACAjG,EAAA+B,WAAA,CAAAlP,OAAA,mBAAA1B,MAAA,EAIAyI,KApxBA,GAsxBA,IAAA+N,EAAA3V,OAAA4V,MAAA,CAAA5H,EAAA,CAA4D5K,GAAAA,CAAA,GAE5D,GADAyJ,EAAA5I,GAAA,CAAAvE,EAAAiW,GACAvS,KAAAA,EACA,YAEAoK,GACAA,EAAA9N,GAEA,IAAAmW,EAAA,CAAA5I,EACA,GAAA0I,EAAAlR,IAAA,GAAAtG,EAAAsV,OAAA,EACAoC,EAAAA,GAAA,CAAAF,EAAA7G,SAAA,CACA,OAAA6G,EAAA7G,SAAA,CACA,IAAAhP,EAAAJ,EAAAI,UAAA,CACAA,GAAAC,GAAAD,IACA6V,CAAAA,EAAAG,YAAA,IACA,CACA,IAAAH,EAAAlR,IAAA,GAAAtG,EAAAoQ,QAAA,EACAoH,EAAAlR,IAAA,GAAAtG,EAAAsV,OAAA,GACAoC,EAAA,CACAzI,EAAA2I,cAAA,EACAJ,EAAAlR,IAAA,GAAAtG,EAAAsV,OAAA,EACAkC,SAAAA,EAAAnR,OAAA,EACAuJ,CAAAA,EAAA,IAEA,IAAAiI,EAAA,CACA3M,IAAAA,EACAwD,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAZ,YAAAA,EACAa,gBAAAA,EACAjB,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACAe,UAAAA,EACAC,iBAAAA,EACA3I,iBAAAA,EACAuF,gBAAAA,EACAqD,WAAAA,EACApI,YAAAA,EACAqI,eAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAQ,mBAAAA,EACAP,YAAAA,EACAC,aAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,CACA,EACA,QAAAoI,KAAAzV,MAAAC,IAAA,CAAAf,EAAAiE,UAAA,GACA,IAAAuS,EAAAvJ,GAAAsJ,EAAAD,GACAE,GACAP,EAAAhS,UAAA,CAAAlC,IAAA,CAAAyU,EAEA,CACA,GAAAC,EArlCAjL,QAAA,GAAAxL,EAAAyL,YAAA,EAqlCAzL,EAAAI,UAAA,CACA,QAAAmW,KAAAzV,MAAAC,IAAA,CAAAf,EAAAI,UAAA,CAAA6D,UAAA,GACA,IAAAuS,EAAAvJ,GAAAsJ,EAAAD,GACAE,IACAnW,GAAAL,EAAAI,UAAA,GACAoW,CAAAA,EAAAE,QAAA,KACAT,EAAAhS,UAAA,CAAAlC,IAAA,CAAAyU,GAEA,CAEA,CA0FA,OAzFAxW,EAAA0L,UAAA,EACA3L,GAAAC,EAAA0L,UAAA,GACArL,GAAAL,EAAA0L,UAAA,GACAuK,CAAAA,EAAAS,QAAA,KAEAT,EAAAlR,IAAA,GAAAtG,EAAAsV,OAAA,EACAkC,WAAAA,EAAAnR,OAAA,EACA6R,SAtjBAC,CAAA,CAAAC,CAAA,CAAA7I,CAAA,MAMA8I,EALA,IAAAC,EAAAH,EAAAtP,aAAA,CACA,IAAAyP,EACA,OAEA,IAAAC,EAAA,GAEA,IACAF,EAAAC,EAAAhQ,QAAA,CAAA+P,UAAA,CAEA,MAAA1V,EAAA,CACA,MACA,CACA,GAAA0V,aAAAA,EAAA,CACA,IAAAG,EAAAvP,GAAA,KACAsP,IACAH,IACAG,EAAA,GAEA,EAAShJ,GACT4I,EAAAhE,gBAAA,aACAhL,GAAAqP,GACAD,EAAA,GACAH,GACA,GACA,MACA,CACA,IAAAK,EAAA,cACA,GAAAH,EAAAzQ,QAAA,CAAAzE,IAAA,GAAAqV,GACAN,EAAAhD,GAAA,GAAAsD,GACAN,KAAAA,EAAAhD,GAAA,CAEA,OADAlM,GAAAmP,EAAA,GACAD,EAAAhE,gBAAA,QAAAiE,GAEAD,EAAAhE,gBAAA,QAAAiE,EACA,EAmhBA7W,EAAA,KACA,IAAAmX,EAAAtP,GAAA7H,GACA,GAAAmX,GAAApJ,EAAA,CACA,IAAAqJ,EAAAnK,GAAAkK,EAAA,CACAxN,IAAAwN,EACAhK,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAb,YAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACAe,UAAA,GACAC,iBAAAA,EACA3I,iBAAAA,EACAuF,gBAAAA,EACAqD,WAAAA,EACApI,YAAAA,EACAqI,eAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAQ,mBAAAA,EACAP,YAAAA,EACAC,aAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,CACA,GACAiJ,GACArJ,EAAA/N,EAAAoX,EAEA,CACA,EAASpJ,GAETiI,EAAAlR,IAAA,GAAAtG,EAAAsV,OAAA,EACAkC,SAAAA,EAAAnR,OAAA,EACA,iBAAAmR,EAAAvG,UAAA,CAAAM,GAAA,EACAiG,CAAAA,eAAAA,EAAAvG,UAAA,CAAAM,GAAA,EACAiG,YAAAA,EAAAvG,UAAA,CAAAM,GAAA,EACA,iBAAAiG,EAAAvG,UAAA,CAAA7N,IAAA,EACAmE,QAAAA,GAAAiQ,EAAAvG,UAAA,CAAA7N,IAAA,IACAwV,SA/jBAC,CAAA,CAAAT,CAAA,CAAAU,CAAA,EACA,IACAC,EADAR,EAAA,GAEA,IACAQ,EAAAF,EAAAnH,KAAA,CAEA,MAAA/O,EAAA,CACA,MACA,CACA,GAAAoW,EACA,OACA,IAAAP,EAAAvP,GAAA,KACAsP,IACAH,IACAG,EAAA,GAEA,EAAKO,GACLD,EAAA1E,gBAAA,aACAhL,GAAAqP,GACAD,EAAA,GACAH,GACA,EACA,EAyiBA7W,EAAA,KACA,GAAAiO,EAAA,CACA,IAAAwJ,EAAAxK,GAAAjN,EAAA,CACA2J,IAAAA,EACAwD,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAb,YAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACAe,UAAA,GACAC,iBAAAA,EACA3I,iBAAAA,EACAuF,gBAAAA,EACAqD,WAAAA,EACApI,YAAAA,EACAqI,eAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAQ,mBAAAA,EACAP,YAAAA,EACAC,aAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,CACA,GACAsJ,GACAxJ,EAAAjO,EAAAyX,EAEA,CACA,EAASvJ,GAET+H,CACA,CAyEA,SAAAyB,GAAArY,CAAA,MAAiCC,EAA+B,IAAAC,EAAAF,CAAA,IAAoBG,EAAA,EAAW,KAAAA,EAAAH,EAAAI,MAAA,GAAyB,IAAAC,EAAAL,CAAA,CAAAG,EAAA,CAAmBG,EAAAN,CAAA,CAAAG,EAAA,GAA+B,GAARA,GAAA,EAAQ,CAAAE,mBAAAA,GAAAA,iBAAAA,CAAA,GAAAH,MAAAA,EAA2E,MAAoBG,CAAA,WAAAA,GAAAA,mBAAAA,GAAkDJ,EAAAC,EAAuBA,EAAAI,EAAAJ,IAAqBG,CAAAA,SAAAA,GAAAA,iBAAAA,CAAA,IAAmDH,EAAAI,EAAA,IAAAC,IAAAL,EAAAM,IAAA,CAAAP,KAAAM,IAA6DN,EAAAQ,KAAAA,EAAA,CAA+B,OAAAP,CAAA,CACtf,SAAAoY,GAAA5S,CAAA,CAAApF,CAAA,CAAAiY,EAAA7Q,QAAA,EACA,IAAAmG,EAAA,CAAsB2K,QAAA,GAAAC,QAAA,IAEtB,OADAF,EAAAhF,gBAAA,CAAA7N,EAAApF,EAAAuN,GACA,IAAA0K,EAAArF,mBAAA,CAAAxN,EAAApF,EAAAuN,EACA,CACA,IAAA6K,GAAA,4NAKAC,GAAA,CACAC,IAAA,GACA5U,MAAAA,KACAwP,QAAAzR,KAAA,CAAA2W,IACA,IAEApU,QAAAA,KACAkP,QAAAzR,KAAA,CAAA2W,IACA,MAEAhU,oBACA8O,QAAAzR,KAAA,CAAA2W,GACA,EACA3T,IAAAA,KACAyO,QAAAzR,KAAA,CAAA2W,IACA,IAEApT,QACAkO,QAAAzR,KAAA,CAAA2W,GACA,CACA,EAWA,SAAAG,GAAAC,CAAA,CAAAC,CAAA,CAAAlL,EAAA,EAA4C,EAC5C,IAAAmL,EAAA,KACAC,EAAA,EACA,mBAAA1Y,CAAA,EACA,IAAA2Y,EAAAC,KAAAD,GAAA,GACAD,GAAApL,CAAA,IAAAA,EAAAuL,OAAA,EACAH,CAAAA,EAAAC,CAAA,EAEA,IAAAG,EAAAN,EAAAG,CAAAA,EAAAD,CAAA,EACAK,EAAA,KACAD,GAAA,GAAAA,EAAAN,GACAC,IACAO,SA8RA,GAAAjR,CAAA,EACAkR,GAAA,mBAAAlR,EACA,EAhSA0Q,GACAA,EAAA,MAEAC,EAAAC,EACAJ,EAAAW,KAAA,CAAAH,EAAA/Y,IAEAyY,GAAAnL,CAAA,IAAAA,EAAA6L,QAAA,EACAV,CAAAA,EAAAW,GAAA,KACAV,EAAApL,CAAA,IAAAA,EAAAuL,OAAA,GAAAD,KAAAD,GAAA,GACAF,EAAA,KACAF,EAAAW,KAAA,CAAAH,EAAA/Y,EACA,EAAa8Y,EAAA,CAEb,CACA,CAiBA,SAAAO,GAAAC,CAAA,CAAArS,CAAA,CAAAsS,CAAA,EACA,IACA,IAAAtS,CAAAA,KAAAqS,CAAA,EACA,WACA,EAEA,IAAAE,EAAAF,CAAA,CAAArS,EAAA,CACAwS,EAAAF,EAAAC,GAWA,MAVA,mBAAAC,IACAA,EAAA9Y,SAAA,CAAA8Y,EAAA9Y,SAAA,KACAD,OAAAgZ,gBAAA,CAAAD,EAAA,CACAE,mBAAA,CACAC,WAAA,GACAja,MAAA6Z,CACA,CACA,IAEAF,CAAA,CAAArS,EAAA,CAAAwS,EACA,KACAH,CAAA,CAAArS,EAAA,CAAAuS,CACA,CACA,CACA,MAAAjN,EAAA,CACA,WACA,CACA,CACA,CA/EA,oBAAA9F,QAAAA,OAAAoT,KAAA,EAAApT,OAAAqT,OAAA,EACA1B,CAAAA,GAAA,IAAAyB,MAAAzB,GAAA,CACApU,IAAAA,CAAAgU,EAAA+B,EAAAC,KACA,QAAAD,GACA9G,QAAAzR,KAAA,CAAA2W,IAEA2B,QAAA9V,GAAA,CAAAgU,EAAA+B,EAAAC,GAEA,EAAK,EAwEL,IAAAC,GAAArB,KAAAD,GAAA,CAIA,SAAAuB,GAAA/C,CAAA,EACA,IAAApN,EAAAoN,EAAAhQ,QAAA,CACA,OACAgT,KAAApQ,EAAAqQ,gBAAA,CACArQ,EAAAqQ,gBAAA,CAAA5G,UAAA,CACA2D,KAAAjX,IAAAiX,EAAAkD,WAAA,CACAlD,EAAAkD,WAAA,CACAvC,GAAA,CAAA/N,EAAA,iBAAAzJ,GAAAA,EAAAga,eAAA,UAAA/Z,GAAAA,EAAAiT,UAAA,IACAsE,GAAA,CAAA/N,EAAA,iBAAArG,GAAAA,EAAA6W,IAAA,kBAAA3W,GAAAA,EAAAkJ,aAAA,kBAAAjJ,GAAAA,EAAA2P,UAAA,IACAsE,GAAA,CAAA/N,EAAA,iBAAAjD,GAAAA,EAAAyT,IAAA,kBAAAvF,GAAAA,EAAAxB,UAAA,IACA,EACAgH,IAAAzQ,EAAAqQ,gBAAA,CACArQ,EAAAqQ,gBAAA,CAAA1G,SAAA,CACAyD,KAAAjX,IAAAiX,EAAAsD,WAAA,CACAtD,EAAAsD,WAAA,CACA3C,GAAA,CAAA/N,EAAA,iBAAAkL,GAAAA,EAAAqF,eAAA,UAAApF,GAAAA,EAAAxB,SAAA,IACAoE,GAAA,CAAA/N,EAAA,iBAAA2Q,GAAAA,EAAAH,IAAA,kBAAAI,GAAAA,EAAA7N,aAAA,kBAAA8N,GAAAA,EAAAlH,SAAA,IACAoE,GAAA,CAAA/N,EAAA,iBAAA8Q,GAAAA,EAAAN,IAAA,kBAAAO,GAAAA,EAAApH,SAAA,IACA,CACA,CACA,CACA,SAAAqH,KACA,OAAAtU,OAAAuU,WAAA,EACA7T,SAAAmT,eAAA,EAAAnT,SAAAmT,eAAA,CAAAW,YAAA,EACA9T,SAAAoT,IAAA,EAAApT,SAAAoT,IAAA,CAAAU,YAAA,CAEA,SAAAC,KACA,OAAAzU,OAAA0U,UAAA,EACAhU,SAAAmT,eAAA,EAAAnT,SAAAmT,eAAA,CAAAc,WAAA,EACAjU,SAAAoT,IAAA,EAAApT,SAAAoT,IAAA,CAAAa,WAAA,CAEA,SAAAC,GAAA3W,CAAA,SACA,EAGAA,EAAAkH,QAAA,GAAAlH,EAAAmH,YAAA,CACAnH,EACAA,EAAAoI,aAAA,CAJA,IAMA,CACA,SAAAwO,GAAA5W,CAAA,CAAA8I,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAA6N,CAAA,EACA,IAAA7W,EACA,SAEA,IAAAwB,EAAAmV,GAAA3W,GACA,IAAAwB,EACA,SAEA,IAAAsV,EAAAzP,GAAAyB,EAAAC,GACA,IAAA8N,EAAA,CACA,IAAAE,EAAA/N,GAAAxH,EAAAgG,OAAA,CAAAwB,GACA,OAAA8N,EAAAtV,IAAA,CAAAuV,CACA,CACA,IAAAC,EAAAnQ,GAAArF,EAAAsV,GACAG,EAAA,SACA,CAAAD,CAAAA,EAAA,KAGAhO,GACAiO,CAAAA,EAAApQ,GAAArF,EAAA6F,GAAA,KAAA2B,GAAA,EAEAgO,EAAA,IAAAC,EAAA,GAGAD,EAAAC,EACA,CAIA,SAAAC,GAAAxb,CAAA,CAAAmN,CAAA,EACA,OAAAA,KAAAA,EAAA9J,KAAA,CAAArD,EACA,CAkBA,SAAAyb,GAAAC,CAAA,EACA,MAAA1W,CAAAA,CAAA0W,EAAAC,cAAA,CA0BA,SAAAC,GAAA5b,CAAA,CAAAmN,CAAA,EACA,MAAAnI,CAAAA,CAAAhF,CAAAA,WAAAA,EAAA6b,QAAA,EAAA1O,EAAA5J,OAAA,CAAAvD,EAAA,CACA,CACA,SAAA8b,GAAA9b,CAAA,CAAAmN,CAAA,EACA,MAAAnI,CAAAA,CAAAhF,CAAAA,SAAAA,EAAA6b,QAAA,EACA7b,EAAAwL,QAAA,GAAAxL,EAAAyL,YAAA,EACAzL,EAAA+F,YAAA,EACA/F,eAAAA,EAAA+F,YAAA,SACAoH,EAAA5J,OAAA,CAAAvD,EAAA,CACA,CACA,SAAA+b,GAAA/b,CAAA,EACA,MAAAgF,CAAAA,CAAA0S,GAAA,CAAA1X,EAAA,iBAAAgc,GAAAA,EAAA5b,UAAA,EACA,CAnIA,iBAAqB4I,IAAA,CAAAwP,KAAAD,GAAA,GAAA/X,QAAA,KACrBqZ,CAAAA,GAAA,QAAArB,OAAAyD,OAAA,GAmIA,OAAAC,GACAlZ,aAAA,CACA,KAAAU,EAAA,GACA,KAAAyY,UAAA,KAAA/Y,QACA,KAAAgZ,UAAA,KAAAlZ,GACA,CACAG,MAAAwM,CAAA,EACA,MAAe,GAAAwM,EAAAC,CAAA,EAAgB,KAAAH,UAAA,CAAAvY,GAAA,CAAAiM,GAAA,OAC/B,CACAzL,IAAAyL,CAAA,EACA,YAAAsM,UAAA,CAAA/X,GAAA,CAAAyL,EACA,CACAtL,IAAAsL,CAAA,CAAAnM,CAAA,MAGA6Y,SAFA,KAAAnY,GAAA,CAAAyL,GACA,KAAAxM,KAAA,CAAAwM,IAGA0M,EADA7Y,KAAA5D,IAAA4D,EACA,KAAAA,EAAA,GAGAA,EACA,KAAAyY,UAAA,CAAA1X,GAAA,CAAAoL,EAAA0M,GACA,KAAAH,UAAA,CAAA3X,GAAA,CAAA8X,EAAA1M,GACA0M,EACA,CACAC,SAAA9Y,CAAA,EACA,YAAA0Y,UAAA,CAAAxY,GAAA,CAAAF,IAAA,IACA,CACAiB,OAAA,CACA,KAAAwX,UAAA,KAAA/Y,QACA,KAAAgZ,UAAA,KAAAlZ,IACA,KAAAQ,EAAA,EACA,CACA+Y,YAAA,CACA,YAAA/Y,EAAA,EACA,CACA,CACA,SAAAgZ,GAAA1c,CAAA,EACA,IAAA2c,EAAA,KAIA,OAHAjF,GAAA,CAAA1X,EAAA,SAAA4c,GAAAA,EAAAC,WAAA,gBAAAC,GAAAA,IAAA,iBAAAC,GAAAA,EAAAvR,QAAA,KAAAwR,KAAAC,sBAAA,EACAjd,EAAA6c,WAAA,GAAA5c,IAAA,EACA0c,CAAAA,EAAA3c,EAAA6c,WAAA,GAAA5c,IAAA,EACA0c,CACA,CAeA,SAAAO,GAAAld,CAAA,EACA,IAAA2J,EAAA3J,EAAAmd,aAAA,OACA,EAAAxT,GAEAA,CAAAA,EAAA2F,QAAA,CAAAtP,IAAAod,SAXApd,CAAA,EACA,IAAA2J,EAAA3J,EAAAmd,aAAA,CACA,IAAAxT,EACA,SACA,IAAAgT,EAAAU,SAXArd,CAAA,EACA,IACA2c,EADAW,EAAAtd,EAEA,KAAA2c,EAAAD,GAAAY,IACAA,EAAAX,EACA,OAAAW,CACA,EAKAtd,GACA,OAAA2J,EAAA2F,QAAA,CAAAqN,EACA,EAKA3c,EAAA,CACA,CACA,IAAAud,GAAA,GACA,SAAA1E,GAAAhS,CAAA,EACA,IAAAC,EAAAyW,EAAA,CAAA1W,EAAA,CACA,GAAAC,EACA,OAAAA,EAEA,IAAAC,EAAAV,OAAAU,QAAA,CACAC,EAAAX,MAAA,CAAAQ,EAAA,CACA,GAAAE,GAAA,mBAAAA,EAAAE,aAAA,CACA,IACA,IAAAC,EAAAH,EAAAE,aAAA,UACAC,CAAAA,EAAAC,MAAA,IACAJ,EAAAK,IAAA,CAAAC,WAAA,CAAAH,GACA,IAAAI,EAAAJ,EAAAI,aAAA,CACAA,GAAAA,CAAA,CAAAT,EAAA,EACAG,CAAAA,EACAM,CAAA,CAAAT,EAAA,EAEAE,EAAAK,IAAA,CAAAG,WAAA,CAAAL,EACA,CACA,MAAAM,EAAA,CACA,CAEA,OAAA+V,EAAA,CAAA1W,EAAA,CAAAG,EAAAS,IAAA,CAAApB,OACA,CAIA,SAAA2S,GAAA,GAAArR,CAAA,EACA,OAAAkR,GAAA,iBAAAlR,EACA,CAKA,IAAA6V,IACAnf,CADAA,EASCmf,IAAA,GARD,CAAAnf,EAAA,uCACAA,CAAA,CAAAA,EAAA,eACAA,CAAA,CAAAA,EAAA,+BACAA,CAAA,CAAAA,EAAA,6CACAA,CAAA,CAAAA,EAAA,eACAA,CAAA,CAAAA,EAAA,mBACAA,CAAA,CAAAA,EAAA,mBACAA,GAEAof,IACAnf,CADAA,EAmBCmf,IAAA,GAlBD,CAAAnf,EAAA,uBACAA,CAAA,CAAAA,EAAA,yBACAA,CAAA,CAAAA,EAAA,uCACAA,CAAA,CAAAA,EAAA,mBACAA,CAAA,CAAAA,EAAA,mCACAA,CAAA,CAAAA,EAAA,iBACAA,CAAA,CAAAA,EAAA,yBACAA,CAAA,CAAAA,EAAA,uCACAA,CAAA,CAAAA,EAAA,mCACAA,CAAA,CAAAA,EAAA,mCACAA,CAAA,CAAAA,EAAA,gBACAA,CAAA,CAAAA,EAAA,cACAA,CAAA,CAAAA,EAAA,gBACAA,CAAA,CAAAA,EAAA,wCACAA,CAAA,CAAAA,EAAA,0BACAA,CAAA,CAAAA,EAAA,0CACAA,CAAA,CAAAA,EAAA,kCACAA,GAEAof,IACAnf,CADAA,EAaCmf,IAAA,GAZD,CAAAnf,EAAA,qBACAA,CAAA,CAAAA,EAAA,yBACAA,CAAA,CAAAA,EAAA,iBACAA,CAAA,CAAAA,EAAA,6BACAA,CAAA,CAAAA,EAAA,uBACAA,CAAA,CAAAA,EAAA,iBACAA,CAAA,CAAAA,EAAA,eACAA,CAAA,CAAAA,EAAA,2BACAA,CAAA,CAAAA,EAAA,2CACAA,CAAA,CAAAA,EAAA,uBACAA,CAAA,CAAAA,EAAA,8BACAA,GAEAof,IACAnf,CADAA,EAKCmf,IAAA,GAJD,CAAAnf,EAAA,iBACAA,CAAA,CAAAA,EAAA,aACAA,CAAA,CAAAA,EAAA,iBACAA,GA4BA,SAAAof,GAAA9V,CAAA,EACA,IACA,OAAAA,EAAAC,eAAA,CAEA,MAAAP,EAAA,CACA,CACA,CA7BApJ,CADAA,EAOCM,GAAAA,CAAAA,EAAA,IAND,CAAAN,EAAA,uBACAA,CAAA,CAAAA,EAAA,+BACAA,CAAA,CAAAA,EAAA,qBACAA,CAAA,CAAAA,EAAA,eACAA,CAAA,CAAAA,EAAA,iBACAA,CAAA,CAAAA,EAAA,qBAIAA,CADAA,EAaCO,GAAAA,CAAAA,EAAA,IAZD,CAAAP,EAAA,6BACAA,CAAA,CAAAA,EAAA,+BACAA,CAAA,CAAAA,EAAA,mCACAA,CAAA,CAAAA,EAAA,yBACAA,CAAA,CAAAA,EAAA,2CACAA,CAAA,CAAAA,EAAA,iDACAA,CAAA,CAAAA,EAAA,6BACAA,CAAA,CAAAA,EAAA,6DACAA,CAAA,CAAAA,EAAA,+BACAA,CAAA,CAAAA,EAAA,iCACAA,CAAA,CAAAA,EAAA,4CACAA,CAAA,CAAAA,EAAA,mDAsBA,OAAAyf,GACA7a,aAAA,CACA,KAAAvD,MAAA,GACA,KAAA2H,IAAA,MACA,KAAA0W,IAAA,KACA,CACAla,IAAAma,CAAA,EACA,GAAAA,GAAA,KAAAte,MAAA,CACA,8CAEA,IAAAue,EAAA,KAAA5W,IAAA,CACA,QAAA6W,EAAA,EAA4BA,EAAAF,EAAkBE,IAC9CD,EAAAE,SAhBA7e,CAAA,MAAiCC,EAA+B,IAAAC,EAAAF,CAAA,IAAoBG,EAAA,EAAW,KAAAA,EAAAH,EAAAI,MAAA,GAAyB,IAAAC,EAAAL,CAAA,CAAAG,EAAA,CAAmBG,EAAAN,CAAA,CAAAG,EAAA,GAA+B,GAARA,GAAA,EAAQ,CAAAE,mBAAAA,GAAAA,iBAAAA,CAAA,GAAAH,MAAAA,EAA2E,MAAoBG,CAAA,WAAAA,GAAAA,mBAAAA,GAAkDJ,EAAAC,EAAuBA,EAAAI,EAAAJ,IAAqBG,CAAAA,SAAAA,GAAAA,iBAAAA,CAAA,IAAmDH,EAAAI,EAAA,IAAAC,IAAAL,EAAAM,IAAA,CAAAP,KAAAM,IAA6DN,EAAAQ,KAAAA,EAAA,CAA+B,OAAAP,CAAA,EAgBtf,CAAAye,EAAA,iBAAA9d,GAAAA,EAAAie,IAAA,SAEA,OAAAH,CACA,CACAI,QAAApe,CAAA,EACA,IAAAsE,EAAA,CACA/E,MAAAS,EACAsY,SAAA,KACA6F,KAAA,IACA,EAEA,GADAne,EAAAqe,IAAA,CAAA/Z,EACAtE,EAAA2U,eAAA,EAzBA,SAyBA3U,EAAA2U,eAAA,EACA,IAAAqJ,EAAAhe,EAAA2U,eAAA,CAAA0J,IAAA,CAAAF,IAAA,CACA7Z,EAAA6Z,IAAA,CAAAH,EACA1Z,EAAAgU,QAAA,CAAAtY,EAAA2U,eAAA,CAAA0J,IAAA,CACAre,EAAA2U,eAAA,CAAA0J,IAAA,CAAAF,IAAA,CAAA7Z,EACA0Z,GACAA,CAAAA,EAAA1F,QAAA,CAAAhU,CAAA,CAEA,MACA,GAAAtE,EAAA0U,WAAA,EAlCA,SAmCA1U,EAAA0U,WAAA,EACA1U,EAAA0U,WAAA,CAAA2J,IAAA,CAAA/F,QAAA,EACA,IAAA0F,EAAAhe,EAAA0U,WAAA,CAAA2J,IAAA,CAAA/F,QAAA,CACAhU,EAAAgU,QAAA,CAAA0F,EACA1Z,EAAA6Z,IAAA,CAAAne,EAAA0U,WAAA,CAAA2J,IAAA,CACAre,EAAA0U,WAAA,CAAA2J,IAAA,CAAA/F,QAAA,CAAAhU,EACA0Z,GACAA,CAAAA,EAAAG,IAAA,CAAA7Z,CAAA,CAEA,MAEA,KAAA8C,IAAA,EACA,MAAAA,IAAA,CAAAkR,QAAA,CAAAhU,CAAA,EAEAA,EAAA6Z,IAAA,MAAA/W,IAAA,CACA,KAAAA,IAAA,CAAA9C,CAEA,QAAAA,EAAA6Z,IAAA,EACA,MAAAL,IAAA,CAAAxZ,CAAA,EAEA,KAAA7E,MAAA,EACA,CACA6e,WAAAte,CAAA,EACA,IAAAge,EAAAhe,EAAAqe,IAAA,CACA,KAAAjX,IAAA,GAGA4W,EAAA1F,QAAA,EAUA0F,EAAA1F,QAAA,CAAA6F,IAAA,CAAAH,EAAAG,IAAA,CACAH,EAAAG,IAAA,CACAH,EAAAG,IAAA,CAAA7F,QAAA,CAAA0F,EAAA1F,QAAA,CAGA,KAAAwF,IAAA,CAAAE,EAAA1F,QAAA,GAdA,KAAAlR,IAAA,CAAA4W,EAAAG,IAAA,CACA,KAAA/W,IAAA,CACA,KAAAA,IAAA,CAAAkR,QAAA,MAGA,KAAAwF,IAAA,OAYA9d,EAAAqe,IAAA,EACA,OAAAre,EAAAqe,IAAA,CAEA,KAAA5e,MAAA,GACA,CACA,CACA,IAAA8e,GAAA,CAAA7a,EAAA8a,IAAA,GAAqC9a,EAAG,GAAG8a,EAAS,QACpDC,GACAzb,aAAA,CACA,KAAA0b,MAAA,IACA,KAAAC,MAAA,IACA,KAAAC,KAAA,IACA,KAAAlP,UAAA,IACA,KAAAmP,YAAA,KAAAzb,QACA,KAAA0b,OAAA,IACA,KAAAC,UAAA,IACA,KAAAC,QAAA,IACA,KAAAC,QAAA,KAAAC,IACA,KAAAC,QAAA,KAAAD,IACA,KAAAE,UAAA,KAAAF,IACA,KAAAG,gBAAA,KACAC,EAAApb,OAAA,MAAAqb,eAAA,EACA,KAAAC,IAAA,EACA,EACA,KAAAA,IAAA,MACA,QAAAd,MAAA,OAAAC,MAAA,CACA,OAEA,IAAAc,EAAA,GACAC,EAAA,IAAAR,IACAS,EAAA,IAAA9B,GACA+B,EAAA,IACA,IAAAC,EAAA7f,EACA8f,EAriDA,GAsiDA,KAAAA,KAAAA,GAEAA,EAAAD,CADAA,EAAAA,GAAAA,EAAAnL,WAAA,GACA,KAAAvH,MAAA,CAAA9J,KAAA,CAAAwc,GAEA,OAAAC,CACA,EACAC,EAAA,IACA,IAAA/f,EAAA0L,UAAA,GAAAwR,GAAAld,GACA,OAEA,IAAAwe,EAAAze,GAAAC,EAAA0L,UAAA,EACA,KAAAyB,MAAA,CAAA9J,KAAA,CAAAqZ,GAAA1c,IACA,KAAAmN,MAAA,CAAA9J,KAAA,CAAArD,EAAA0L,UAAA,EACAoU,EAAAF,EAAA5f,GACA,GAAAwe,KAAAA,GAAAsB,KAAAA,EACA,OAAAH,EAAAvB,OAAA,CAAApe,GAEA,IAAAsV,EAAArI,GAAAjN,EAAA,CACA2J,IAAA,KAAAA,GAAA,CACAwD,OAAA,KAAAA,MAAA,CACAC,WAAA,KAAAA,UAAA,CACAC,cAAA,KAAAA,aAAA,CACAZ,YAAA,KAAAA,WAAA,CACAa,gBAAA,KAAAA,eAAA,CACAjB,cAAA,KAAAA,aAAA,CACAE,gBAAA,KAAAA,eAAA,CACAD,iBAAA,KAAAA,gBAAA,CACAE,mBAAA,KAAAA,kBAAA,CACAe,UAAA,GACAa,kBAAA,GACAZ,iBAAA,KAAAA,gBAAA,CACA3I,iBAAA,KAAAA,gBAAA,CACAuF,gBAAA,KAAAA,eAAA,CACAqD,WAAA,KAAAA,UAAA,CACApI,YAAA,KAAAA,WAAA,CACAqI,eAAA,KAAAA,cAAA,CACAC,eAAA,KAAAA,cAAA,CACAE,aAAA,KAAAA,YAAA,CACAD,aAAA,KAAAA,YAAA,CACAE,YAAA,IACA8N,GAAAoE,EAAA,KAAA7S,MAAA,GACA,CAAA+N,GAAA8E,EAAA,KAAA5S,UAAA,MAAAC,aAAA,MAAAC,eAAA,MACA,KAAA2S,aAAA,CAAAC,SAAA,CAAAF,GAEAlE,GAAAkE,EAAA,KAAA7S,MAAA,GACA,KAAAgT,iBAAA,CAAAC,gBAAA,CAAAJ,GAEAjE,GAAA/b,IACA,KAAAqgB,gBAAA,CAAAC,aAAA,CAAAtgB,EAAAI,UAAA,MAAAuJ,GAAA,CAEA,EACAoE,aAAA,CAAAjG,EAAAyY,KACArF,GAAApT,EAAA,KAAAsF,UAAA,MAAAC,aAAA,MAAAC,eAAA,OAGA,KAAA2S,aAAA,CAAAO,YAAA,CAAA1Y,EAAAyY,GACAzY,EAAAR,aAAA,EACA,KAAAmZ,aAAA,CAAAC,SAAA,CAAA5Y,EAAAR,aAAA,EAEA,KAAA+Y,gBAAA,CAAAM,mBAAA,CAAA7Y,GACA,EACAmG,iBAAA,CAAAqJ,EAAAiJ,KACA,KAAAJ,iBAAA,CAAAS,iBAAA,CAAAtJ,EAAAiJ,EACA,CACA,GACAjL,IACAmK,EAAA1d,IAAA,EACAyc,SAAAA,EACAsB,OAAAA,EACAxb,KAAAgR,CACA,GACAoK,EAAAnb,GAAA,CAAA+Q,EAAA5R,EAAA,EAEA,EACA,UAAAqb,UAAA,CAAAtf,MAAA,EACA,KAAA0N,MAAA,CAAApJ,iBAAA,MAAAgb,UAAA,CAAA8B,KAAA,IAEA,QAAA7gB,KAAA,KAAAmf,QAAA,CACA2B,CAAAA,CAAAA,GAAA,KAAAhC,OAAA,CAAA9e,EAAA,KAAAmN,MAAA,GACA,KAAAgS,QAAA,CAAA/a,GAAA,CAAApE,EAAA0L,UAAA,IAGAqU,EAAA/f,GAEA,QAAAA,KAAA,KAAAif,QAAA,CACA,QAAAG,UAAA,CAAApf,IACA8gB,GAAA,KAAAhC,OAAA,CAAA9e,EAAA,KAAAmN,MAAA,EAGA4T,GAAA,KAAA5B,QAAA,CAAAnf,GACA+f,EAAA/f,GAGA,KAAAof,UAAA,CAAA7a,GAAA,CAAAvE,GANA+f,EAAA/f,GASA,IAAAghB,EAAA,KACA,KAAArB,EAAAlgB,MAAA,GACA,IAAA6E,EAAA,KACA,GAAA0c,EAAA,CACA,IAAAxC,EAAA,KAAArR,MAAA,CAAA9J,KAAA,CAAA2d,EAAAzhB,KAAA,CAAAmM,UAAA,EACAoU,EAAAF,EAAAoB,EAAAzhB,KAAA,CACA,MAAAif,GAAAsB,KAAAA,GACAxb,CAAAA,EAAA0c,CAAA,CAEA,CACA,IAAA1c,EAAA,CACA,IAAA2c,EAAAtB,EAAA7B,IAAA,CACA,KAAAmD,GAAA,CACA,IAAAC,EAAAD,EAEA,GADAA,EAAAA,EAAA3I,QAAA,CACA4I,EAAA,CACA,IAAA1C,EAAA,KAAArR,MAAA,CAAA9J,KAAA,CAAA6d,EAAA3hB,KAAA,CAAAmM,UAAA,EAEA,GAAAoU,KADAF,EAAAsB,EAAA3hB,KAAA,EAEA,SACA,GAAAif,KAAAA,EAAA,CACAla,EAAA4c,EACA,KACA,CACA,CACA,IAAAC,EAAAD,EAAA3hB,KAAA,CACA,GAAA4hB,EAAAzV,UAAA,EACAyV,EAAAzV,UAAA,CAAAF,QAAA,GACAwR,KAAAC,sBAAA,EACA,IAAAN,EAAAwE,EAAAzV,UAAA,CACAzL,IAAA,CAEA,GAAAue,KADA,KAAArR,MAAA,CAAA9J,KAAA,CAAAsZ,GACA,CACArY,EAAA4c,EACA,KACA,CACA,CACA,CACA,CACA,CACA,CACA,IAAA5c,EAAA,CACA,KAAAqb,EAAAvY,IAAA,EACAuY,EAAArB,UAAA,CAAAqB,EAAAvY,IAAA,CAAA7H,KAAA,EAEA,KACA,CACAyhB,EAAA1c,EAAAgU,QAAA,CACAqH,EAAArB,UAAA,CAAAha,EAAA/E,KAAA,EACAwgB,EAAAzb,EAAA/E,KAAA,CACA,CACA,IAAA6hB,EAAA,CACAxC,MAAA,KAAAA,KAAA,CACA3G,GAAA,MACAvU,GAAA,KAAAyJ,MAAA,CAAA9J,KAAA,CAAAiC,EAAAhB,IAAA,EACA/E,MAAA+F,EAAA/F,KAAA,CACA,GACA8hB,MAAA,KAAA3B,EAAAtb,GAAA,CAAAkB,EAAA5B,EAAA,GACA2d,MAAA,SAAAlU,MAAA,CAAA/I,GAAA,CAAAkB,EAAA5B,EAAA,GACAgM,WAAA,KAAAA,UAAA,CACAuI,GAAA,KACA,IAA4BvI,WAAAA,CAAA,EAAahN,EACzC,oBAAAgN,EAAApN,KAAA,EACA,IAAAgf,EAAA3f,KAAAC,SAAA,CAAAc,EAAA6e,SAAA,EACAC,EAAA7f,KAAAC,SAAA,CAAAc,EAAA+e,gBAAA,CACAH,CAAAA,EAAA7hB,MAAA,CAAAiQ,EAAApN,KAAA,CAAA7C,MAAA,EACA,CAAA6hB,EAAAE,CAAA,EAAA/f,KAAA,SAAAhC,MAAA,GACAiQ,EAAApN,KAAA,CAAAb,KAAA,SAAAhC,MAAA,EACAiQ,CAAAA,EAAApN,KAAA,CAAAI,EAAA6e,SAAA,CAGA,CACA,OACA7d,GAAA,KAAAyJ,MAAA,CAAA9J,KAAA,CAAAX,EAAA4B,IAAA,EACAoL,WAAAA,CACA,CACA,GACA2R,MAAA,KAAA3B,EAAAtb,GAAA,CAAA1B,EAAAgB,EAAA,GACA2d,MAAA,SAAAlU,MAAA,CAAA/I,GAAA,CAAA1B,EAAAgB,EAAA,GACAob,QAAA,KAAAA,OAAA,CACAW,KAAAA,CACA,EACA,GAAAb,KAAA,CAAAnf,MAAA,EACA2hB,EAAA1R,UAAA,CAAAjQ,MAAA,EACA2hB,EAAAtC,OAAA,CAAArf,MAAA,EACA2hB,EAAA3B,IAAA,CAAAhgB,MAAA,IAGA,KAAAmf,KAAA,IACA,KAAAlP,UAAA,IACA,KAAAmP,YAAA,KAAAzb,QACA,KAAA0b,OAAA,IACA,KAAAG,QAAA,KAAAC,IACA,KAAAC,QAAA,KAAAD,IACA,KAAAE,UAAA,KAAAF,IACA,KAAAF,QAAA,IACA,KAAA0C,UAAA,CAAAN,GACA,EACA,KAAA7B,eAAA,KACA,IAAA/D,GAAAmG,EAAA/J,MAAA,MAAAzK,MAAA,EAGA,OAAAwU,EAAA5c,IAAA,EACA,qBACA,IAAAxF,EAAAoiB,EAAA/J,MAAA,CAAAvH,WAAA,CACA6K,GAAAyG,EAAA/J,MAAA,MAAAxK,UAAA,MAAAC,aAAA,MAAAC,eAAA,MACA/N,IAAAoiB,EAAAC,QAAA,EACA,KAAAhD,KAAA,CAAA7c,IAAA,EACAxC,MAAA6M,GAAAuV,EAAA/J,MAAA,MAAAvL,aAAA,MAAAC,gBAAA,MAAAC,eAAA,MAAAC,kBAAA,MAAAC,WAAA,GAAAlN,EACA,KAAAkO,UAAA,CACA,KAAAA,UAAA,CAAAlO,EAAA0b,GAAA0G,EAAA/J,MAAA,GACArY,EAAA4B,OAAA,cACA5B,EACA+E,KAAAqd,EAAA/J,MAAA,GAGA,KACA,CACA,kBACA,IAAAA,EAAA+J,EAAA/J,MAAA,CACAiK,EAAAF,EAAAE,aAAA,CACAtiB,EAAAoiB,EAAA/J,MAAA,CAAA7R,YAAA,CAAA8b,GACA,GAAAA,UAAAA,EAAA,CACA,IAAA9c,EAAAY,GAAAiS,GACA9S,EAAA8S,EAAA9S,OAAA,CACAvF,EAAAsG,GAAA+R,EAAA9S,EAAAC,GACA,IAAA+c,EAAAld,GAAA,CACAC,iBAAA,KAAAA,gBAAA,CACAC,QAAAA,EACAC,KAAAA,CACA,GAEAxF,EAAA2F,GAAA,CACAC,SAFAiH,GAAAuV,EAAA/J,MAAA,MAAAvL,aAAA,MAAAC,gBAAA,MAAAC,eAAA,MAAAC,kBAAA,CAAAsV,GAGA1c,QAAAwS,EACArY,MAAAA,EACA8F,YAAA,KAAAA,WAAA,EAEA,CACA,GAAA6V,GAAAyG,EAAA/J,MAAA,MAAAxK,UAAA,MAAAC,aAAA,MAAAC,eAAA,MACA/N,IAAAoiB,EAAAC,QAAA,CACA,OAEA,IAAAG,EAAA,KAAAlD,YAAA,CAAAjb,GAAA,CAAA+d,EAAA/J,MAAA,EACA,GAAAA,WAAAA,EAAA9S,OAAA,EACA+c,QAAAA,GACA,MAAA1T,eAAA,CAAA5O,GAAA,CAEA,GADAqe,GAAAhG,GAKA,OAHAiK,EAAA,QAKA,CAgBA,GAfAE,IACAA,EAAA,CACAzd,KAAAqd,EAAA/J,MAAA,CACAlI,WAAA,GACA6R,UAAA,GACAE,iBAAA,EACA,EACA,KAAA/R,UAAA,CAAA3N,IAAA,CAAAggB,GACA,KAAAlD,YAAA,CAAApa,GAAA,CAAAkd,EAAA/J,MAAA,CAAAmK,IAEA,SAAAF,GACAjK,UAAAA,EAAA9S,OAAA,EACA,cAAA6c,EAAAC,QAAA,MAAA3c,WAAA,IACA2S,EAAA1N,YAAA,+BAEA,CAAAe,GAAA2M,EAAA9S,OAAA,CAAA+c,KACAE,EAAArS,UAAA,CAAAmS,EAAA,CAAA1X,GAAA,KAAAR,GAAA,CAAA1E,GAAA2S,EAAA9S,OAAA,EAAAG,GAAA4c,GAAAtiB,EAAAqY,EAAA,KAAAxN,eAAA,EACAyX,UAAAA,GAAA,CACA,SAAAG,aAAA,CACA,IACA,KAAAA,aAAA,CACAjb,SAAAkb,cAAA,CAAAC,kBAAA,EACA,CACA,MAAA1a,EAAA,CACA,KAAAwa,aAAA,MAAArY,GAAA,CAGA,IAAAwY,EAAA,KAAAH,aAAA,CAAA/a,aAAA,SAIA,QAAAmb,KAHAT,EAAAC,QAAA,EACAO,EAAAjY,YAAA,SAAAyX,EAAAC,QAAA,EAEA9gB,MAAAC,IAAA,CAAA6W,EAAAtV,KAAA,IACA,IAAA+f,EAAAzK,EAAAtV,KAAA,CAAAO,gBAAA,CAAAuf,GACAE,EAAA1K,EAAAtV,KAAA,CAAAM,mBAAA,CAAAwf,EACAC,CAAAA,IAAAF,EAAA7f,KAAA,CAAAO,gBAAA,CAAAuf,IACAE,IAAAH,EAAA7f,KAAA,CAAAM,mBAAA,CAAAwf,GACAE,KAAAA,EACAP,EAAAR,SAAA,CAAAa,EAAA,CAAAC,EAGAN,EAAAR,SAAA,CAAAa,EAAA,EAAAC,EAAAC,EAAA,CAIAP,EAAAN,gBAAA,CAAAW,EAAA,EAAAC,EAAAC,EAAA,CAGA,QAAAF,KAAAthB,MAAAC,IAAA,CAAAohB,EAAA7f,KAAA,EACA,KAAAsV,EAAAtV,KAAA,CAAAO,gBAAA,CAAAuf,IACAL,CAAAA,EAAAR,SAAA,CAAAa,EAAA,IAGA,CAEA,KACA,CACA,gBACA,GAAAlH,GAAAyG,EAAA/J,MAAA,MAAAxK,UAAA,MAAAC,aAAA,MAAAC,eAAA,KACA,OAEAqU,EAAAY,UAAA,CAAAre,OAAA,SAAAse,OAAA,CAAAxiB,EAAA2hB,EAAA/J,MAAA,GACA+J,EAAAc,YAAA,CAAAve,OAAA,KACA,IAAAwe,EAAA,KAAAvV,MAAA,CAAA9J,KAAA,CAAArD,GACAwe,EAAAze,GAAA4hB,EAAA/J,MAAA,EACA,KAAAzK,MAAA,CAAA9J,KAAA,CAAAse,EAAA/J,MAAA,CAAA3X,IAAA,EACA,KAAAkN,MAAA,CAAA9J,KAAA,CAAAse,EAAA/J,MAAA,EACAsD,GAAAyG,EAAA/J,MAAA,MAAAxK,UAAA,MAAAC,aAAA,MAAAC,eAAA,MACAkO,GAAAxb,EAAA,KAAAmN,MAAA,GA9qBAA,KAAAA,IA+qBA,CAAAA,MAAA,CA/qBA9J,KAAA,CA+qBArD,KAGA,KAAAif,QAAA,CAAA7a,GAAA,CAAApE,IACA2iB,GAAA,KAAA1D,QAAA,CAAAjf,GACA,KAAAof,UAAA,CAAA7a,GAAA,CAAAvE,IAEA,KAAAif,QAAA,CAAA7a,GAAA,CAAAud,EAAA/J,MAAA,GAAA8K,KAAAA,GACAE,SAlrBAA,EAAAhL,CAAA,CAAAzK,CAAA,EACA,GAAApN,GAAA6X,GACA,SAEA,IAAAlU,EAAAyJ,EAAA9J,KAAA,CAAAuU,SACA,CAAAzK,EAAA/I,GAAA,CAAAV,IAGAkU,CAAAA,CAAAA,EAAAlM,UAAA,EACAkM,EAAAlM,UAAA,CAAAF,QAAA,GAAAoM,EAAAjJ,aAAA,KAGAiJ,EAAAlM,UAAA,EAGAkX,EAAAhL,EAAAlM,UAAA,CAAAyB,GACA,EAkqBAwU,EAAA/J,MAAA,MAAAzK,MAAA,IACA,KAAAgS,QAAA,CAAA/a,GAAA,CAAApE,IACA,KAAAgf,QAAA,CAAAT,GAAAmE,EAAAlE,GAAA,CACAmE,GAAA,KAAAxD,QAAA,CAAAnf,GAGA,KAAA8e,OAAA,CAAA/c,IAAA,EACAyc,SAAAA,EACA9a,GAAAgf,EACAhM,SAAA3W,EAAAA,CAAAA,GAAA4hB,EAAA/J,MAAA,GAAAvX,GAAAshB,EAAA/J,MAAA,IAEA9X,KAAAA,CACA,IAEA,KAAAif,UAAA,CAAAhd,IAAA,CAAA/B,GACA,EAGA,CACA,EACA,KAAAwiB,OAAA,EAAAxiB,EAAA4X,KACA,SAAAiL,oBAAA,CAAAC,aAAA,CAAA9iB,EAAA,QAEA,MAAAif,QAAA,CAAA7a,GAAA,CAAApE,IAAA,KAAAmf,QAAA,CAAA/a,GAAA,CAAApE,EAAA,GAEA,QAAAmN,MAAA,CAAA9I,OAAA,CAAArE,GAAA,CACA,GAAAwb,GAAAxb,EAAA,KAAAmN,MAAA,EACA,OAEA,KAAAgS,QAAA,CAAA5a,GAAA,CAAAvE,GACA,IAAA+iB,EAAA,KACAnL,GAAA,KAAAzK,MAAA,CAAA9I,OAAA,CAAAuT,IACAmL,CAAAA,EAAA,KAAA5V,MAAA,CAAA9J,KAAA,CAAAuU,EAAA,EAEAmL,GAAAA,KAAAA,GACA,MAAA/D,QAAA,CAAAT,GAAA,KAAApR,MAAA,CAAA9J,KAAA,CAAArD,GAAA+iB,GAAA,IAEA,MAEA,KAAA9D,QAAA,CAAA1a,GAAA,CAAAvE,GACA,KAAAof,UAAA,CAAApb,MAAA,CAAAhE,EAEA,EAAAkb,GAAAlb,EAAA,KAAAoN,UAAA,MAAAC,aAAA,MAAAC,eAAA,OACAtN,EAAAiE,UAAA,CAAAC,OAAA,SAAAse,OAAA,CAAAjM,IACAwF,GAAA/b,IACAA,EAAAI,UAAA,CAAA6D,UAAA,CAAAC,OAAA,KACA,KAAA2e,oBAAA,CAAAte,GAAA,CAAAgS,EAAA,MACA,KAAAiM,OAAA,CAAAjM,EAAAvW,EACA,IAGA,CACA,CACAgjB,KAAA9V,CAAA,EACA,CACA,aACA,aACA,gBACA,kBACA,cACA,gBACA,kBACA,mBACA,qBACA,mBACA,mBACA,kBACA,aACA,cACA,kBACA,eACA,eACA,iBACA,iBACA,MACA,SACA,gBACA,oBACA,mBACA,gBACA,uBACA,CAAAhJ,OAAA,KACA,KAAA+e,EAAA,CAAA/V,CAAA,CAAA+V,EAAA,EAEA,CACAC,QAAA,CACA,KAAAxE,MAAA,IACA,KAAA+B,aAAA,CAAAyC,MAAA,EACA,CACAC,UAAA,CACA,KAAAzE,MAAA,IACA,KAAA+B,aAAA,CAAA0C,QAAA,GACA,KAAA3D,IAAA,EACA,CACA4D,UAAA,CACA,YAAA1E,MAAA,CAEA2E,MAAA,CACA,KAAA1E,MAAA,IACA,KAAA8B,aAAA,CAAA4C,IAAA,EACA,CACAC,QAAA,CACA,KAAA3E,MAAA,IACA,KAAA8B,aAAA,CAAA6C,MAAA,GACA,KAAA9D,IAAA,EACA,CACA7a,OAAA,CACA,KAAA0b,gBAAA,CAAA1b,KAAA,GACA,KAAA8b,aAAA,CAAA9b,KAAA,EACA,CACA,CACA,SAAAge,GAAAY,CAAA,CAAAvjB,CAAA,EACAujB,EAAAvf,MAAA,CAAAhE,GACAA,EAAAiE,UAAA,CAAAC,OAAA,IAAAye,GAAAY,EAAAhN,GACA,CACA,SAAAuK,GAAAhC,CAAA,CAAA9e,CAAA,CAAAmN,CAAA,SACA,IAAA2R,EAAArf,MAAA,EAEA+jB,SAEA1E,CAAA,CAAA9e,CAAA,CAAAmN,CAAA,EACA,IAAA7I,EAAAtE,EAAA0L,UAAA,CACA,KAAApH,GAAA,CACA,IAAAka,EAAArR,EAAA9J,KAAA,CAAAiB,GACA,GAAAwa,EAAApN,IAAA,IAAA+R,EAAA/f,EAAA,GAAA8a,GACA,SAEAla,EAAAA,EAAAoH,UAAA,CAEA,QACA,EAZAoT,EAAA9e,EAAAmN,EACA,CAYA,SAAA4T,GAAAtc,CAAA,CAAAzE,CAAA,SACA,IAAAyE,EAAAif,IAAA,EAEAC,SAEAA,EAAAlf,CAAA,CAAAzE,CAAA,EACA,IAAY0L,WAAAA,CAAA,EAAa1L,QACzB,EAAA0L,MAGAjH,EAAAL,GAAA,CAAAsH,IAGAiY,EAAAlf,EAAAiH,GACA,EAXAjH,EAAAzE,EACA,CAmBA,IAAA4jB,GAAA,GACA,EAGA,IAAAjc,KACA,IACA,OAAAkc,KAAAlc,EACA,CACA,MAAAvG,EAAA,CACA,GAAApD,GAAAA,CAAA,IAAAA,EAAAoD,GACA,WACA,CAEA,OAAAA,CACA,CACA,EAbAyiB,EAiBA,SAAAC,GAAAzkB,CAAA,MAAiCC,EAA+B,IAAAC,EAAAF,CAAA,IAAoBG,EAAA,EAAW,KAAAA,EAAAH,EAAAI,MAAA,GAAyB,IAAAC,EAAAL,CAAA,CAAAG,EAAA,CAAmBG,EAAAN,CAAA,CAAAG,EAAA,GAA+B,GAARA,GAAA,EAAQ,CAAAE,mBAAAA,GAAAA,iBAAAA,CAAA,GAAAH,MAAAA,EAA2E,MAAoBG,CAAA,WAAAA,GAAAA,mBAAAA,GAAkDJ,EAAAC,EAAuBA,EAAAI,EAAAJ,IAAqBG,CAAAA,SAAAA,GAAAA,iBAAAA,CAAA,IAAmDH,EAAAI,EAAA,IAAAC,IAAAL,EAAAM,IAAA,CAAAP,KAAAM,IAA6DN,EAAAQ,KAAAA,EAAA,CAA+B,OAAAP,CAAA,CACtf,IAAAwkB,GAAA,GACA,SAAAC,GAAAtI,CAAA,EACA,IACA,oBAAAA,EAAA,CACA,IAAAzV,EAAAyV,EAAAuI,YAAA,GACA,GAAAhe,EAAAxG,MAAA,CACA,OAAAwG,CAAA,SAGA,YAAAyV,GAAAA,EAAAzV,IAAA,CAAAxG,MAAA,CACA,OAAAic,EAAAzV,IAAA,IAGA,MAAAkG,EAAA,CACA,CACA,OAAAuP,GAAAA,EAAA9D,MAAA,CAEA,SAAAsM,GAAAhX,CAAA,CAAAiX,CAAA,EACA,IAAAC,EAAA,IAAA3F,GACAsF,GAAAhiB,IAAA,CAAAqiB,GACAA,EAAApB,IAAA,CAAA9V,GACA,IAAAmX,EAAAhe,OAAAie,gBAAA,EACAje,OAAAke,oBAAA,CACAC,EAAAV,GAAA,CAAAzd,OAAA,iBAAAnG,GAAAA,EAAAukB,IAAA,kBAAAtkB,GAAAA,EAAAukB,UAAA,gBAAAphB,GAAAA,EAAA,sBACAkhB,GACAne,MAAA,CAAAme,EAAA,EACAH,CAAAA,EAAAhe,MAAA,CAAAme,EAAA,EAEA,IAAAG,EAAA,IAAAN,EAAAT,GAAA,IACA1W,EAAA0X,UAAA,EAAA1X,CAAA,IAAAA,EAAA0X,UAAA,CAAAtF,IAGA8E,EAAA/E,gBAAA,CAAA5X,IAAA,CAAA2c,GAAA9E,EACA,IASA,OARAqF,EAAAE,OAAA,CAAAV,EAAA,CACAzU,WAAA,GACAoV,kBAAA,GACAC,cAAA,GACAC,sBAAA,GACAC,UAAA,GACAC,QAAA,EACA,GACAP,CACA,CAoJA,SAAAQ,GAAA,CAA8BC,SAAAA,CAAA,CAAAzb,IAAAA,CAAA,CAAAwD,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAA+X,SAAAA,CAAA,CAA8E,EAwB5G,OAAA1N,GAAA,SAvBAiM,GAAA1L,GAAA0L,GAAA,IACA,IAAAhM,EAAAoM,GAAAsB,GACA,IAAA1N,GACAsD,GAAAtD,EAAAxK,EAAAC,EAAAC,EAAA,IACA,OAEA,IAAA5J,EAAAyJ,EAAA9J,KAAA,CAAAuU,GACA,GAAAA,IAAAjO,GAAAA,EAAA4b,WAAA,EACA,IAAAC,EAAA1L,GAAAnQ,EAAA4b,WAAA,EACAH,EAAA,CACA1hB,GAAAA,EACAoN,EAAA0U,EAAAzL,IAAA,CACA/I,EAAAwU,EAAApL,GAAA,EAEA,MAEAgL,EAAA,CACA1hB,GAAAA,EACAoN,EAAA8G,EAAAxE,UAAA,CACApC,EAAA4G,EAAAtE,SAAA,EAGA,GAAK+R,EAAAI,MAAA,QACL9b,EACA,CAkBA,IAAA+b,GAAA,8BACAC,GAAA,IAAAviB,QAuGA,SAAAwiB,GAAAvkB,CAAA,MAEAiJ,EAoBA,OApBAA,EADA,GAEA,uBACAub,EAAAC,UAAA,YAAAC,iBACAC,GAAA,iBACAH,EAAAC,UAAA,YAAAG,cACAD,GAAA,oBACAH,EAAAC,UAAA,YAAAI,iBACAF,GAAA,qBACAH,EAAAC,UAAA,YAAAK,iBAGA7b,EAAA8b,OAAA,CADAxlB,MADAG,IAAA,CAAA8kB,EAAAC,UAAA,CAAAjlB,QAAA,EACAoI,OAAA,CAUA5H,IAPAwkB,EAAAQ,gBAAA,EAGA/b,EAAA8b,OAAA,CADAxlB,MADAG,IAAA,CAAA8kB,EAAAQ,gBAAA,CAAAxlB,QAAA,EACAoI,OAAA,CAKA5H,IAFAiJ,CAGA,CACA,SAAAgc,GAAAnW,CAAA,CAAAhD,CAAA,CAAAoZ,CAAA,EACA,IAAA7iB,EAAA8iB,SACA,GAEArW,EAAAsW,SAAA,CACA/iB,EAAAyJ,EAAA9J,KAAA,CAAA8M,EAAAsW,SAAA,EAEAD,EAAAD,EAAAljB,KAAA,CAAA8M,GACA,CACAqW,QAAAA,EACA9iB,GAAAA,CACA,GARA,EASA,CA+IA,SAAAgjB,GAAA,CAAyCvZ,OAAAA,CAAA,CAAAgT,kBAAAA,CAAA,CAA4B,CAAAlgB,CAAA,EACrE,IAAA0mB,EAAA,KAEAA,EADA1mB,cAAAA,EAAA4b,QAAA,CACA1O,EAAA9J,KAAA,CAAApD,GAEAkN,EAAA9J,KAAA,CAAApD,EAAAA,IAAA,EACA,IAAA2mB,EAAA3mB,cAAAA,EAAA4b,QAAA,CACAiI,GAAA,CAAA7jB,EAAA,SAAAuD,GAAAA,EAAA+hB,WAAA,kBAAA9hB,GAAAA,EAAAoL,QAAA,GACAiV,GAAA,CAAA7jB,EAAA,SAAAyG,GAAAA,EAAAyW,aAAA,kBAAAvI,GAAAA,EAAA2Q,WAAA,kBAAA1Q,GAAAA,EAAAgS,UAAA,GACAC,EAAAhD,GAAA,CAAA8C,EAAA,iBAAA9R,GAAAA,EAAAvU,SAAA,GACAD,OAAAymB,wBAAA,CAAAjD,GAAA,CAAA8C,EAAA,iBAAAtM,GAAAA,EAAA/Z,SAAA,yBACAT,KAAAA,SACA,OAAA6mB,GACAA,KAAAA,GACAC,GACAE,GAGAxmB,OAAA0mB,cAAA,CAAA/mB,EAAA,sBACAgnB,aAAAH,EAAAG,YAAA,CACAzN,WAAAsN,EAAAtN,UAAA,CACA5V,MACA,OAAAkgB,GAAA,CAAAgD,EAAA,SAAAvM,GAAAA,EAAA3W,GAAA,kBAAA4W,GAAAA,EAAA3a,IAAA,QAAA4a,GAAAA,EAAA,OACA,EACAhW,IAAAyiB,CAAA,EACA,IAAAC,EAAArD,GAAA,CAAAgD,EAAA,SAAApM,GAAAA,EAAAjW,GAAA,kBAAA2iB,GAAAA,EAAAvnB,IAAA,QAAAwnB,GAAAA,EAAA,KAAAH,GAAA,EACA,GAAAP,OAAAA,GAAAA,KAAAA,EACA,IACAxG,EAAAmH,gBAAA,CAAAJ,EAAAP,EACA,CACA,MAAAnf,EAAA,CACA,CAEA,OAAA2f,CACA,CACA,GACAvD,GAAA,KACAtjB,OAAA0mB,cAAA,CAAA/mB,EAAA,sBACAgnB,aAAAH,EAAAG,YAAA,CACAzN,WAAAsN,EAAAtN,UAAA,CACA5V,IAAAkjB,EAAAljB,GAAA,CACAa,IAAAqiB,EAAAriB,GAAA,EAEA,IA3BA,KACA,CA2BA,CAyKA,SAAA8iB,GAAAC,CAAA,CAAAC,EAAA,EAAqC,MAMrCC,EALA,IAAAC,EAAAH,EAAA7d,GAAA,CAAA4b,WAAA,CACA,IAAAoC,EACA,WACA,CAGAH,CAAAA,EAAAI,SAAA,EACAF,CAAAA,EAAAxD,GAAAsD,EAAAA,EAAA7d,GAAA,GAEA,IAAAke,EAAAC,SAxrBA,CAA4BC,YAAAA,CAAA,CAAA1C,SAAAA,CAAA,CAAA1b,IAAAA,CAAA,CAAAwD,OAAAA,CAAA,CAAqC,MAUjE6a,EATA,GAAA3C,CAAA,IAAAA,EAAA4C,SAAA,CACA,WACA,EAEA,IAAAC,EAAA,iBAAA7C,EAAA4C,SAAA,CAAA5C,EAAA4C,SAAA,IACAE,EAAA,iBAAA9C,EAAA+C,iBAAA,CACA/C,EAAA+C,iBAAA,CACA,IACAC,EAAA,GAEAC,EAAApQ,GAAA0L,GAAA,IACA,IAAA2E,EAAA/P,KAAAD,GAAA,GAAAyP,EACAD,EAAAM,EAAApQ,GAAA,KACAuQ,EAAAC,UAAA,EAAAF,EACAC,IACStP,GACTmP,EAAA,GACAL,EAAA,IACA,GAAKG,GACLO,EAAA9E,GAAA1L,GAAA0L,GAAA,IACA,IAAAhM,EAAAoM,GAAAsB,GACA,CAAgBqD,QAAAA,CAAA,CAAAC,QAAAA,CAAA,EAAmBnN,GAAA6J,GACnCA,EAAA3J,cAAA,IACA2J,EACA0C,GACAA,CAAAA,EAAAnO,IAAA,EAEAwO,EAAAtmB,IAAA,EACA+O,EAAA6X,EACA3X,EAAA4X,EACAllB,GAAAyJ,EAAA9J,KAAA,CAAAuU,GACA6Q,WAAA5O,KAAAmO,CACA,GACAM,EAAA,oBAAAO,WAAAvD,aAAAuD,UACApL,GAAAqL,IAAA,CACAxD,aAAAyD,WACAtL,GAAAuL,SAAA,CACAvL,GAAAwL,SAAA,CACA,GAAKf,EAAA,CACLnP,SAAA,EACA,IACA5a,EAAA,CACAwZ,GAAA,YAAA+Q,EAAA/e,GACAgO,GAAA,YAAA+Q,EAAA/e,GACAgO,GAAA,OAAA+Q,EAAA/e,GACA,CACA,OAAAia,GAAA,KACAzlB,EAAA+F,OAAA,IAAAoY,IACA,EACA,EAsoBAkL,GACA0B,EAAAC,SAtoBA,CAAwCC,mBAAAA,CAAA,CAAAzf,IAAAA,CAAA,CAAAwD,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAA+X,SAAAA,CAAA,CAAwF,EAChI,GAAAA,CAAA,IAAAA,EAAAgE,gBAAA,CACA,WACA,EAEA,IAAAC,EAAAjE,CAAA,IAAAA,EAAAgE,gBAAA,EACAhE,KAAAvlB,IAAAulB,EAAAgE,gBAAA,CACA,GACAhE,EAAAgE,gBAAA,CACAlrB,EAAA,GACAorB,EAAA,KACAC,EAAA,GACA,IACA,IAAA5R,EAAAoM,GAAAtI,GACA,GAAAR,GAAAtD,EAAAxK,EAAAC,EAAAC,EAAA,IACA,OAEA,IAAAmc,EAAA,KACAC,EAAAC,EACA,mBAAAjO,EAAA,CACA,OAAAA,EAAA+N,WAAA,EACA,YACAA,EAAA9L,GAAAiM,KAAA,CACA,KACA,aACAH,EAAA9L,GAAAkM,KAAA,CACA,KACA,WACAJ,EAAA9L,GAAAmM,GAAA,CAGAL,IAAA9L,GAAAkM,KAAA,CACAnM,EAAA,CAAAiM,EAAA,GAAAjM,GAAAqM,SAAA,CACAL,EAAA,aAEAhM,EAAA,CAAAiM,EAAA,GAAAjM,GAAAsM,OAAA,EACAN,CAAAA,EAAA,YAGA/L,GAAAmM,GAAA,MAEArO,GAAAC,IACA+N,CAAAA,EAAA9L,GAAAkM,KAAA,CAEAJ,QAAAA,GACAF,EAAAE,EACA,GAAAxf,UAAA,WACAwf,IAAA9L,GAAAkM,KAAA,EACAH,EAAAzf,UAAA,WACAwf,IAAA9L,GAAAiM,KAAA,GACAH,CAAAA,EAAA,OAGA/L,EAAA,CAAAiM,EAAA,GAAAjM,GAAAuM,KAAA,GACAR,EAAAF,EACAA,EAAA,MAEA,IAAA/hB,EAAAiU,GAAAC,GAAAA,EAAAC,cAAA,IAAAD,EACA,IAAAlU,EACA,OAEA,IAAA9D,EAAAyJ,EAAA9J,KAAA,CAAAuU,GACA,CAAoB+Q,QAAAA,CAAA,CAAAC,QAAAA,CAAA,EAAmBphB,EACvCoc,GAAAwF,GAAA,CACArkB,KAAA2Y,EAAA,CAAAgM,EAAA,CACAhmB,GAAAA,EACAoN,EAAA6X,EACA3X,EAAA4X,EACA,GAAAa,OAAAA,GAAA,CAA8CA,YAAAA,CAAA,CAAa,EAE3D,EAsBA,OApBAnpB,OAAAwD,IAAA,CAAA4Z,IACA2D,MAAA,IAAA6I,OAAAC,KAAA,CAAAD,OAAAjH,KACA,CAAAA,EAAAmH,QAAA,eACAd,CAAA,IAAAA,CAAA,CAAArG,EAAA,EACA/e,OAAA,KACA,IAAAmmB,EAAAplB,GAAA0kB,GACAW,EAAAd,EAAAG,GACA,GAAAtjB,OAAAkkB,YAAA,CACA,OAAA7M,EAAA,CAAAiM,EAAA,EACA,KAAAjM,GAAAqM,SAAA,CACA,KAAArM,GAAAsM,OAAA,CACAK,EAAAA,EAAAlpB,OAAA,oBACA,KACA,MAAAuc,GAAA8M,UAAA,CACA,KAAA9M,GAAA+M,QAAA,CACA,MACA,CAEAtsB,EAAA4D,IAAA,CAAA4V,GAAA0S,EAAAC,EAAA3gB,GACA,GACAia,GAAA,KACAzlB,EAAA+F,OAAA,IAAAoY,IACA,EACA,EAuiBAkL,GACAkD,EAAAvF,GAAAqC,GACAmD,EAAAC,SA9gBA,CAAsCC,iBAAAA,CAAA,CAAkB,EAAI9T,IAAAA,CAAA,CAAK,EACjE,IAAA+T,EAAA,GACAC,EAAA,GAaA,OAAApT,GAAA,SAZAiM,GAAA1L,GAAA0L,GAAA,KACA,IAAA3S,EAAA0J,KACA5J,EAAA+J,KACAgQ,CAAAA,IAAA7Z,GAAA8Z,IAAAha,CAAA,IACA8Z,EAAA,CACA9Z,MAAAmZ,OAAAnZ,GACAE,OAAAiZ,OAAAjZ,EACA,GACA6Z,EAAA7Z,EACA8Z,EAAAha,EAEA,GAAK,MACLgG,EACA,EA8fAyQ,EAAA,CACAzQ,IAAA4Q,CACA,GACAqD,EAAAC,SA9fA,CAA6BC,QAAAA,CAAA,CAAAvhB,IAAAA,CAAA,CAAAwD,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAA6d,YAAAA,CAAA,CAAAC,eAAAA,CAAA,CAAAvmB,iBAAAA,CAAA,CAAAQ,YAAAA,CAAA,CAAAggB,SAAAA,CAAA,CAAAgG,qBAAAA,CAAA,CAAAhf,cAAAA,CAAA,CAAAE,gBAAAA,CAAA,CAAAD,iBAAAA,CAAA,CAAAE,mBAAAA,CAAA,CAAqO,EAClQ,SAAA8e,EAAA5P,CAAA,EACA,IAAA9D,EAAAoM,GAAAtI,GACA6P,EAAA7P,EAAA8P,SAAA,CACA1mB,EAAA8S,GAAAnS,GAAAmS,EAAA9S,OAAA,EAGA,GAFA,WAAAA,GACA8S,CAAAA,EAAAA,EAAAlL,aAAA,EACA,CAAAkL,GACA,CAAA9S,GACA4gB,EAAAA,GAAAzc,OAAA,CAAAnE,IACAoW,GAAAtD,EAAAxK,EAAAC,EAAAC,EAAA,IACA,OAEA,IAAAxH,EAAA8R,EACA,GAAA9R,EAAAoG,SAAA,CAAAoD,QAAA,CAAA6b,IACAC,GAAAtlB,EAAAgG,OAAA,CAAAsf,GACA,OAEA,IAAArmB,EAAAY,GAAAiS,GACAtS,EAAAO,GAAAC,EAAAhB,EAAAC,GACA0mB,EAAA,GACA3J,EAAAld,GAAA,CACAC,iBAAAA,EACAC,QAAAA,EACAC,KAAAA,CACA,GACAwL,EAAAnE,GAAAwL,EAAAvL,EAAAC,EAAAC,EAAAC,EAAAsV,GACA/c,CAAAA,UAAAA,GAAAA,aAAAA,CAAA,GACA0mB,CAAAA,EAAA7T,EAAAtH,OAAA,EAEAhL,EAAAJ,GAAA,CACAC,SAAAoL,EACAnL,QAAAwS,EACArY,MAAA+F,EACAD,YAAAA,CACA,GACAqmB,EAAA9T,EAAAyT,EACA,CAAgB/lB,KAAAA,EAAAmmB,UAAAA,EAAAF,cAAAA,CAAA,EAChB,CAAgBjmB,KAAAA,EAAAmmB,UAAAA,CAAA,GAChB,IAAA5kB,EAAA+Q,EAAA/Q,IAAA,CACA,UAAA9B,GAAA8B,GAAA4kB,GACA9hB,EACAgiB,gBAAA,8BAA+D9kB,EAAK,KACpE3C,OAAA,KACA,GAAA4B,IAAA8R,EAAA,CACA,IAAAtS,EAAAJ,GAAA,CACAC,SAAAoL,EACAnL,QAAAU,EACAvG,MAAAsG,GAAAC,EAAAhB,EAAAC,GACAM,YAAAA,CACA,GACAqmB,EAAA5lB,EAAAulB,EACA,CAA4B/lB,KAAAA,EAAAmmB,UAAA,CAAAA,EAAAF,cAAA,IAC5B,CAA4BjmB,KAAAA,EAAAmmB,UAAA,CAAAA,CAAA,EAC5B,CACA,EAEA,CACA,SAAAC,EAAA9T,CAAA,CAAAgU,CAAA,EACA,IAAAC,EAAAlG,GAAA/hB,GAAA,CAAAgU,GACA,IAAAiU,GACAA,EAAAvmB,IAAA,GAAAsmB,EAAAtmB,IAAA,EACAumB,EAAAJ,SAAA,GAAAG,EAAAH,SAAA,EACA9F,GAAAlhB,GAAA,CAAAmT,EAAAgU,GACA,IAAAloB,EAAAyJ,EAAA9J,KAAA,CAAAuU,GACAgM,GAAAsH,GAAA,CACA,GAAAU,CAAA,CACAloB,GAAAA,CACA,EACA,CACA,CAEA,IAAAvF,EAAA2tB,CADAzG,SAAAA,EAAA0G,KAAA,gCACA9T,GAAA,IAAAN,GAAA0S,EAAAzG,GAAA0H,GAAA3hB,IACAge,EAAAhe,EAAA4b,WAAA,CACA,IAAAoC,EACA,WACAxpB,EAAA+F,OAAA,IAAAoY,IACA,EAEA,IAAA0P,EAAArE,EAAArnB,MAAA,CAAAymB,wBAAA,CAAAY,EAAAsE,gBAAA,CAAA1rB,SAAA,UACA2rB,EAAA,CACA,CAAAvE,EAAAsE,gBAAA,CAAA1rB,SAAA,UACA,CAAAonB,EAAAsE,gBAAA,CAAA1rB,SAAA,YACA,CAAAonB,EAAAwE,iBAAA,CAAA5rB,SAAA,UACA,CAAAonB,EAAAyE,mBAAA,CAAA7rB,SAAA,UACA,CAAAonB,EAAAwE,iBAAA,CAAA5rB,SAAA,kBACA,CAAAonB,EAAA0E,iBAAA,CAAA9rB,SAAA,aACA,CAWA,OAVAyrB,GAAAA,EAAAvnB,GAAA,EACAtG,EAAA4D,IAAA,IAAAmqB,EAAAjU,GAAA,IAAAqU,CA5xCA,SAAAA,EAAA1U,CAAA,CAAAqL,CAAA,CAAAsJ,CAAA,CAAAC,CAAA,CAAAzV,EAAA1Q,MAAA,EACA,IAAA+S,EAAArC,EAAAzW,MAAA,CAAAymB,wBAAA,CAAAnP,EAAAqL,GAaA,OAZAlM,EAAAzW,MAAA,CAAA0mB,cAAA,CAAApP,EAAAqL,EAAAuJ,EACAD,EACA,CACA9nB,IAAAlF,CAAA,EACAyZ,GAAA,KACAuT,EAAA9nB,GAAA,CAAA5E,IAAA,MAAAN,EACA,EAAiB,GACjB6Z,GAAAA,EAAA3U,GAAA,EACA2U,EAAA3U,GAAA,CAAA5E,IAAA,MAAAN,EAEA,CACA,GACA,IAAA+sB,EAAA1U,EAAAqL,EAAA7J,GAAA,GAAuD,GACvD,GA6wCAoP,CAAA,IAAAA,CAAA,KACA/jB,MACAmf,GAAA0H,GAAA,CACA1T,OAAA,KACA4T,UAAA,EACA,EACA,CACA,EAAS,GAAA7D,KAET/D,GAAA,KACAzlB,EAAA+F,OAAA,IAAAoY,IACA,EACA,EAyZAkL,GACAiF,EAAAC,SAvIA,CAAwCC,mBAAAA,CAAA,CAAAvf,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAH,OAAAA,CAAA,CAAAkY,SAAAA,CAAA,CAAA1b,IAAAA,CAAA,CAAwF,EAChI,IAAA2gB,EAAA1G,GAAA,GAAA1L,GAAA0L,GAAA,IACA,IAAAhM,EAAAoM,GAAAtI,GACA,IAAA9D,GACAsD,GAAAtD,EAAAxK,EAAAC,EAAAC,EAAA,IACA,OAEA,IAAgB6F,YAAAA,CAAA,CAAAyZ,OAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,aAAAA,CAAA,EAA2ClV,EAC3D+U,EAAA,CACA5nB,KAAAA,EACArB,GAAAyJ,EAAA9J,KAAA,CAAAuU,GACAzE,YAAAA,EACAyZ,OAAAA,EACAC,MAAAA,EACAC,aAAAA,CACA,EACA,GAAKzH,EAAApjB,KAAA,QACL9D,EAAA,CACAwZ,GAAA,OAAA2S,EAAA,GAAA3gB,GACAgO,GAAA,QAAA2S,EAAA,GAAA3gB,GACAgO,GAAA,SAAA2S,EAAA,GAAA3gB,GACAgO,GAAA,eAAA2S,EAAA,GAAA3gB,GACAgO,GAAA,aAAA2S,EAAA,GAAA3gB,GACA,CACA,OAAAia,GAAA,KACAzlB,EAAA+F,OAAA,IAAAoY,IACA,EACA,EA4GAkL,GACAuF,EAAA,OACAC,EAAA,OACAC,EAAA,OACAC,EAAA,MACA1F,CAAAA,EAAAI,SAAA,GACAmF,EAAAI,SA1XA,CAAkCC,iBAAAA,CAAA,CAAAjgB,OAAAA,CAAA,CAAAgT,kBAAAA,CAAA,CAA6C,EAAIpJ,IAAAA,CAAA,CAAK,MAmCxF5V,EAkBAksB,EApDA,IAAAtW,EAAAuW,aAAA,GAAAvW,EAAAuW,aAAA,CAAA/sB,SAAA,CACA,WACA,EAEA,IAAAgtB,EAAAxW,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAgtB,UAAA,CACAxW,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAgtB,UAAA,KAAA9T,MAAA8T,EAAA,CACAzU,MAAA8K,GAAA,CAAAhM,EAAA4V,EAAAC,KACA,IAAApsB,EAAA4c,EAAA,CAAAwP,EACA,CAAoB/pB,GAAAA,CAAA,CAAA8iB,QAAAA,CAAA,EAAcF,GAAAkH,EAAArgB,EAAAgT,EAAAoG,WAAA,EAQlC,MAPA,IAAA7iB,KAAAA,GAAA8iB,GAAAA,KAAAA,CAAA,GACA4G,EAAA,CACA1pB,GAAAA,EACA8iB,QAAAA,EACA/G,KAAA,EAA6Bpe,KAAAA,EAAA4c,MAAAA,CAAA,EAAa,GAG1CrG,EAAAkB,KAAA,CAAA0U,EAAAC,EACA,EACA,GACA,IAAAC,EAAA3W,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAmtB,UAAA,CACA3W,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAmtB,UAAA,KAAAjU,MAAAiU,EAAA,CACA5U,MAAA8K,GAAA,CAAAhM,EAAA4V,EAAAC,KACA,IAAAxP,EAAA,CAAAwP,EACA,CAAoB/pB,GAAAA,CAAA,CAAA8iB,QAAAA,CAAA,EAAcF,GAAAkH,EAAArgB,EAAAgT,EAAAoG,WAAA,EAQlC,MAPA,IAAA7iB,KAAAA,GAAA8iB,GAAAA,KAAAA,CAAA,GACA4G,EAAA,CACA1pB,GAAAA,EACA8iB,QAAAA,EACA1H,QAAA,EAAgCb,MAAAA,CAAA,EAAO,GAGvCrG,EAAAkB,KAAA,CAAA0U,EAAAC,EACA,EACA,GAEA1W,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAY,OAAA,GACAA,EAAA4V,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAY,OAAA,CACA4V,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAY,OAAA,KAAAsY,MAAAtY,EAAA,CACA2X,MAAA8K,GAAA,CAAAhM,EAAA4V,EAAAC,KACA,IAAAnoB,EAAA,CAAAmoB,EACA,CAAwB/pB,GAAAA,CAAA,CAAA8iB,QAAAA,CAAA,EAAcF,GAAAkH,EAAArgB,EAAAgT,EAAAoG,WAAA,EAQtC,MAPA,IAAA7iB,KAAAA,GAAA8iB,GAAAA,KAAAA,CAAA,GACA4G,EAAA,CACA1pB,GAAAA,EACA8iB,QAAAA,EACArlB,QAAAmE,CACA,GAEAsS,EAAAkB,KAAA,CAAA0U,EAAAC,EACA,EACA,IAGA1W,EAAAuW,aAAA,CAAA/sB,SAAA,CAAA8sB,WAAA,GACAA,EAAAtW,EAAAuW,aAAA,CAAA/sB,SAAA,CAAA8sB,WAAA,CACAtW,EAAAuW,aAAA,CAAA/sB,SAAA,CAAA8sB,WAAA,KAAA5T,MAAA4T,EAAA,CACAvU,MAAA8K,GAAA,CAAAhM,EAAA4V,EAAAC,KACA,IAAAnoB,EAAA,CAAAmoB,EACA,CAAwB/pB,GAAAA,CAAA,CAAA8iB,QAAAA,CAAA,EAAcF,GAAAkH,EAAArgB,EAAAgT,EAAAoG,WAAA,EAQtC,MAPA,IAAA7iB,KAAAA,GAAA8iB,GAAAA,KAAAA,CAAA,GACA4G,EAAA,CACA1pB,GAAAA,EACA8iB,QAAAA,EACA6G,YAAA/nB,CACA,GAEAsS,EAAAkB,KAAA,CAAA0U,EAAAC,EACA,EACA,IAEA,IAAAE,EAAA,GACAC,GAAA,mBACAD,EAAA5H,eAAA,CAAAhP,EAAAgP,eAAA,EAGA6H,GAAA,iBACAD,CAAAA,EAAA1H,YAAA,CAAAlP,EAAAkP,YAAA,EAEA2H,GAAA,qBACAD,CAAAA,EAAAxH,gBAAA,CAAApP,EAAAoP,gBAAA,EAEAyH,GAAA,oBACAD,CAAAA,EAAAzH,eAAA,CAAAnP,EAAAmP,eAAA,GAGA,IAAA2H,EAAA,GA6CA,OA5CAvtB,OAAAwtB,OAAA,CAAAH,GAAAzpB,OAAA,GAAA6pB,EAAAhpB,EAAA,IACA8oB,CAAA,CAAAE,EAAA,EACAR,WAAAxoB,EAAAxE,SAAA,CAAAgtB,UAAA,CACAG,WAAA3oB,EAAAxE,SAAA,CAAAmtB,UAAA,EAEA3oB,EAAAxE,SAAA,CAAAgtB,UAAA,KAAA9T,MAAAoU,CAAA,CAAAE,EAAA,CAAAR,UAAA,EACAzU,MAAA8K,GAAA,CAAAhM,EAAA4V,EAAAC,KACA,IAAApsB,EAAA4c,EAAA,CAAAwP,EACA,CAAwB/pB,GAAAA,CAAA,CAAA8iB,QAAAA,CAAA,EAAcF,GAAAkH,EAAAnH,gBAAA,CAAAlZ,EAAAgT,EAAAoG,WAAA,EAgBtC,MAfA,IAAA7iB,KAAAA,GAAA8iB,GAAAA,KAAAA,CAAA,GACA4G,EAAA,CACA1pB,GAAAA,EACA8iB,QAAAA,EACA/G,KAAA,CACA,CACApe,KAAAA,EACA4c,MAAA,IACA2H,GAAA4H,GACAvP,GAAA,EACA,EAEA,GAGArG,EAAAkB,KAAA,CAAA0U,EAAAC,EACA,EACA,GACA1oB,EAAAxE,SAAA,CAAAmtB,UAAA,KAAAjU,MAAAoU,CAAA,CAAAE,EAAA,CAAAL,UAAA,EACA5U,MAAA8K,GAAA,CAAAhM,EAAA4V,EAAAC,KACA,IAAAxP,EAAA,CAAAwP,EACA,CAAwB/pB,GAAAA,CAAA,CAAA8iB,QAAAA,CAAA,EAAcF,GAAAkH,EAAAnH,gBAAA,CAAAlZ,EAAAgT,EAAAoG,WAAA,EAUtC,MATA,IAAA7iB,KAAAA,GAAA8iB,GAAAA,KAAAA,CAAA,GACA4G,EAAA,CACA1pB,GAAAA,EACA8iB,QAAAA,EACA1H,QAAA,CACA,CAA8Bb,MAAA,IAAA2H,GAAA4H,GAAAvP,EAAA,EAC9B,GAGArG,EAAAkB,KAAA,CAAA0U,EAAAC,EACA,EACA,EACA,GACA7J,GAAA,KACA7M,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAgtB,UAAA,CAAAA,EACAxW,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAmtB,UAAA,CAAAA,EACAvsB,GAAA4V,CAAAA,EAAAuW,aAAA,CAAA/sB,SAAA,CAAAY,OAAA,CAAAA,CAAA,EACAksB,GAAAtW,CAAAA,EAAAuW,aAAA,CAAA/sB,SAAA,CAAA8sB,WAAA,CAAAA,CAAA,EACA/sB,OAAAwtB,OAAA,CAAAH,GAAAzpB,OAAA,GAAA6pB,EAAAhpB,EAAA,IACAA,EAAAxE,SAAA,CAAAgtB,UAAA,CAAAM,CAAA,CAAAE,EAAA,CAAAR,UAAA,CACAxoB,EAAAxE,SAAA,CAAAmtB,UAAA,CAAAG,CAAA,CAAAE,EAAA,CAAAL,UAAA,EAEA,EACA,EA6OAlG,EAAA,CAAyDzQ,IAAA4Q,CAAA,GACzDqF,EAAAtG,GAAAc,EAAAA,EAAA7d,GAAA,EACAsjB,EAAAe,SAjMA,CAAwCC,mBAAAA,CAAA,CAAA9gB,OAAAA,CAAA,CAAA+gB,oBAAAA,CAAA,CAAA/N,kBAAAA,CAAA,CAAqE,EAAIpJ,IAAAA,CAAA,CAAK,EACtH,IAAAoX,EAAApX,EAAAqX,mBAAA,CAAA7tB,SAAA,CAAA4tB,WAAA,CACApX,EAAAqX,mBAAA,CAAA7tB,SAAA,CAAA4tB,WAAA,KAAA1U,MAAA0U,EAAA,CACArV,MAAA8K,GAAA,CAAAhM,EAAA4V,EAAAC,KACA,IAAA7X,EAAArW,EAAA8uB,EAAA,CAAAZ,EACA,GAAAS,EAAA9pB,GAAA,CAAAwR,GACA,OAAAuY,EAAArV,KAAA,CAAA0U,EAAA,CAAA5X,EAAArW,EAAA8uB,EAAA,EAEA,IAAoB3qB,GAAAA,CAAA,CAAA8iB,QAAAA,CAAA,EAAcF,GAAAxC,GAAA,CAAA0J,EAAA,SAAAc,GAAAA,EAAAxI,UAAA,kBAAA9J,GAAAA,EAAAqK,gBAAA,GAAAlZ,EAAAgT,EAAAoG,WAAA,EAalC,MAZA,IAAA7iB,KAAAA,GAAA8iB,GAAAA,KAAAA,CAAA,GACAyH,EAAA,CACAvqB,GAAAA,EACA8iB,QAAAA,EACA/hB,IAAA,CACAmR,SAAAA,EACArW,MAAAA,EACA8uB,SAAAA,CACA,EACApQ,MAAA2H,GAAA4H,EAAA1H,UAAA,CACA,GAEAlO,EAAAkB,KAAA,CAAA0U,EAAAC,EACA,EACA,GACA,IAAAc,EAAAxX,EAAAqX,mBAAA,CAAA7tB,SAAA,CAAAguB,cAAA,CAqBA,OApBAxX,EAAAqX,mBAAA,CAAA7tB,SAAA,CAAAguB,cAAA,KAAA9U,MAAA8U,EAAA,CACAzV,MAAA8K,GAAA,CAAAhM,EAAA4V,EAAAC,KACA,IAAA7X,EAAA,CAAA6X,EACA,GAAAS,EAAA9pB,GAAA,CAAAwR,GACA,OAAA2Y,EAAAzV,KAAA,CAAA0U,EAAA,CAAA5X,EAAA,EAEA,IAAoBlS,GAAAA,CAAA,CAAA8iB,QAAAA,CAAA,EAAcF,GAAAxC,GAAA,CAAA0J,EAAA,SAAA5Q,GAAAA,EAAAkJ,UAAA,kBAAAhJ,GAAAA,EAAAuJ,gBAAA,GAAAlZ,EAAAgT,EAAAoG,WAAA,EAWlC,MAVA,IAAA7iB,KAAAA,GAAA8iB,GAAAA,KAAAA,CAAA,GACAyH,EAAA,CACAvqB,GAAAA,EACA8iB,QAAAA,EACAgI,OAAA,CACA5Y,SAAAA,CACA,EACAqI,MAAA2H,GAAA4H,EAAA1H,UAAA,CACA,GAEAlO,EAAAkB,KAAA,CAAA0U,EAAAC,EACA,EACA,GACA7J,GAAA,KACA7M,EAAAqX,mBAAA,CAAA7tB,SAAA,CAAA4tB,WAAA,CAAAA,EACApX,EAAAqX,mBAAA,CAAA7tB,SAAA,CAAAguB,cAAA,CAAAA,CACA,EACA,EAgJA/G,EAAA,CACAzQ,IAAA4Q,CACA,GACAH,EAAAiH,YAAA,EACAvB,CAAAA,EAAAwB,SAvHA,CAA4BC,OAAAA,CAAA,CAAAhlB,IAAAA,CAAA,CAAa,EACzC,IAAAoN,EAAApN,EAAA4b,WAAA,CACA,IAAAxO,EACA,WACA,EAEA,IAAA5Y,EAAA,GACAywB,EAAA,IAAAxrB,QACAyrB,EAAA9X,EAAA+X,QAAA,CACA/X,EAAA+X,QAAA,UAAAC,CAAA,CAAA7V,CAAA,CAAA8V,CAAA,EACA,IAAAC,EAAA,IAAAJ,EAAAE,EAAA7V,EAAA8V,GASA,OARAJ,EAAAnqB,GAAA,CAAAwqB,EAAA,CACAF,OAAAA,EACAtd,OAAA,iBAAAyH,EACA8V,YAAAA,EACAE,WAAA,iBAAAhW,EACAA,EACAvX,KAAAC,SAAA,CAAAd,MAAAC,IAAA,KAAAouB,WAAAjW,IACA,GACA+V,CACA,EACA,IAAAG,EAAAnW,GAAAtP,EAAA0lB,KAAA,gBAAAjW,CAAA,EACA,gBAAA6V,CAAA,EAQA,OAPAjW,GAAA4K,GAAA,KACA,IAAA4E,EAAAoG,EAAAhrB,GAAA,CAAAqrB,GACAzG,IACAmG,EAAAnG,GACAoG,EAAA5qB,MAAA,CAAAirB,GAEA,GAAa,GACb7V,EAAAN,KAAA,OAAAmW,EAAA,CACA,CACA,GAKA,OAJA9wB,EAAA4D,IAAA,MACAgV,EAAA+X,QAAA,CAAAD,CACA,GACA1wB,EAAA4D,IAAA,CAAAqtB,GACAxL,GAAA,KACAzlB,EAAA+F,OAAA,IAAAoY,IACA,EACA,EA+EAkL,EAAA,GAGA,IAAA8H,EAAAC,SAjFAC,CAAA,EACA,IAAY7lB,IAAAA,CAAA,CAAAwD,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAmiB,YAAAA,CAAA,EAAwED,EACpFE,EAAA,GACAC,EAAA/L,GAAA,KACA,IAAAgM,EAAAjmB,EAAAkmB,YAAA,GACA,IAAAD,GAAAF,GAAA5L,GAAA,CAAA8L,EAAA,iBAAA7S,GAAAA,EAAA+S,WAAA,GACA,OACAJ,EAAAE,EAAAE,WAAA,KACA,IAAAC,EAAA,GACAC,EAAAJ,EAAAK,UAAA,IACA,QAAAzwB,EAAA,EAAwBA,EAAAwwB,EAAWxwB,IAAA,CAEnC,IAAoB0wB,eAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,UAAAA,CAAA,EADpBT,EAAAU,UAAA,CAAA9wB,GAEA0b,GAAAgV,EAAA9iB,EAAAC,EAAAC,EAAA,KACA4N,GAAAkV,EAAAhjB,EAAAC,EAAAC,EAAA,KAGAyiB,EAAAhuB,IAAA,EACAwuB,MAAApjB,EAAA9J,KAAA,CAAA6sB,GACAC,YAAAA,EACAK,IAAArjB,EAAA9J,KAAA,CAAA+sB,GACAC,UAAAA,CACA,EACA,CACAZ,EAAA,CAAsBM,OAAAA,CAAA,EACtB,GAEA,OADAJ,IACAhY,GAAA,kBAAAgY,EACA,EAqDAnI,GACAiJ,EAAAC,SArDA,CAAqC/mB,IAAAA,CAAA,CAAAgnB,gBAAAA,CAAA,CAAuB,EAC5D,IAAA5Z,EAAApN,EAAA4b,WAAA,QACA,GAAAxO,EAAAjD,cAAA,CAEAmF,GAAAlC,EAAAjD,cAAA,mBAAAsF,CAAA,EACA,gBAAAvS,CAAA,CAAA7D,CAAA,CAAAkK,CAAA,EACA,IACAyjB,EAAA,CACAC,OAAA,CACA/pB,KAAAA,CACA,CACA,EACA,CACA,MAAAW,EAAA,CACA,CACA,OAAA4R,EAAAN,KAAA,OAAAjS,EAAA7D,EAAAkK,EAAA,CACA,CACA,GAdA,MAgBA,EAkCAsa,GACAqJ,EAAA,GACA,QAAAC,KAAAtJ,EAAAuJ,OAAA,CACAF,EAAA9uB,IAAA,CAAA+uB,EAAAnM,QAAA,CAAAmM,EAAAE,QAAA,CAAArJ,EAAAmJ,EAAA5jB,OAAA,GAEA,OAAA0W,GAAA,KACAG,GAAA7f,OAAA,IAAA+sB,EAAAtsB,KAAA,IACAmf,GAAA,CAAA4D,EAAA,iBAAAwJ,GAAAA,EAAAC,UAAA,QAAAC,GAAAA,IAAA,EACAvJ,IACAqB,IACAwB,IACAC,IACAK,IACAyB,IACAM,IACAC,IACAC,IACAC,IACAoC,IACAmB,IACAI,EAAA3sB,OAAA,IAAAoY,IACA,EACA,CACA,SAAA0J,GAAArM,CAAA,EACA,gBAAAtT,MAAA,CAAAsT,EAAA,CAEA,SAAAiU,GAAAjU,CAAA,EACA,MAAA3U,CAAAA,CAAA,UAAAqB,MAAA,CAAAsT,EAAA,EACAtT,MAAA,CAAAsT,EAAA,CAAApZ,SAAA,EACA,eAAA8F,MAAA,CAAAsT,EAAA,CAAApZ,SAAA,EACA,eAAA8F,MAAA,CAAAsT,EAAA,CAAApZ,SAAA,CACA,CAEA,MAAA8wB,GACAruB,YAAAsuB,CAAA,EACA,KAAAA,YAAA,CAAAA,EACA,KAAAC,qBAAA,KAAAnuB,QACA,KAAAouB,qBAAA,KAAApuB,OACA,CACAC,MAAAyE,CAAA,CAAA2pB,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAAF,GAAA,KAAAG,kBAAA,CAAA/pB,GACAgqB,EAAAH,GAAA,KAAAI,kBAAA,CAAAjqB,GACApE,EAAAkuB,EAAAhuB,GAAA,CAAA6tB,GAMA,OALA/tB,IACAA,EAAA,KAAA4tB,YAAA,GACAM,EAAAntB,GAAA,CAAAgtB,EAAA/tB,GACAouB,EAAArtB,GAAA,CAAAf,EAAA+tB,IAEA/tB,CACA,CACAG,OAAAiE,CAAA,CAAA2pB,CAAA,EACA,IAAAG,EAAA,KAAAC,kBAAA,CAAA/pB,GACAgqB,EAAA,KAAAC,kBAAA,CAAAjqB,GACA,OAAA2pB,EAAAxZ,GAAA,SAAA5U,KAAA,CAAAyE,EAAApE,EAAAkuB,EAAAE,GACA,CACAE,YAAAlqB,CAAA,CAAApE,CAAA,CAAAuU,CAAA,EACA,IAAA6Z,EAAA7Z,GAAA,KAAA8Z,kBAAA,CAAAjqB,SACA,iBAAApE,EACAA,EAEA,EADAE,GAAA,CAAAF,IAEA,EAEA,CACAuuB,aAAAnqB,CAAA,CAAAoqB,CAAA,EACA,IAAAJ,EAAA,KAAAC,kBAAA,CAAAjqB,GACA,OAAAoqB,EAAAja,GAAA,SAAA+Z,WAAA,CAAAlqB,EAAApE,EAAAouB,GACA,CACAntB,MAAAmD,CAAA,EACA,IAAAA,EAAA,CACA,KAAAypB,qBAAA,KAAAnuB,QACA,KAAAouB,qBAAA,KAAApuB,QACA,MACA,CACA,KAAAmuB,qBAAA,CAAAvtB,MAAA,CAAA8D,GACA,KAAA0pB,qBAAA,CAAAxtB,MAAA,CAAA8D,EACA,CACA+pB,mBAAA/pB,CAAA,EACA,IAAA8pB,EAAA,KAAAL,qBAAA,CAAA3tB,GAAA,CAAAkE,GAKA,OAJA8pB,IACAA,EAAA,IAAA1uB,IACA,KAAAquB,qBAAA,CAAA9sB,GAAA,CAAAqD,EAAA8pB,IAEAA,CACA,CACAG,mBAAAjqB,CAAA,EACA,IAAAgqB,EAAA,KAAAN,qBAAA,CAAA5tB,GAAA,CAAAkE,GAKA,OAJAgqB,IACAA,EAAA,IAAA5uB,IACA,KAAAsuB,qBAAA,CAAA/sB,GAAA,CAAAqD,EAAAgqB,IAEAA,CACA,CACA,CAEA,SAAAK,GAAA9yB,CAAA,MAAiCC,EAA+B,IAAAC,EAAAF,CAAA,IAAoBG,EAAA,EAAW,KAAAA,EAAAH,EAAAI,MAAA,GAAyB,IAAAC,EAAAL,CAAA,CAAAG,EAAA,CAAmBG,EAAAN,CAAA,CAAAG,EAAA,GAA+B,GAARA,GAAA,EAAQ,CAAAE,mBAAAA,GAAAA,iBAAAA,CAAA,GAAAH,MAAAA,EAA2E,MAAoBG,CAAA,WAAAA,GAAAA,mBAAAA,GAAkDJ,EAAAC,EAAuBA,EAAAI,EAAAJ,IAAqBG,CAAAA,SAAAA,GAAAA,iBAAAA,CAAA,IAAmDH,EAAAI,EAAA,IAAAC,IAAAL,EAAAM,IAAA,CAAAP,KAAAM,IAA6DN,EAAAQ,KAAAA,EAAA,CAA+B,OAAAP,CAAA,CACtf,MAAA6yB,GACApvB,aAAA,CACA,KAAAqvB,uBAAA,KAAAhB,GAAAnpB,IACA,KAAAoqB,0BAAA,KAAAlvB,OACA,CACA8c,WAAA,CACA,CACAqS,iBAAA,CACA,CACA/R,cAAA,CACA,CACA,CACA,MAAAgS,GACAxvB,YAAAkK,CAAA,EACA,KAAAulB,OAAA,KAAArvB,QACA,KAAAsvB,oBAAA,KAAAtvB,QACA,KAAAivB,uBAAA,KAAAhB,GAAAnpB,IACA,KAAAoqB,0BAAA,KAAAlvB,QACA,KAAAse,UAAA,CAAAxU,EAAAwU,UAAA,CACA,KAAAzjB,WAAA,CAAAiP,EAAAjP,WAAA,CACA,KAAAkiB,iBAAA,CAAAjT,EAAAiT,iBAAA,CACA,KAAAwS,wBAAA,CAAAzlB,EAAAylB,wBAAA,CACA,KAAAC,4BAAA,KAAAvB,GAAA,KAAAlR,iBAAA,CAAAoG,WAAA,CAAA9J,UAAA,CAAAhV,IAAA,MAAA0Y,iBAAA,CAAAoG,WAAA,GACA,KAAApZ,MAAA,CAAAD,EAAAC,MAAA,CACA,KAAAwlB,wBAAA,EACAtsB,OAAAuM,gBAAA,gBAAAigB,aAAA,CAAAprB,IAAA,OAEA,CACAyY,UAAAtJ,CAAA,EACA,KAAA6b,OAAA,CAAAhuB,GAAA,CAAAmS,EAAA,IACAA,EAAAtP,aAAA,EACA,KAAAorB,oBAAA,CAAAjuB,GAAA,CAAAmS,EAAAtP,aAAA,CAAAsP,EACA,CACA2b,gBAAA1O,CAAA,EACA,KAAAiP,YAAA,CAAAjP,CACA,CACArD,aAAA5J,CAAA,CAAA2J,CAAA,EACA,KAAAmB,UAAA,EACAjC,KAAA,CACA,CACAjB,SAAA,KAAArR,MAAA,CAAA9J,KAAA,CAAAuT,GACAkJ,OAAA,KACAxb,KAAAic,CACA,EACA,CACAzB,QAAA,GACAF,MAAA,GACAlP,WAAA,GACAqjB,eAAA,EACA,GACAZ,GAAA,eAAAjyB,GAAAA,EAAA4yB,YAAA,gBAAA3yB,GAAAA,EAAAyW,GAAA,EACA,IAAAO,EAAAyG,GAAAhH,GACAO,GACAA,EAAA6b,kBAAA,EACA7b,EAAA6b,kBAAA,CAAAvzB,MAAA,IACA,KAAA0gB,iBAAA,CAAAmH,gBAAA,CAAAnQ,EAAA6b,kBAAA,MAAA7lB,MAAA,CAAA9J,KAAA,CAAA8T,GACA,CACA0b,cAAAI,CAAA,EAEA,aAAAC,EAAA1hB,IAAA,CAAAzM,IAAA,EACAmuB,EAAA1qB,MAAA,GAAA0qB,EAAA1hB,IAAA,CAAAhJ,MAAA,EAGA,CADAyqB,EAAA/Z,MAAA,CADA,OAIA,IAAAtC,EAAA,KAAA8b,oBAAA,CAAA9uB,GAAA,CAAAqvB,EAAA/Z,MAAA,EACA,IAAAtC,EACA,OACA,IAAAuc,EAAA,KAAAC,yBAAA,CAAAxc,EAAAsc,EAAA1hB,IAAA,CAAAkK,KAAA,EACAyX,GACA,KAAAl1B,WAAA,CAAAk1B,EAAAD,EAAA1hB,IAAA,CAAA6hB,UAAA,CACA,CACAD,0BAAAxc,CAAA,CAAApP,CAAA,EACA,OAAAA,EAAAzC,IAAA,EACA,KAAAyY,GAAA8V,YAAA,EACA,KAAAjB,uBAAA,CAAA1tB,KAAA,CAAAiS,GACA,KAAAgc,4BAAA,CAAAjuB,KAAA,CAAAiS,GACA,KAAA2c,eAAA,CAAA/rB,EAAAgK,IAAA,CAAAlN,IAAA,CAAAsS,GACA,IAAApI,EAAAhH,EAAAgK,IAAA,CAAAlN,IAAA,CAAAZ,EAAA,CAGA,OAFA,KAAA4uB,0BAAA,CAAA7tB,GAAA,CAAAmS,EAAApI,GACA,KAAAglB,iBAAA,CAAAhsB,EAAAgK,IAAA,CAAAlN,IAAA,CAAAkK,GACA,CACAilB,UAAAjsB,EAAAisB,SAAA,CACA1uB,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAAkW,QAAA,CACAlU,KAAA,CACA,CACAjB,SAAA,KAAArR,MAAA,CAAA9J,KAAA,CAAAuT,GACAkJ,OAAA,KACAxb,KAAAkD,EAAAgK,IAAA,CAAAlN,IAAA,EAEA,CACAwa,QAAA,GACAF,MAAA,GACAlP,WAAA,GACAqjB,eAAA,EACA,CACA,CACA,CACA,KAAAvV,GAAAoW,IAAA,CACA,KAAApW,GAAAqW,IAAA,CACA,KAAArW,GAAAsW,gBAAA,CACA,KAEA,MAAAtW,GAAAuW,MAAA,CACA,OAAAvsB,CAEA,MAAAgW,GAAAwW,MAAA,CAEA,OADA,KAAAC,UAAA,CAAAzsB,EAAAgK,IAAA,CAAA4P,OAAA,CAAAxK,EAAA,yCACApP,CAEA,MAAAgW,GAAAkW,mBAAA,CACA,OAAAlsB,EAAAgK,IAAA,CAAA0H,MAAA,EACA,KAAAuE,GAAAkW,QAAA,CAoBA,OAnBAnsB,EAAAgK,IAAA,CAAAiO,IAAA,CAAAvb,OAAA,KACA,KAAA+vB,UAAA,CAAAj0B,EAAA4W,EAAA,CACA,WACA,SACA,aACA,EACA,KAAA2c,eAAA,CAAAvzB,EAAAsE,IAAA,CAAAsS,GACA,IAAApI,EAAA,KAAA8jB,0BAAA,CAAA1uB,GAAA,CAAAgT,EACApI,CAAAA,GAAA,KAAAglB,iBAAA,CAAAxzB,EAAAsE,IAAA,CAAAkK,EACA,GACAhH,EAAAgK,IAAA,CAAAsN,OAAA,CAAA5a,OAAA,KACA,KAAA+vB,UAAA,CAAAj0B,EAAA4W,EAAA,kBACA,GACApP,EAAAgK,IAAA,CAAA9B,UAAA,CAAAxL,OAAA,KACA,KAAA+vB,UAAA,CAAAj0B,EAAA4W,EAAA,OACA,GACApP,EAAAgK,IAAA,CAAAoN,KAAA,CAAA1a,OAAA,KACA,KAAA+vB,UAAA,CAAAj0B,EAAA4W,EAAA,OACA,GACApP,CAEA,MAAAiW,GAAAqL,IAAA,CACA,KAAArL,GAAAwL,SAAA,CACA,KAAAxL,GAAAuL,SAAA,CAIA,OAHAxhB,EAAAgK,IAAA,CAAA6W,SAAA,CAAAnkB,OAAA,KACA,KAAA+vB,UAAA,CAAAzL,EAAA5R,EAAA,OACA,GACApP,CAEA,MAAAiW,GAAAyW,cAAA,CACA,QAEA,MAAAzW,GAAA0W,gBAAA,CACA,KAAA1W,GAAA2W,gBAAA,CACA,KAAA3W,GAAA4W,MAAA,CACA,KAAA5W,GAAA6W,cAAA,CACA,KAAA7W,GAAA8W,KAAA,CAEA,OADA,KAAAN,UAAA,CAAAzsB,EAAAgK,IAAA,CAAAoF,EAAA,QACApP,CAEA,MAAAiW,GAAA+W,cAAA,CACA,KAAA/W,GAAAgX,gBAAA,CAGA,OAFA,KAAAR,UAAA,CAAAzsB,EAAAgK,IAAA,CAAAoF,EAAA,QACA,KAAA8d,eAAA,CAAAltB,EAAAgK,IAAA,CAAAoF,EAAA,aACApP,CAEA,MAAAiW,GAAAkX,IAAA,CACA,OAAAntB,CAEA,MAAAiW,GAAAmX,SAAA,CAIA,OAHAptB,EAAAgK,IAAA,CAAAue,MAAA,CAAA7rB,OAAA,KACA,KAAA+vB,UAAA,CAAAY,EAAAje,EAAA,gBACA,GACApP,CAEA,MAAAiW,GAAAqX,iBAAA,CAMA,OALA,KAAAb,UAAA,CAAAzsB,EAAAgK,IAAA,CAAAoF,EAAA,QACA,KAAA8d,eAAA,CAAAltB,EAAAgK,IAAA,CAAAoF,EAAA,cACAub,GAAA,CAAA3qB,EAAA,SAAAlE,GAAAA,EAAAkO,IAAA,UAAAhO,GAAAA,EAAAhB,MAAA,kBAAAiB,GAAAA,EAAAS,OAAA,QAAAwC,GAAAA,EAAA,IACA,KAAAguB,eAAA,CAAApyB,EAAAsU,EAAA,YACA,GAAyB,EACzBpP,CAEA,CAEA,CACA,QACA,CACArG,QAAA4zB,CAAA,CAAAC,CAAA,CAAApe,CAAA,CAAA9S,CAAA,EACA,QAAAmf,KAAAnf,EACA,OAAAmxB,OAAA,CAAAD,CAAA,CAAA/R,EAAA,oBAAA+R,CAAA,CAAA/R,EAAA,IAEAniB,MAAAm0B,OAAA,CAAAD,CAAA,CAAA/R,EAAA,EACA+R,CAAA,CAAA/R,EAAA,CAAA8R,EAAAlxB,MAAA,CAAA+S,EAAAoe,CAAA,CAAA/R,EAAA,EAGA+R,CAAA,CAAA/R,EAAA,CAAA8R,EAAA1xB,KAAA,CAAAuT,EAAAoe,CAAA,CAAA/R,EAAA,GAGA,OAAA+R,CACA,CACAf,WAAAe,CAAA,CAAApe,CAAA,CAAA9S,CAAA,EACA,YAAA3C,OAAA,MAAAkxB,uBAAA,CAAA2C,EAAApe,EAAA9S,EACA,CACA4wB,gBAAAM,CAAA,CAAApe,CAAA,CAAA9S,CAAA,EACA,YAAA3C,OAAA,MAAAyxB,4BAAA,CAAAoC,EAAApe,EAAA9S,EACA,CACAyvB,gBAAAjvB,CAAA,CAAAsS,CAAA,EACA,KAAAqd,UAAA,CAAA3vB,EAAAsS,EAAA,iBACA,eAAAtS,GACAA,EAAAL,UAAA,CAAAC,OAAA,KACA,KAAAqvB,eAAA,CAAA2B,EAAAte,EACA,EAEA,CACA4c,kBAAAlvB,CAAA,CAAAkK,CAAA,EACAlK,EAAAS,IAAA,GAAAtG,EAAAoQ,QAAA,EAAAvK,EAAAkK,MAAA,EACAlK,CAAAA,EAAAkK,MAAA,CAAAA,CAAA,EACA,eAAAlK,GACAA,EAAAL,UAAA,CAAAC,OAAA,KACA,KAAAsvB,iBAAA,CAAA0B,EAAA1mB,EACA,EAEA,CACA,CAEA,MAAA2mB,GACAnS,MAAA,CACA,CACA1C,eAAA,CACA,CACAK,qBAAA,CACA,CACAhc,OAAA,CACA,CACA,CACA,MAAAywB,GACApyB,YAAAkK,CAAA,EACA,KAAAmoB,UAAA,KAAAC,QACA,KAAAC,eAAA,IACA,KAAA7T,UAAA,CAAAxU,EAAAwU,UAAA,CACA,KAAA0D,QAAA,CAAAlY,EAAAkY,QAAA,CACA,KAAA9O,aAAA,CAAApJ,EAAAoJ,aAAA,CACA,KAAAnJ,MAAA,CAAAD,EAAAC,MAAA,CACA,KAAA6V,IAAA,EACA,CACAA,MAAA,CACA,KAAAre,KAAA,GACA,KAAA6wB,iBAAA,CAAAzhB,QAAAhN,SACA,CACAuZ,cAAAlgB,CAAA,CAAAuJ,CAAA,EACA,IAAAtJ,GAAAD,IAEA,KAAAi1B,UAAA,CAAAjxB,GAAA,CAAAhE,GADA,OAGA,KAAAi1B,UAAA,CAAA9wB,GAAA,CAAAnE,GACA,KAAAkW,aAAA,CAAAmK,aAAA,CAAAH,aAAA,CAAAlgB,GACA,IAAAukB,EAAAT,GAAA,CACA,QAAA5N,aAAA,CACA3M,IAAAA,EACA+X,WAAA,KAAAA,UAAA,CACAvU,OAAA,KAAAA,MAAA,CACAkT,iBAAA,MACSjgB,GACT,KAAAm1B,eAAA,CAAAxzB,IAAA,KAAA4iB,EAAAwM,UAAA,IACA,KAAAoE,eAAA,CAAAxzB,IAAA,CAAAojB,GAAA,CACA,QAAA7O,aAAA,CACA8O,SAAA,KAAAA,QAAA,CACAzb,IAAAvJ,EACA+M,OAAA,KAAAA,MAAA,IAEA6L,GAAA,KACA5Y,EAAA4yB,kBAAA,EACA5yB,EAAA4yB,kBAAA,CAAAvzB,MAAA,IACA,KAAA6W,aAAA,CAAA6J,iBAAA,CAAAmH,gBAAA,CAAAlnB,EAAA4yB,kBAAA,MAAA7lB,MAAA,CAAA9J,KAAA,CAAAjD,EAAAH,IAAA,GACA,KAAAs1B,eAAA,CAAAxzB,IAAA,CAAA2kB,GAAA,CACAvZ,OAAA,KAAAA,MAAA,CACAgT,kBAAA,KAAA7J,aAAA,CAAA6J,iBAAA,EACa/f,GACb,EAAS,EACT,CACAugB,oBAAA8U,CAAA,EACA,IAAAte,EAAAyG,GAAA6X,GACAC,EAAAC,SAluDA7tB,CAAA,EACA,IACA,OAAAA,EAAAR,aAAA,CAEA,MAAAE,EAAA,CACA,CACA,EA4tDAiuB,GACAte,GAAAue,GAEA,KAAAF,iBAAA,CAAAE,EAAA3hB,OAAA,CAAAoD,EACA,CACAqe,kBAAApwB,CAAA,CAAAuE,CAAA,EACA,IAAAisB,EAAA,KACA,KAAAL,eAAA,CAAAxzB,IAAA,CAAAkX,GAAA7T,EAAA7E,SAAA,yBAAA6Y,CAAA,EACA,gBAAAyc,CAAA,EACA,IAAAz1B,EAAAgZ,EAAAvZ,IAAA,MAAAg2B,GAGA,OAFA,KAAAz1B,UAAA,EAAA8c,GAAA,OACA0Y,EAAAtV,aAAA,MAAAlgB,UAAA,CAAAuJ,GACAvJ,CACA,CACA,GACA,CACAuE,OAAA,CACA,KAAA4wB,eAAA,CAAArxB,OAAA,KACA,IACAomB,GACA,CACA,MAAA9iB,EAAA,CACA,CACA,GACA,KAAA+tB,eAAA,IACA,KAAAF,UAAA,KAAAC,QACA,KAAAhf,aAAA,CAAAmK,aAAA,CAAAqV,gBAAA,EACA,CACA,CAEA,MAAAC,GACApxB,OAAA,CACA,CACAue,QAAA,CACA,CACAC,UAAA,CACA,CACAE,MAAA,CACA,CACAC,QAAA,CACA,CACA0S,UAAA,CACA,CACAtV,WAAA,CACA,CACAJ,eAAA,CACA,CACAwV,kBAAA,CACA,CACA,CAEA,MAAAG,GACAjzB,YAAAkK,CAAA,EACA,KAAAgpB,mBAAA,KAAAZ,QACA,KAAA/O,WAAA,KAAArK,GACA,KAAAwF,UAAA,CAAAxU,EAAAwU,UAAA,CACA,KAAAyU,mBAAA,CAAAjpB,EAAAipB,mBAAA,CAEAvV,kBAAAwV,CAAA,CAAA7V,CAAA,EACA,aAAAA,EAAA7Q,UAAA,EACA,KAAAgS,UAAA,EACAjC,KAAA,GACAX,QAAA,GACAF,MAAA,GACAlP,WAAA,CACA,CACAhM,GAAA6c,EAAA7c,EAAA,CACAgM,WAAA6Q,EACA7Q,UAAA,EAEA,GAEA,KAAA0Q,gBAAA,CAAAgW,EACA,CACAhW,iBAAAgW,CAAA,EACA,KAAAF,mBAAA,CAAA9xB,GAAA,CAAAgyB,KAEA,KAAAF,mBAAA,CAAA3xB,GAAA,CAAA6xB,GACA,KAAAC,4BAAA,CAAAD,GACA,CACA9O,iBAAAJ,CAAA,CAAAP,CAAA,EACA,GAAAO,IAAAA,EAAAznB,MAAA,CACA,OACA,IAAA62B,EAAA,CACA5yB,GAAAijB,EACA4P,SAAA,IAEA/zB,EAAA,GACA,QAAA2N,KAAA+W,EAAA,CACA,IAAAV,EACA,KAAAD,WAAA,CAAAniB,GAAA,CAAA+L,GAWAqW,EAAA,KAAAD,WAAA,CAAAljB,KAAA,CAAA8M,IAVAqW,EAAA,KAAAD,WAAA,CAAAhiB,GAAA,CAAA4L,GACA3N,EAAAT,IAAA,EACAykB,QAAAA,EACA5lB,MAAAE,MAAAC,IAAA,CAAAoP,EAAAvP,KAAA,EAAA41B,QAAA,CAAA/S,EAAAxF,IAAA,EACA5c,KAAAL,GAAAyiB,GACAxF,MAAAA,CACA,GACA,IAIAqY,EAAAC,QAAA,CAAAx0B,IAAA,CAAAykB,EACA,CACAhkB,EAAA/C,MAAA,IACA62B,CAAAA,EAAA9zB,MAAA,CAAAA,CAAA,EACA,KAAA2zB,mBAAA,CAAAG,EACA,CACA3xB,OAAA,CACA,KAAA4hB,WAAA,CAAA5hB,KAAA,GACA,KAAAuxB,mBAAA,KAAAZ,OACA,CACAe,6BAAAD,CAAA,EACA,CACA,CAEA,MAAAK,GACAzzB,aAAA,CACA,KAAA0zB,OAAA,KAAAtzB,QACA,KAAAuzB,MAAA,GACA,CACA7T,cAAAxe,CAAA,CAAAsyB,CAAA,EACA,IAAAC,EAAA,KAAAH,OAAA,CAAA9yB,GAAA,CAAAU,GACA,OAAAuyB,GAAA/1B,MAAAC,IAAA,CAAA81B,GAAAnlB,IAAA,IAAAD,IAAAmlB,EACA,CACAryB,IAAAD,CAAA,CAAAmN,CAAA,EACA,KAAAklB,MAAA,GACA,KAAAA,MAAA,IACAG,SA/7DA,GAAAnvB,CAAA,EACAkR,GAAA,4BAAAlR,EACA,EA67DA,KACA,KAAA+uB,OAAA,KAAAtzB,QACA,KAAAuzB,MAAA,GACA,IAEA,KAAAD,OAAA,CAAAjyB,GAAA,CAAAH,EAAA,MAAAoyB,OAAA,CAAA9yB,GAAA,CAAAU,IAAA,IAAA4a,GAAA,EAAA3a,GAAA,CAAAkN,GACA,CACAslB,SAAA,CACA,CACA,CAIA,IACA,GAAAj2B,IAAAA,MAAAC,IAAA,QAAA+P,EAAAA,EAAA,KACA,IAAAkmB,EAAAjwB,SAAAE,aAAA,WACAF,SAAAoT,IAAA,CAAA9S,WAAA,CAAA2vB,GACAl2B,MAAAC,IAAA,CAAqB,GAAAk2B,EAAAnmB,CAAA,EAAc,CAAAkmB,EAAA,SAAA92B,GAAAA,EAAAoH,aAAA,kBAAAnH,GAAAA,EAAAW,KAAA,UAAAwC,GAAAA,EAAAvC,IAAA,IAAAD,MAAAC,IAAA,CACnCgG,SAAAoT,IAAA,CAAA5S,WAAA,CAAAyvB,EACA,CACA,CACA,MAAAzwB,EAAA,CACAsM,QAAAqkB,KAAA,iCAAA3wB,EACA,CACA,IAAA4G,GAt5GA,IAAApK,GAu5GA,SAAAo0B,GAAAjqB,EAAA,EAA4B,MAsE5BkqB,EArEA,IAAY5X,KAAAA,CAAA,CAAA6X,iBAAAA,CAAA,CAAAC,iBAAAA,CAAA,CAAAlqB,WAAAA,EAAA,WAAAC,cAAAA,EAAA,KAAAC,gBAAAA,EAAA,KAAA6d,YAAAA,EAAA,YAAAC,eAAAA,EAAA,KAAA3e,YAAAA,EAAA,GAAAJ,cAAAA,EAAA,UAAAE,gBAAAA,EAAA,KAAAD,iBAAAA,EAAA,KAAAE,mBAAAA,EAAA,KAAAgB,iBAAAA,EAAA,GAAA+pB,cAAAA,CAAA,CAAA1yB,iBAAA2yB,CAAA,CAAA9pB,eAAA+pB,CAAA,CAAArtB,gBAAAA,CAAA,CAAA/E,YAAAA,CAAA,CAAAoI,WAAAA,CAAA,CAAAiqB,cAAAA,EAAA,KAAAC,OAAAA,CAAA,CAAAtS,SAAAA,EAAA,EAAke,CAAA1X,eAAAA,EAAA,EAAqB,CAAAiqB,cAAAA,CAAA,CAAAhQ,UAAAA,EAAA,GAAA/Z,aAAAA,EAAA,GAAA8kB,yBAAAA,EAAA,GAAAkF,YAAAA,EAAA3qB,qBAAAA,EAAA2qB,WAAA,CACngB3qB,EAAA2qB,WAAA,CACA,OAAAxM,qBAAAA,EAAA,GAAAoD,aAAAA,EAAA,GAAA7gB,aAAAA,EAAA,GAAAmjB,QAAAA,CAAA,CAAA5iB,gBAAAA,EAAA,OAAA+f,oBAAAA,EAAA,IAAAhP,IAAA,IAAAlhB,aAAAA,CAAA,CAAA4mB,WAAAA,CAAA,CAAAkT,iBAAAA,CAAA,EAAqN5qB,EAtyCrNlP,EAuyCAA,EACA,IAAA+5B,EAAApF,CAAAA,GACAtsB,OAAA2xB,MAAA,GAAA3xB,OAEA4xB,EAAA,GACA,IAAAF,EACA,IACA1xB,OAAA2xB,MAAA,CAAAjxB,QAAA,EACAkxB,CAAAA,EAAA,GAEA,CACA,MAAAzwB,EAAA,CACAywB,EAAA,EACA,CAEA,GAAAF,GAAA,CAAAvY,EACA,yCAEA,IAAAuY,GAAA,CAAAE,EACA,WACA,CAEAn4B,MAAAA,IAAA83B,GAAAvS,KAAAvlB,IAAAulB,EAAA4C,SAAA,EACA5C,CAAAA,EAAA4C,SAAA,CAAA2P,CAAA,EAEAzqB,GAAAxI,KAAA,GACA,IAAAE,EAAA0yB,CAAA,IAAAA,EACA,CACAW,MAAA,GACAC,KAAA,GACA,oBACAC,MAAA,GACAC,MAAA,GACAC,OAAA,GACAzD,MAAA,GACA0D,OAAA,GACAC,IAAA,GACAlzB,KAAA,GACAmzB,KAAA,GACAtyB,IAAA,GACAuyB,KAAA,GACA3jB,SAAA,GACA4jB,OAAA,GACAC,MAAA,GACAC,SAAA,EACA,EACArB,KAAA13B,IAAA03B,EACAA,EACA,GACA9pB,EAAA+pB,CAAA,IAAAA,GAAAA,QAAAA,EACA,CACAjiB,OAAA,GACAD,QAAA,GACAE,YAAA,GACAY,eAAA,GACAV,eAAA,GACAE,eAAA,GACAC,kBAAA,GACAE,qBAAA,GACAD,mBAAA0hB,QAAAA,EACA/hB,qBAAA+hB,QAAAA,CACA,EACAA,GAEA,IACAqB,SA3pEA/hB,EAAA1Q,MAAA,EACA,aAAA0Q,GAAA,CAAAA,EAAAgiB,QAAA,CAAAx4B,SAAA,CAAA2D,OAAA,EACA6S,CAAAA,EAAAgiB,QAAA,CAAAx4B,SAAA,CAAA2D,OAAA,CAAApD,MAAAP,SAAA,CACA2D,OAAA,EAEA,iBAAA6S,GAAA,CAAAA,EAAAiiB,YAAA,CAAAz4B,SAAA,CAAA2D,OAAA,EACA6S,CAAAA,EAAAiiB,YAAA,CAAAz4B,SAAA,CAAA2D,OAAA,CAAApD,MAAAP,SAAA,CACA2D,OAAA,EAEA8Y,KAAAzc,SAAA,CAAA+O,QAAA,EACA0N,CAAAA,KAAAzc,SAAA,CAAA+O,QAAA,KAAA1P,KACA,IAAA0E,EAAA1E,CAAA,IACA,UAAAA,CAAA,EACA,0CAEA,GACA,UAAA0E,EACA,eAEcA,EAAAA,GAAAA,EAAAoH,UAAA,EACd,QACA,EAEA,IAsoEA,IAAAutB,EAAA,EACAC,EAAA,IACA,QAAApI,KAAAC,GAAA,GACAD,EAAAoI,cAAA,EACA1xB,CAAAA,EAAAspB,EAAAoI,cAAA,CAAA1xB,EAAA,EAOA,OAJAmwB,GACA,CAAAM,GACAzwB,CAAAA,EAAAmwB,EAAAnwB,EAAA,EAEAA,CACA,EACAvJ,EAAA,CAAAwlB,EAAA4P,KASA,GAPA7rB,EAAAisB,SAAA,CAAA5Z,KACY,GAAAod,EAAAnmB,CAAA,EAAc,CAAAiT,GAAA,SAAAvgB,GAAAA,CAAA,qBAAAC,GAAAA,EAAA2f,QAAA,QAAA1c,GAAAA,IAAA,GAC1Bc,EAAAzC,IAAA,GAAAyY,GAAA8V,YAAA,EACA,CAAA9rB,CAAAA,EAAAzC,IAAA,GAAAyY,GAAAkW,mBAAA,EACAlsB,EAAAgK,IAAA,CAAA0H,MAAA,GAAAuE,GAAAkW,QAAA,GACA5P,GAAA7f,OAAA,IAAAi1B,EAAAhW,QAAA,IAEA4U,EACY,GAAAd,EAAAnmB,CAAA,EAAc,CAAA0O,EAAA,eAAA5K,GAAAA,EAAAskB,EAT1BzV,GAS0B4P,GAAA,OAE1B,GAAA4E,EAAA,CACA,IAAAhF,EAAA,CACAluB,KAAA,QACA2W,MAAAwd,EAdAzV,GAeAjb,OAAAnC,OAAAC,QAAA,CAAAkC,MAAA,CACA6qB,WAAAA,CACA,EACAhtB,OAAA2xB,MAAA,CAAAoB,WAAA,CAAAnG,EAAA,IACA,CACA,GAAAzrB,EAAAzC,IAAA,GAAAyY,GAAA8V,YAAA,CACA8D,EArBA3T,EAsBAwV,EAAA,OAEA,GAAAzxB,EAAAzC,IAAA,GAAAyY,GAAAkW,mBAAA,EACA,GAAAlsB,EAAAgK,IAAA,CAAA0H,MAAA,GAAAuE,GAAAkW,QAAA,EACAnsB,EAAAgK,IAAA,CAAAuhB,cAAA,CACA,MAEAkG,CAAAA,IACA,IAAAI,EAAA/B,GAAA2B,GAAA3B,EACAgC,EAAAjC,GACAD,GACA5vB,EAAAisB,SAAA,CAAA2D,EAAA3D,SAAA,CAAA4D,EACAgC,CAAAA,GAAAC,CAAA,GACAC,GAAA,GAEA,CACA,EACA,IAAAC,EAAA,IACAv7B,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAAkW,QAAA,CACA,GAAAhS,CAAA,CAEA,EACA,EACA8X,EAAA,GAAAx7B,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAA4W,MAAA,CACA,GAAA7L,CAAA,CAEA,GACAkR,EAAA,GAAAz7B,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAA6W,cAAA,CACA,GAAA9L,CAAA,CAEA,GAQArI,EAAA,IAAA8V,GAAA,CACAvU,WAAA8X,EACArD,oBATA,GAAAl4B,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAAqX,iBAAA,CACA,GAAA9qB,CAAA,CAEA,EAIA,GACAiW,GAAA,kBAAA0Z,0BAAAA,yBACA,IAAAvH,GACA,IAAAI,GAAA,CACArlB,OAAAA,GACAuU,WAAA8X,EACArZ,kBAAAA,EACAwS,yBAAAA,EACA10B,YAAAA,CACA,GACA,QAAA6yB,KAAAC,GAAA,GACAD,EAAA8I,SAAA,EACA9I,EAAA8I,SAAA,EACAC,WAAA1sB,GACAklB,wBAAApS,GAAAoS,uBAAA,CACAO,6BAAA3S,GAAA2S,4BAAA,GAGA,IAAA/P,GAAA,IAAA4T,GACAhW,GAAAqZ,SAmTAC,CAAA,CAAA7sB,CAAA,EACA,IACA,OAAA6sB,EACAA,EAAA7sB,GACA,IAAA6oB,EACA,CACA,MAAA5pB,EAAA,CAEA,OADA0G,QAAAC,IAAA,uCACA,IAAAijB,EACA,CACA,EA7TA+B,EAAA,CACA3qB,OAAAA,GACA4J,IAAA1Q,OACAqb,WAAA,GAAAzjB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAA6W,cAAA,CACA,GAAA9L,CAAA,CAEA,GACA3a,aAAAA,EACAT,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAoqB,cAAAA,EACArS,SAAAA,EAAA,OACA1X,eAAAA,EACA3P,aAAAA,CACA,GACAqiB,GAAA,kBAAA2Z,8BACAA,6BACA,IAAA7E,GACA,IAAAC,GAAA,CACA1T,WAAA8X,EACApU,SAAAqU,EACAnjB,cAAA,CACAsO,WAAAA,EACAxX,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAb,YAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACAgB,iBAAAA,EACA3I,iBAAAA,EACA8I,eAAAA,EACAvD,gBAAAA,EACAqD,WAAAA,EACApI,YAAAA,EACAwI,aAAAA,EACAD,aAAAA,EACAyX,SAAAA,EACA3X,eAAAA,EACAuS,cAAAA,GACAE,kBAAAA,EACAM,cAAAA,GACAtS,gBAAAA,EACA0U,qBAAAA,EACA,EACA1V,OAAAA,EACA,GACAosB,GAAA,CAAAlG,EAAA,MACA,IAAAzL,EACA,OAEA3pB,EAAA,CACA8G,KAAAyY,GAAAoW,IAAA,CACApiB,KAAA,CACA3P,KAAAwE,OAAAC,QAAA,CAAAzE,IAAA,CACAkP,MAAA+J,KACA7J,OAAA0J,IACA,CACA,EAAS0Y,GACTlT,EAAAxb,KAAA,GACA0b,GAAA2C,IAAA,GACAe,GAAA7f,OAAA,IAAAi1B,EAAA9V,IAAA,IACA,IAAA/e,EAAA0xB,SAlmFAh2B,CAAA,CAAAkN,CAAA,EACA,IAAYC,OAAAA,EAAA,IAAApK,EAAA,CAAAqK,WAAAA,EAAA,WAAAC,cAAAA,EAAA,KAAAC,gBAAAA,EAAA,KAAAb,YAAAA,EAAA,GAAAJ,cAAAA,EAAA,UAAAE,gBAAAA,EAAA,KAAAD,iBAAAA,EAAA,KAAAE,mBAAAA,EAAA,KAAAgB,iBAAAA,EAAA,GAAAI,aAAAA,EAAA,GAAAC,aAAAA,EAAA,GAAA0pB,cAAAA,EAAA,GAAAntB,gBAAAA,CAAA,CAAAqD,WAAAA,CAAA,CAAApI,YAAAA,CAAA,CAAA40B,QAAAA,EAAA,GAAAtsB,eAAAA,CAAA,CAAAU,mBAAAA,CAAA,CAAAP,YAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,kBAAAA,CAAA,CAAAC,iBAAAA,CAAA,CAAAC,sBAAAA,CAAA,CAAAC,gBAAAA,EAAA,QAA6gBjB,GAAA,GAuCzhB,OAAAD,GAAAjN,EAAA,CACA2J,IAAA3J,EACAmN,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAb,YAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACAe,UAAA,GACAC,iBAAAA,EACA3I,iBAnDA0yB,CAAA,IAAAA,EACA,CACAW,MAAA,GACAC,KAAA,GACA,oBACAC,MAAA,GACAC,MAAA,GACAC,OAAA,GACAzD,MAAA,GACA0D,OAAA,GACAC,IAAA,GACAlzB,KAAA,GACAmzB,KAAA,GACAtyB,IAAA,GACAuyB,KAAA,GACA3jB,SAAA,GACA4jB,OAAA,EACA,EACApB,CAAA,IAAAA,EACA,GACAA,EAgCAntB,gBAAAA,EACAqD,WAAAA,EACApI,YAAAA,EACAqI,eAlCAusB,CAAA,IAAAA,GAAAA,QAAAA,EAEA,CACAzkB,OAAA,GACAD,QAAA,GACAE,YAAA,GACAY,eAAA,GACAX,qBAAAukB,QAAAA,EACAtkB,eAAA,GACAE,eAAA,GACAC,kBAAA,GACAC,mBAAA,GACAC,qBAAA,EACA,EACAikB,CAAA,IAAAA,EACA,GACAA,EAmBAtsB,eAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAQ,mBAAAA,EACAP,YAAAA,EACAC,aAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,EACAC,kBAAA,EACA,EACA,EA4hFArH,SAAA,CACAoG,OAAAA,GACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAb,YAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACAgB,iBAAAA,EACA+pB,cAAA1yB,EACAuF,gBAAAA,EACA/E,YAAAA,EACAoI,WAAAA,EACAwsB,QAAAvsB,EACAC,eAAAA,EACAE,aAAAA,EACAD,aAAAA,EACAE,YAAA,IACA8N,GAAA5b,EAAAmN,KACA8S,GAAAC,SAAA,CAAAlgB,GAEA8b,GAAA9b,EAAAmN,KACAgT,EAAAC,gBAAA,CAAApgB,GAEA+b,GAAA/b,IACAqgB,GAAAC,aAAA,CAAAtgB,EAAAI,UAAA,CAAA2G,SAEA,EACAgH,aAAA,CAAAjG,EAAAyY,KACAN,GAAAO,YAAA,CAAA1Y,EAAAyY,GACAzY,EAAAR,aAAA,EACAmZ,GAAAC,SAAA,CAAA5Y,EAAAR,aAAA,EAEA+Y,GAAAM,mBAAA,CAAA7Y,EACA,EACAmG,iBAAA,CAAAmoB,EAAA7V,KACAJ,EAAAS,iBAAA,CAAAwV,EAAA7V,EACA,EACApS,gBAAAA,CACA,GACA,IAAA7J,EACA,OAAAuO,QAAAC,IAAA,oCAEA7U,EAAA,CACA8G,KAAAyY,GAAA8V,YAAA,CACA9hB,KAAA,CACAlN,KAAAA,EACA41B,cAAApgB,GAAAzT,OACA,CACA,GACA0d,GAAA7f,OAAA,IAAAi1B,EAAA7V,MAAA,IACAvc,SAAAisB,kBAAA,EAAAjsB,SAAAisB,kBAAA,CAAAvzB,MAAA,IACA0gB,EAAAmH,gBAAA,CAAAvgB,SAAAisB,kBAAA,CAAA7lB,GAAA9J,KAAA,CAAA0D,UACA,EACA7I,EAAAq7B,GACA,IACA,IAAAp7B,EAAA,GACA0mB,EAAA,GACAjB,GAAA2D,IAAA,CACA3C,WAAAA,EACAlD,WAAA8X,EACAzR,YAAA,CAAAM,EAAAnP,IAAAjb,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAA,EACAmP,UAAAA,CACA,CACA,GACAe,mBAAA,GAAAnrB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAA2W,gBAAA,CACA,GAAA7H,CAAA,CAEA,GACAnH,SAAAqU,EACA5O,iBAAA,GAAA5sB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAAyW,cAAA,CACA,GAAA3H,CAAA,CAEA,GACArB,QAAA,GAAAjtB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAA8W,KAAA,CACA,GAAA3I,CAAA,CAEA,GACAe,mBAAA,GAAA1uB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAA0W,gBAAA,CACA,GAAA3L,CAAA,CAEA,GACA4E,iBAAA,GAAAnvB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAA+W,cAAA,CACA,GAAA/Q,CAAA,CAEA,GACAwK,mBAAA,GAAAhwB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAAgX,gBAAA,CACA,GAAAhR,CAAA,CAEA,GACA0W,iBAAAT,EACA/K,OAAA,GAAA1wB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAAkX,IAAA,CACA,GAAAnM,CAAA,CAEA,GACAiH,YAAA,IACAxxB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAAmX,SAAA,CACA,GAAApM,CAAA,CAEA,EACA,EACAmI,gBAAA,IACA1yB,EAAA,CACA8G,KAAAyY,GAAAkW,mBAAA,CACAliB,KAAA,CACA0H,OAAAuE,GAAA2c,aAAA,CACA,GAAArvB,CAAA,CAEA,EACA,EACAqC,WAAAA,EACA+d,YAAAA,EACAC,eAAAA,EACA3e,YAAAA,EACAJ,cAAAA,EACAE,gBAAAA,EACAD,iBAAAA,EACAE,mBAAAA,EACA3H,iBAAAA,EACA2I,iBAAAA,EACA6X,SAAAA,EACAuC,UAAAA,EACA/Z,aAAAA,EACAD,aAAAA,EACAyd,qBAAAA,EACAoD,aAAAA,EACA9kB,IAAAA,EACAS,gBAAAA,EACA/E,YAAAA,EACAoI,WAAAA,EACAU,gBAAAA,EACAd,cAAAA,EACAC,gBAAAA,EACAI,eAAAA,EACAC,eAAAA,EACAR,OAAAA,GACA8S,cAAAA,GACAE,kBAAAA,EACAE,iBAAAA,GACAwC,qBAAAA,GACApC,cAAAA,GACAyN,oBAAAA,EACA6C,QAAyB,GAAAkG,EAAAnmB,CAAA,EAAc,CAAAigB,EACvC,iBAAAlc,GAAAA,EAAAwM,MAAA,QAAAvM,GAAAA,EAAA,GAAA0T,EAAA7D,QAAA,EACA,iBAAArK,GAAAA,EAAArC,GAAA,QAAAsC,GAAAA,EAAA,KACAoK,SAAA6D,EAAA7D,QAAA,CACAzX,QAAAsb,EAAAtb,OAAA,CACA8jB,SAAA,GAAA/yB,EAAA,CACA8G,KAAAyY,GAAAuW,MAAA,CACAviB,KAAA,CACAsf,OAAAtI,EAAA3hB,IAAA,CACAua,QAAAA,CACA,CACA,EACA,IAAiB,OACJ,IAEbnB,GAAAsS,eAAA,KACA,IACAp0B,EAAA4D,IAAA,CAAA8iB,EAAAjO,EAAA7O,eAAA,EACA,CACA,MAAA3G,EAAA,CACAyR,QAAAC,IAAA,CAAA1R,EACA,CACA,GACA,IAAA4hB,EAAA,KACAuW,KACAp7B,EAAA4D,IAAA,CAAA8iB,EAAA9d,UACA,EAuBA,MAtBAA,gBAAAA,SAAA+P,UAAA,EACA/P,aAAAA,SAAA+P,UAAA,CACAkM,KAGA7kB,EAAA4D,IAAA,CAAA4V,GAAA,wBACA1Z,EAAA,CACA8G,KAAAyY,GAAAsW,gBAAA,CACAtiB,KAAA,EACA,GACA,qBAAAqmB,GACA7U,GACA,IACA7kB,EAAA4D,IAAA,CAAA4V,GAAA,YACA1Z,EAAA,CACA8G,KAAAyY,GAAAqW,IAAA,CACAriB,KAAA,EACA,GACA,SAAAqmB,GACA7U,GACA,EAAa3c,UAEb,KACAlI,EAAA+F,OAAA,IAAAoY,KACAuG,GAAAkU,OAAA,GACA74B,EAAA4B,KAAAA,EAnvDA9B,EAAA8B,KAAAA,CAqvDA,CACA,CACA,MAAAsB,EAAA,CACAyR,QAAAC,IAAA,CAAA1R,EACA,CACA,CA2BA,SAAAi5B,GAAA5G,CAAA,EAEA,OAAA6G,EADA,WACA7G,EAAAA,IAAAA,CACA,CAKA,SAAA8G,GAAA9G,CAAA,EAEA,OAAA6G,EADA,WACA7G,EAAA,IAAAA,CACA,CAKA,SAAA+G,GAAAC,CAAA,CAAAC,CAAA,EACA,uBAAAA,EAAAC,QAAA,GAIA,wBAAAz5B,QAAA,CAAAw5B,EAAAC,QAAA,EACAF,EAAAG,mBAAA,GAEAH,EAAAI,4BAAA,GAGAJ,EAAAK,SAAA,MAGAL,EAAAM,iBAAA,EACAh2B,KAAAyY,GAAAwW,MAAA,CAGAP,UAAA,IAAAiH,CAAAA,EAAAjH,SAAA,KACAjiB,KAAA,CACAwpB,IAAA,aAEA5Z,QAAiB,GAAA6Z,EAAAC,EAAA,EAASR,EAAA,OAC1B,CACA,GAGAA,YAAAA,EAAAC,QAAA,GAEA,CAKA,SAAAQ,GAAA/1B,CAAA,EAEA,OAAAg2B,EADAC,OAAA,CAJA,aAKAj2B,CACA,CAQA,SAAAk2B,GAAA5f,CAAA,EACA,IAAA9D,EAAA2jB,GAAA7f,UAEA,GAAA9D,aAAA7D,QAIAonB,GAAAvjB,GAHAA,CAIA,CAGA,SAAA2jB,GAAA7f,CAAA,QACA,UAQA,OARAA,GAAAA,GAQA,WARAA,EACAA,EAAA9D,MAAA,CAGA8D,CACA,CAlGAyb,GAAAhqB,MAAA,CAAAA,GACAgqB,GAAAoC,gBAAA,CAPA,SAAAlG,CAAA,EACA,IAAAn1B,EACA,+DAEAA,EAAAm1B,EACA,EAiJA,IAAAmI,GAAA,IAAAtc,IAAA,CACAzB,GAAAkW,QAAA,CACAlW,GAAA+W,cAAA,CACA/W,GAAAgX,gBAAA,CACAhX,GAAAqX,iBAAA,CACArX,GAAA6W,cAAA,CACA7W,GAAAmX,SAAA,CACAnX,GAAA0W,gBAAA,CACA,CAQA,OAAAsH,GAGAz4B,YACAy3B,CAAA,CACAiB,CAAA,CAEAC,EAAAnB,EAAA,CACA,CACA,KAAAoB,aAAA,GACA,KAAAC,WAAA,GACA,KAAAC,OAAA,IAGA,KAAAC,QAAA,CAAAL,EAAArjB,OAAA,KACA,KAAA2jB,UAAA,CAAAN,EAAAxT,SAAA,KACA,KAAA+T,cAAA,CAAAP,EAAAQ,aAAA,KACA,KAAAC,OAAA,CAAA1B,EACA,KAAA2B,eAAA,CAAAV,EAAAtQ,cAAA,CACA,KAAAuQ,mBAAA,CAAAA,CACA,CAGAU,cAAA,KAzEAxY,EA0EA,IAAAyY,GA1EAzY,EA0EA,KAEA,KAAA+X,aAAA,CAAAW,IACA,EA3EAp+B,IACAA,EAAA,GAeE,GAAAq+B,EAAAC,EAAA,EAAI79B,EAAA,gBAAA89B,CAAA,EACN,mBAAA98B,CAAA,EACA,GAAAzB,EACA,IACAA,EAAA+F,OAAA,CAAAomB,GAAAA,IACA,CAAU,MAAA9iB,EAAA,CAEV,CAGA,OAAAk1B,EAAA5jB,KAAA,CAAAla,EAAAgB,EACA,CACA,IAvBAzB,EAAA4D,IAAA,CAAA8hB,GAEA,KACA,IAAAvZ,EAAAnM,EAAAA,EAAA8K,OAAA,CAAA4a,GAAA,GACAvZ,EAAA,IACA,EAAAqyB,MAAA,CAAAryB,EAAA,EAEA,EAiEA,MAAAsyB,SAAA,MACAN,IAEA,KAAAR,OAAA,IACA,KAAAF,aAAA,GACA,KAAAC,WAAA,EACA,CACA,CAGAgB,iBAAA,CACA,KAAAD,SAAA,EACA,KAAAA,SAAA,GAGA,KAAAE,kBAAA,EACAC,aAAA,KAAAD,kBAAA,CAEA,CAGAE,YAAAtC,CAAA,CAAAp2B,CAAA,MAkKA8mB,EAjKA,GAAA6R,EAAA,KAAAb,eAAA,CAkKA,CAAAc,GAAAh8B,QAAA,CAAAoD,EAAAQ,OAAA,GAKAR,UAAAA,EAAAQ,OAAA,uBAAA5D,QAAA,CAAAoD,EAAAyB,YAAA,eAQAzB,MAAAA,EAAAQ,OAAA,EACAR,CAAAA,EAAAsB,YAAA,cAAAtB,EAAAsB,YAAA,YAAAtB,UAAAA,EAAAyB,YAAA,aAKAqlB,GAAA9mB,EAAAwH,OAAA,CAAAsf,IAQA,CAAAsP,CAAAA,EAAAlpB,IAAA,mBAAAkpB,EAAAlpB,IAAA,CAAAkR,MAAA,EAAAgY,EAAAjH,SAAA,EA5LA,OAGA,IAAA0J,EAAA,CACA1J,UAAA8G,GAAAG,EAAAjH,SAAA,EACA2J,gBAAA1C,EAEA2C,WAAA,EACA/4B,KAAAA,CACA,EAIA,KAAAw3B,OAAA,CAAApqB,IAAA,CAAA4rB,GAAAA,EAAAh5B,IAAA,GAAA64B,EAAA74B,IAAA,EAAAgN,EAAAA,KAAAisB,GAAA,CAAAD,EAAA7J,SAAA,CAAA0J,EAAA1J,SAAA,KAKA,KAAAqI,OAAA,CAAA/5B,IAAA,CAAAo7B,GAGA,SAAArB,OAAA,CAAAr8B,MAAA,EACA,KAAA+9B,oBAAA,GAEA,CAGAC,iBAAAhK,EAAAjb,KAAAD,GAAA,IACA,KAAAqjB,aAAA,CAAArB,GAAA9G,EACA,CAGAiK,eAAAjK,EAAAjb,KAAAD,GAAA,IACA,KAAAsjB,WAAA,CAAAtB,GAAA9G,EACA,CAGAkK,cAAAv4B,CAAA,EACA,IAAAd,EAAA62B,GAAA/1B,GACA,KAAAw4B,iBAAA,CAAAt5B,EACA,CAGAs5B,kBAAAt5B,CAAA,EACA,KAAAu5B,UAAA,CAAAv5B,GAAAJ,OAAA,CAAAo5B,IACAA,EAAAD,UAAA,EACA,EACA,CAGAQ,WAAAv5B,CAAA,EACA,YAAAw3B,OAAA,CAAAza,MAAA,CAAAic,GAAAA,EAAAh5B,IAAA,GAAAA,EACA,CAGAw5B,cAAA,CACA,IAAAC,EAAA,GAEAxlB,EAAAgkB,KAiBA,QAAAe,KAfA,KAAAxB,OAAA,CAAA53B,OAAA,CAAAo5B,IACA,CAAAA,EAAAU,aAAA,OAAApC,aAAA,EACA0B,CAAAA,EAAAU,aAAA,CAAAV,EAAA7J,SAAA,OAAAmI,aAAA,MAAAA,aAAA,CAAA0B,EAAA7J,SAAA,CAAA3zB,KAAAA,CAAA,EAEA,CAAAw9B,EAAAW,WAAA,OAAApC,WAAA,EACAyB,CAAAA,EAAAW,WAAA,CAAAX,EAAA7J,SAAA,OAAAoI,WAAA,MAAAA,WAAA,CAAAyB,EAAA7J,SAAA,CAAA3zB,KAAAA,CAAA,EAIAw9B,EAAA7J,SAAA,MAAAsI,QAAA,EAAAxjB,GACAwlB,EAAAh8B,IAAA,CAAAu7B,EAEA,GAGAS,GAAA,CACA,IAAAzzB,EAAA,KAAAwxB,OAAA,CAAA7yB,OAAA,CAAAq0B,GAEAhzB,EAAA,KACA,KAAA4zB,oBAAA,CAAAZ,GACA,KAAAxB,OAAA,CAAAa,MAAA,CAAAryB,EAAA,GAEA,CAGA,KAAAwxB,OAAA,CAAAr8B,MAAA,EACA,KAAA+9B,oBAAA,EAEA,CAGAU,qBAAAZ,CAAA,EACA,IAAA7C,EAAA,KAAA0B,OAAA,CACAgC,EAAAb,EAAAW,WAAA,EAAAX,EAAAW,WAAA,OAAAhC,cAAA,CACAmC,EAAAd,EAAAU,aAAA,EAAAV,EAAAU,aAAA,OAAAhC,UAAA,CAGA,CAAYqB,WAAAA,CAAA,CAAAD,gBAAAA,CAAA,EAA8BE,EAG1C,GAJA,CAAAa,GAAA,CAAAC,EAIA,CAGA,IAAAC,EAAA/sB,IAAAA,KAAAC,GAAA,CAAA+rB,EAAAU,aAAA,OAAAjC,QAAA,MAAAA,QAAA,EACAuC,EAAAD,EAAA,SAAAtC,QAAA,sBAEArB,EAAA,CACA31B,KAAA,UACAkuB,QAAAmK,EAAAnK,OAAA,CACAQ,UAAA2J,EAAA3J,SAAA,CACAkH,SAAA,uBACAnpB,KAAA,CACA,GAAA4rB,EAAA5rB,IAAA,CACArL,IAAAvH,EAAA0H,QAAA,CAAAzE,IAAA,CACA08B,MAAA9D,EAAA+D,eAAA,GACAH,iBAAAA,EACAC,UAAAA,EAGAjB,WAAAA,GAAA,CACA,CACA,EAEA,KAAA1B,mBAAA,CAAAlB,EAAAC,GACA,MACA,CAGA,GAAA2C,EAAA,GACA,IAAA3C,EAAA,CACA31B,KAAA,UACAkuB,QAAAmK,EAAAnK,OAAA,CACAQ,UAAA2J,EAAA3J,SAAA,CACAkH,SAAA,gBACAnpB,KAAA,CACA,GAAA4rB,EAAA5rB,IAAA,CACArL,IAAAvH,EAAA0H,QAAA,CAAAzE,IAAA,CACA08B,MAAA9D,EAAA+D,eAAA,GACAnB,WAAAA,EACAoB,OAAA,EACA,CACA,EAEA,KAAA9C,mBAAA,CAAAlB,EAAAC,EACA,CACA,CAGA8C,sBAAA,CACA,KAAAV,kBAAA,EACAC,aAAA,KAAAD,kBAAA,EAGA,KAAAA,kBAAA,CAA8B,GAAA4B,EAAAC,EAAA,EAAY,SAAAb,YAAA,OAC1C,CACA,CAEA,IAAAZ,GAAA,uBAmCA,SAAAX,KACA,OAAA/jB,KAAAD,GAAA,MACA,CAoDA,SAAAqmB,GACAlE,CAAA,EAEA,OACAjH,UAAAjb,KAAAD,GAAA,OACAxT,KAAA,UACA,GAAA21B,CAAA,CAEA,CAIAt8B,CADAA,EAOCA,GAAAA,CAAAA,EAAA,IAND,CAAAA,EAAA,uBACAA,CAAA,CAAAA,EAAA,+BACAA,CAAA,CAAAA,EAAA,qBACAA,CAAA,CAAAA,EAAA,eACAA,CAAA,CAAAA,EAAA,iBACAA,CAAA,CAAAA,EAAA,qBAKA,IAAAygC,GAAA,IAAA3f,IAAA,CACA,KACA,QACA,aACA,OACA,OACA,MACA,QACA,eACA,cACA,WACA,gBACA,wBACA,EAyBA4f,GAAA,GAGA,IACA,IAAArE,EAAAsE,SAAA,GACA,OAGA,IAAA5X,EAAA6X,SA6DAC,CAAA,EACA,IAAUrnB,OAAAA,CAAA,CAAAqb,QAAAA,CAAA,EAAkBiM,SAQ5BD,CAAA,MAGAhM,EAFA,IAAAkM,EAAAF,UAAAA,EAAAp4B,IAAA,CAGA+Q,EAAA,KAGA,IACAA,EAAAunB,EAAA7D,GAAA2D,EAAAvjB,KAAA,EAAA6f,GAAA0D,EAAAvjB,KAAA,EACAuX,EAAc,GAAAmM,EAAAC,EAAA,EAAgBznB,EAAA,CAAW0nB,gBAAA,OAAsB,WAC/D,CAAI,MAAA93B,EAAA,CACJyrB,EAAA,WACA,CAEA,OAAWrb,OAAAA,EAAAqb,QAAAA,CAAA,CACX,EAvB4BgM,GAE5B,OAAAL,GAAA,CACAjE,SAAA,MAAoBsE,EAAAp4B,IAAA,CAAiB,EACrC,GAAA04B,GAAA3nB,EAAAqb,EAAA,EAEA,EApEAgM,GAEA,IAAA9X,EACA,OAGA,IAAAgY,EAAAF,UAAAA,EAAAp4B,IAAA,CACA6U,EAAAyjB,EAAAF,EAAAvjB,KAAA,CAAA5b,KAAAA,EAGAq/B,GACA1E,EAAA+E,aAAA,EACA9jB,GACAA,EAAA9D,MAAA,EACA,CAAA8D,EAAA+jB,MAAA,EACA,CAAA/jB,EAAAgkB,OAAA,EACA,CAAAhkB,EAAAikB,OAAA,EACA,CAAAjkB,EAAAkkB,QAAA,EAEA5C,SAtYAwC,CAAA,CAAApC,CAAA,CAAA94B,CAAA,EACAk7B,EAAAxC,WAAA,CAAAI,EAAA94B,EACA,EAqYAm2B,EAAA+E,aAAA,CACArY,EACAmU,GAAA2D,EAAAvjB,KAAA,GAIA8e,GAAAC,EAAAtT,EACA,EAIA,SAAAoY,GAAA3nB,CAAA,CAAAqb,CAAA,EACA,IAAAvQ,EAAAyU,GAAAhqB,MAAA,CAAA9J,KAAA,CAAAuU,GACAtT,EAAAoe,GAAAyU,GAAAhqB,MAAA,CAAAxJ,OAAA,CAAA+e,GACAle,EAAAF,GAAA6yB,GAAAhqB,MAAA,CAAA5J,OAAA,CAAAe,GACAc,EAAAZ,GAqDAF,EAAAS,IAAA,GAAA3G,EAAA2V,OAAA,CArDAvP,EAAA,KAEA,OACAyuB,QAAAA,EACAzhB,KAAApM,EACA,CACAsd,OAAAA,EACApe,KAAA,CACAZ,GAAAgf,EACA5d,QAAAM,EAAAN,OAAA,CACAuL,YAAAvP,MAAAC,IAAA,CAAAqE,EAAAnB,UAAA,EACAgU,GAAA,IAAA3T,EAAAS,IAAA,GAAA3G,EAAA4W,IAAA,EAAA1Q,EAAA+L,WAAA,EACAgR,MAAA,CAAArc,SACAiT,GAAA,CAAA3S,GAAA,EAAAuE,IAAA,IACA5I,IAAA,KACAyO,WAAAmwB,SA9EAnwB,CAAA,EACA,IAAAslB,EAAA,GAIA,QAAA/R,IAHA,CAAAvT,CAAA,2BAAAA,CAAA,yBACAA,CAAAA,CAAA,0BAAAA,CAAA,yBAEAA,EACA,GAAAmvB,GAAAz6B,GAAA,CAAA6e,GAAA,CACA,IAAA6c,EAAA7c,EAEAA,CAAAA,gBAAAA,GAAAA,iBAAAA,CAAA,GACA6c,CAAAA,EAAA,UAGA9K,CAAA,CAAA8K,EAAA,CAAApwB,CAAA,CAAAuT,EAAA,CAIA,OAAA+R,CACA,EA4DA5vB,EAAAsK,UAAA,CACA,CACA,EACA,EACA,CACA,CAiGA,IAAAqwB,GAEA,CAEAC,SAkGA,SACAC,CAAA,EAEA,IACAC,UAAAA,CAAA,CACAC,cAAAA,CAAA,CACAt5B,KAAAA,CAAA,CACAu5B,YAAAA,CAAA,CACAC,UAAAA,CAAA,CACAC,gBAAAA,CAAA,CACAC,gBAAAA,CAAA,CACAC,eAAAA,CAAA,CACAC,aAAAA,CAAA,CACA,CAAIR,QAGJ,2BAAA/+B,QAAA,CAAAi/B,GACA,KAGA,CACAp7B,KAAA,GAAam7B,EAAU,GAAGC,EAAc,EACxC5P,MAAAmQ,GAAAL,GACA7P,IAAAkQ,GAAAN,GACAv5B,KAAAA,EACA2K,KAAA,CACAkS,KAAA+c,EACAE,WAAAH,EACAF,gBAAAA,EACAC,gBAAAA,CACA,CACA,CACA,EAjIAK,MAuCA,SAAAX,CAAA,EACA,IAAUY,SAAAA,CAAA,CAAAX,UAAAA,CAAA,CAAAr5B,KAAAA,CAAA,CAAAw5B,UAAAA,CAAA,EAAuCJ,EAEjD1P,EAAAmQ,GAAAL,GACA,OACAt7B,KAAAm7B,EACAr5B,KAAAA,EACA0pB,MAAAA,EACAC,IAAAD,EAAAsQ,EACArvB,KAAA1R,KAAAA,CACA,CACA,EAhDAghC,WAkDA,SAAAb,CAAA,EACA,IACAC,UAAAA,CAAA,CACAr5B,KAAAA,CAAA,CACAy5B,gBAAAA,CAAA,CACAO,SAAAA,CAAA,CACAE,YAAAA,CAAA,CACAR,gBAAAA,CAAA,CACAS,2BAAAA,CAAA,CACAC,yBAAAA,CAAA,CACAC,eAAAA,CAAA,CACAC,eAAAA,CAAA,CACAC,aAAAA,CAAA,CACAC,cAAAA,CAAA,CACAhB,UAAAA,CAAA,CACAI,aAAAA,CAAA,CACA17B,KAAAA,CAAA,CACA,CAAIk7B,SAGJ,IAAAY,EACA,KAGA,CACA97B,KAAA,GAAam7B,EAAU,GAAGn7B,EAAK,EAC/BwrB,MAAAmQ,GAAAL,GACA7P,IAAAkQ,GAAAK,GACAl6B,KAAAA,EACA2K,KAAA,CACAkS,KAAA+c,EACAH,gBAAAA,EACAC,gBAAAA,EACAM,SAAAA,EACAK,eAAAA,EACAF,2BAAAA,EACAC,yBAAAA,EACAE,eAAAA,EACAC,aAAAA,EACAL,YAAAA,EACAM,cAAAA,CACA,CACA,CACA,CA5FA,EAKA,SAAAC,GACAC,CAAA,CACA9G,CAAA,EAEA,QAAYgE,OAAAA,CAAA,CAAQ,QAAAhE,EAAA+G,wBAAA,CAAAz/B,IAAA,CAAAw/B,EAAA9C,GACpB,CAWA,SAAAgD,GAAAxB,CAAA,EACA,IAAAC,EAAAH,EAAA,CAAAE,EAAAC,SAAA,SACA,EAIAA,EAAAD,GAHA,IAIA,CAEA,SAAAS,GAAAjI,CAAA,EAGA,QAAWiJ,EAAAC,EAA4B,EAAA/iC,EAAAgjC,WAAA,CAAAC,UAAA,EAAApJ,CAAA,KACvC,CAiGA,SAAAqJ,GAAArD,CAAA,EACA,IAAAsD,EAAAtD,EAAA3Q,OAAA,CAAA2Q,EAAA3Q,OAAA,CAAAruB,MAAA,IAEA,OAAAuiC,GAAAvD,EAAA,2BADAsD,GAAAA,EAAA38B,OAAA,EAAA28B,EAAA38B,OAAA,EAAAtF,KAAAA,EAEA,CASA,SAAAmiC,GAAAxD,CAAA,EACA,IAAAyD,EAAA,GACAC,EAAA,GACA,QAAAlC,KAAAxB,EAAA3Q,OAAA,CACA,GAVA,KAAAhuB,IAAA,EAAAsiC,OAAA,CAUA,CACA,IAAAC,EAAA,GACA,QAAAnpB,KAAA+mB,EAAAmC,OAAA,CACA,GAAAlpB,EAAA5U,IAAA,EACA69B,EAAApgC,IAAA,CAAAmX,EAAA5U,IAAA,EACA,IAAAoe,EAAAyU,GAAAhqB,MAAA,CAAA9J,KAAA,CAAA6V,EAAA5U,IAAA,EACAoe,GACA2f,EAAAtgC,IAAA,CAAA2gB,EAEA,CAEAwf,EAAAngC,IAAA,EAA0BxC,MAAA0gC,EAAA1gC,KAAA,CAAA8iC,QAAAA,EAAA5iC,MAAA,CAAA4iC,EAAAviC,KAAAA,CAAA,EAC1B,CAGA,OAAAkiC,GAAAvD,EAAA,0BAAA0D,EAAAD,EACA,CAKA,SAAAI,GAAA7D,CAAA,EACA,IAAAsD,EAAAtD,EAAA3Q,OAAA,CAAA2Q,EAAA3Q,OAAA,CAAAruB,MAAA,IAEA,OAAAuiC,GAAAvD,EAAA,oBADAsD,GAAAA,EAAAnqB,MAAA,EAAAmqB,EAAAnqB,MAAA,EAAA9X,KAAAA,EAEA,CAKA,SAAAyiC,GAAA9D,CAAA,EACA,IAAAsD,EAAAtD,EAAA3Q,OAAA,CAAA2Q,EAAA3Q,OAAA,CAAAruB,MAAA,IAEA,OAAAuiC,GAAAvD,EAAA,4BADAsD,GAAAA,EAAAnqB,MAAA,EAAAmqB,EAAAnqB,MAAA,EAAA9X,KAAAA,EAEA,CAKA,SAAAkiC,GACAvD,CAAA,CACA53B,CAAA,CACAs7B,CAAA,CACAK,CAAA,EAEA,IAAAjjC,EAAAk/B,EAAAl/B,KAAA,CACAkjC,EAAAhE,EAAAgE,MAAA,CAEAjS,EAAAkQ,GAAAnhC,GAEA,OACAwF,KAAA,YACA8B,KAAAA,EACA0pB,MAAAC,EACAA,IAAAA,EACAhf,KAAA,CACAjS,MAAAA,EACAmkB,KAAAnkB,EACAkjC,OAAAA,EACAJ,QAAAF,EAAAA,EAAAlqB,GAAA,CAAA3T,GAAA6yB,GAAAhqB,MAAA,CAAA9J,KAAA,CAAAiB,IAAAxE,KAAAA,EACA0iC,aAAAA,CACA,CACA,CACA,CA0CA,IAAAE,GAAA,oBAAAC,kBAAAA,iBAMAC,GAAA,8BACAC,GAAA,YAEA,SAAAC,GAAA7P,CAAA,CAAA8P,EAAA,QACE,GAAAC,EAAAhjC,CAAA,EACF,CACA26B,SAAA,UACAnpB,KAAA,CACAyxB,OAAA,QACA,EACAF,MAAAA,EACA9P,QAAA,GAAkB4P,GAAO,EAAE5P,EAAQ,GAEnC,CAAM8P,MAAAA,CAAA,EAEN,CA0DA,IAAAE,GAAAC,WAvDA,IAAAC,EAAA,GACAC,EAAA,GAEAC,EAAA,CACAC,UAAA,IAAAxjC,KAAAA,EACAyjC,SAAA,IAAAzjC,KAAAA,EACA0jC,UAAA,IACAL,EAAAM,EAAAC,iBAAA,CACAN,EAAAK,EAAAE,cAAA,CAEA,EA0CA,OAxCAjB,IACAE,GAAA1+B,OAAA,CAAA2C,IACAw8B,CAAA,CAAAx8B,EAAA,KAAAjH,KACQgkC,EAAAC,EAAQ,CAAAh9B,EAAA,CAAAg8B,MAAAjjC,GAChBwjC,GACAN,GAAAljC,EAAAqB,IAAA,KAAwC,GAAA6iC,EAAAC,CAAA,EAAuBl9B,GAE/D,CACA,GAEAw8B,EAAAC,SAAA,EAAAliC,EAAA,GAAA6xB,KACAA,EAAAxzB,MAAA,EAAA4jC,EAAAjiC,KAAA,EACAiiC,EAAAjiC,KAAA,IAAA6xB,GAGM2Q,EAAAC,EAAQ,CAAAziC,KAAA,CAAAyhC,GAAAzhC,GAEd+hC,EACQ,GAAAa,EAAAC,EAAA,EAAgB7iC,GAChBgiC,GAGRN,GAAA1hC,EAAA,QAEA,EAEAiiC,EAAAE,QAAA,KAAA3jC,KACMgkC,EAAAC,EAAQ,CAAAK,IAAA,CAAArB,MAAAjjC,GACdwjC,GAGAe,WAAA,IAAArB,GAAAljC,CAAA,OAEA,GAEAgjC,GAAA1+B,OAAA,CAAA2C,IACAw8B,CAAA,CAAAx8B,EAAA,KAAA/G,KAAAA,CACA,GAGAujC,CACA,GAKA,OAAAe,WAAAC,MACArhC,aAAA,CACA,wDACA,CACA,CAMA,MAAAshC,GAOAthC,aAAA,CACA,KAAA8oB,MAAA,IACA,KAAAyY,UAAA,GACA,KAAAC,WAAA,IACA,KAAAC,eAAA,GACA,CAGA,IAAAC,WAAA,CACA,YAAA5Y,MAAA,CAAArsB,MAAA,EACA,CAGA,IAAAsF,MAAA,CACA,YACA,CAGAgyB,SAAA,CACA,KAAAjL,MAAA,IAIA,MAAA6Y,SAAAjpB,CAAA,EACA,IAAAkpB,EAAAjjC,KAAAC,SAAA,CAAA8Z,GAAAjc,MAAA,CAEA,GADA,KAAA8kC,UAAA,EAAAK,EACA,KAAAL,UAAA,CAvkKA,IAwkKA,UAAAH,GAGA,KAAAtY,MAAA,CAAA/pB,IAAA,CAAA2Z,EACA,CAGAmpB,QAAA,CACA,WAAAC,QAAAC,IAIA,IAAAC,EAAA,KAAAlZ,MAAA,CACA,KAAAmZ,KAAA,GACAF,EAAApjC,KAAAC,SAAA,CAAAojC,GACA,EACA,CAGAC,OAAA,CACA,KAAAnZ,MAAA,IACA,KAAAyY,UAAA,GACA,KAAAC,WAAA,GACA,CAGAU,sBAAA,CACA,IAAAzR,EAAA,KAAA3H,MAAA,CAAA7T,GAAA,CAAAyD,GAAAA,EAAA+X,SAAA,EAAA0R,IAAA,aAEA,EAIA9K,GAAA5G,GAHA,IAIA,CACA,CAMA,MAAA2R,GAEApiC,YAAAqiC,CAAA,EACA,KAAAC,OAAA,CAAAD,EACA,KAAAr9B,GAAA,EACA,CAMAu9B,aAAA,QAEA,KAAAC,mBAAA,EAIA,MAAAA,mBAAA,KAAAV,QAAA,CAAAC,EAAAU,KACA,KAAAH,OAAA,CAAA1yB,gBAAA,CACA,UACA,EAAWpB,KAAAA,CAAA,CAAM,IACjB,EAAAk0B,OAAA,CACAX,IAEAU,GAEA,EACA,CAAUE,KAAA,KAGV,KAAAL,OAAA,CAAA1yB,gBAAA,CACA,QACAxR,IACAqkC,EAAArkC,EACA,EACA,CAAUukC,KAAA,IAEV,EAAK,EAvBL,KAAAH,mBAAA,CA+BAzO,SAAA,CACA2L,IAAAO,GAAAiB,IAAA,kCACA,KAAAoB,OAAA,CAAAM,SAAA,EACA,CAKAxM,YAAAyM,CAAA,CAAAC,CAAA,EACA,IAAApiC,EAAA,KAAAqiC,kBAAA,GAEA,WAAAjB,QAAA,CAAAC,EAAAU,KACA,IAAA5uB,EAAA,EAA0BrF,KAAAA,CAAA,CAAM,IAEhC,GAAAw0B,EAAAH,MAAA,GAAAA,GAMAG,EAAAtiC,EAAA,GAAAA,GAOA,GAFA,KAAA4hC,OAAA,CAAA/yB,mBAAA,WAAAsE,GAEA,CAAAmvB,EAAAN,OAAA,EAEAhD,IAAAO,GAAA7hC,KAAA,iCAAA4kC,EAAAA,QAAA,EAEAP,EAAA,sCACA,MACA,CAEAV,EAAAiB,EAAAA,QAAA,EACA,EAIA,KAAAV,OAAA,CAAA1yB,gBAAA,WAAAiE,GACA,KAAAyuB,OAAA,CAAAlM,WAAA,EAAiC11B,GAAAA,EAAAmiC,OAAAA,EAAAC,IAAAA,CAAA,EACjC,EACA,CAGAC,oBAAA,CACA,YAAA/9B,GAAA,EACA,CACA,CAMA,MAAAi+B,GAKAjjC,YAAAqiC,CAAA,EACA,KAAAC,OAAA,KAAAF,GAAAC,GACA,KAAAa,kBAAA,MACA,KAAA3B,UAAA,GACA,KAAAC,WAAA,IACA,KAAAC,eAAA,GACA,CAGA,IAAAC,WAAA,CACA,aAAAwB,kBAAA,CAIA,IAAAnhC,MAAA,CACA,cACA,CAMAwgC,aAAA,CACA,YAAAD,OAAA,CAAAC,WAAA,EACA,CAKAxO,SAAA,CACA,KAAAuO,OAAA,CAAAvO,OAAA,EACA,CAOA4N,SAAAjpB,CAAA,EACA,IAAA+X,EAAA4G,GAAA3e,EAAA+X,SAAA,EACA,OAAAyS,kBAAA,EAAAzS,EAAA,KAAAyS,kBAAA,GACA,MAAAA,kBAAA,CAAAzS,CAAA,EAGA,IAAAjiB,EAAA7P,KAAAC,SAAA,CAAA8Z,SAGA,CAFA,KAAA6oB,UAAA,EAAA/yB,EAAA/R,MAAA,CAEA,KAAA8kC,UAAA,CAzwKA,KA0wKAO,QAAAW,MAAA,KAAArB,IAGA,KAAA+B,kBAAA,CAAA30B,EACA,CAKAqzB,QAAA,CACA,YAAAuB,cAAA,EACA,CAGAnB,OAAA,CACA,KAAAiB,kBAAA,MACA,KAAA3B,UAAA,GACA,KAAAC,WAAA,IAGA,KAAAc,OAAA,CAAAlM,WAAA,UAAAiN,IAAA,MAAA7+B,IACAk7B,IAAAO,GAAAK,SAAA,CAAA97B,EAAA,2CAAAA,EACA,EACA,CAGA09B,sBAAA,CACA,YAAAgB,kBAAA,CAMAC,mBAAA30B,CAAA,EACA,YAAA8zB,OAAA,CAAAlM,WAAA,YAAA5nB,EACA,CAKA,MAAA40B,gBAAA,CACA,IAAAJ,EAAA,WAAAV,OAAA,CAAAlM,WAAA,WAKA,OAHA,KAAA8M,kBAAA,MACA,KAAA3B,UAAA,GAEAyB,CACA,CACA,CAOA,MAAAM,GAEAtjC,YAAAqiC,CAAA,EACA,KAAAkB,SAAA,KAAAjC,GACA,KAAAkC,YAAA,KAAAP,GAAAZ,GACA,KAAAoB,KAAA,MAAAF,SAAA,CAEA,KAAAG,4BAAA,MAAAC,qBAAA,EACA,CAGA,IAAAlC,iBAAA,CACA,YAAAgC,KAAA,CAAAhC,eAAA,CAIA,IAAA1/B,MAAA,CACA,YAAA0hC,KAAA,CAAA1hC,IAAA,CAIA,IAAA2/B,WAAA,CACA,YAAA+B,KAAA,CAAA/B,SAAA,CAIA,IAAAF,aAAA,CACA,YAAAiC,KAAA,CAAAjC,WAAA,CAGA,IAAAA,YAAAjlC,CAAA,EACA,KAAAknC,KAAA,CAAAjC,WAAA,CAAAjlC,CACA,CAIA,IAAAklC,gBAAAllC,CAAA,EACA,KAAAknC,KAAA,CAAAhC,eAAA,CAAAllC,CACA,CAGAw3B,SAAA,CACA,KAAAwP,SAAA,CAAAxP,OAAA,GACA,KAAAyP,YAAA,CAAAzP,OAAA,EACA,CAGAkO,OAAA,CACA,YAAAwB,KAAA,CAAAxB,KAAA,EACA,CAGAC,sBAAA,CACA,YAAAuB,KAAA,CAAAvB,oBAAA,EACA,CAOAP,SAAAjpB,CAAA,EACA,YAAA+qB,KAAA,CAAA9B,QAAA,CAAAjpB,EACA,CAGA,MAAAmpB,QAAA,CAIA,OAFA,WAAA+B,oBAAA,GAEA,KAAAH,KAAA,CAAA5B,MAAA,EACA,CAGA+B,sBAAA,CACA,YAAAF,4BAAA,CAIA,MAAAC,uBAAA,CACA,IACA,WAAAH,YAAA,CAAAjB,WAAA,EACA,CAAM,MAAAnkC,EAAA,CAGNshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,wEACA,MACA,CAGA,WAAAylC,0BAAA,EACA,CAGA,MAAAA,4BAAA,CACA,IAAY/a,OAAAA,CAAA,CAAA0Y,YAAAA,CAAA,CAAAC,gBAAAA,CAAA,EAAuC,KAAA8B,SAAA,CAEnDO,EAAA,GACA,QAAAprB,KAAAoQ,EACAgb,EAAA/kC,IAAA,MAAAykC,YAAA,CAAA7B,QAAA,CAAAjpB,GAGA,MAAA8qB,YAAA,CAAAhC,WAAA,CAAAA,EACA,KAAAgC,YAAA,CAAA/B,eAAA,CAAAA,EAIA,KAAAgC,KAAA,MAAAD,YAAA,CAGA,IACA,MAAA1B,QAAAiC,GAAA,CAAAD,GAGA,KAAAP,SAAA,CAAAtB,KAAA,EACA,CAAM,MAAA7jC,EAAA,CACNshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,+CACA,CACA,CACA,CAmDA,SAAA4lC,KACA,IAEA,yBAAApoC,GAAA,EAAAA,EAAAqoC,cAAA,CACI,MAAAz/B,EAAA,CACJ,QACA,CACA,CA+BA,SAAA0/B,GAAAC,CAAA,SACA,KAAArnC,IAAAqnC,GAKA71B,KAAA81B,MAAA,GAAAD,CACA,CAKA,SAAAE,GAAAC,CAAA,EACA,IAAA/uB,EAAAC,KAAAD,GAAA,GACA7U,EAAA4jC,EAAA5jC,EAAA,EAA2B,GAAA6jC,EAAAC,EAAA,IAE3BC,EAAAH,EAAAG,OAAA,EAAAlvB,EACAmvB,EAAAJ,EAAAI,YAAA,EAAAnvB,EAKA,OACA7U,GAAAA,EACA+jC,QAAAA,EACAC,aAAAA,EACAC,UARAL,EAAAK,SAAA,IASAC,QARAN,EAAAM,OAAA,CASAC,kBARAP,EAAAO,iBAAA,CAUA,CAKA,SAAAC,GAAAR,CAAA,EACA,GAAAN,KAIA,IACApoC,EAAAqoC,cAAA,CAAAc,OAAA,CAAAhpC,EAAA4C,KAAAC,SAAA,CAAA0lC,GACA,CAAI,MAAA9/B,EAAA,CAEJ,CACA,CAcA,SAAAwgC,GACA,CAAIC,kBAAAA,CAAA,CAAAC,eAAAA,CAAA,CAAAC,cAAAA,EAAA,GAA0D,CAC9D,CAAIN,kBAAAA,CAAA,EAAoB,EAAI,EAG5B,IAAAP,EAAAD,GAAA,CACAO,QAdAV,GAYAe,GAZA,UAAAC,EAYAA,GAZA,SAeAL,kBAAAA,CACA,GAMA,OAJAM,GACAL,GAAAR,GAGAA,CACA,CAgCA,SAAAc,GACAC,CAAA,CACAC,CAAA,CACAC,EAAA,KAAA/vB,IAAA,SAGA,OAAA6vB,GAAAC,KAAAxoC,IAAAwoC,GAAAA,EAAA,GAKA,IAAAA,GAIAD,EAAAC,GAAAC,CACA,CAKA,SAAAC,GACAlB,CAAA,CACA,CACAmB,kBAAAA,CAAA,CACAC,kBAAAA,CAAA,CACAH,WAAAA,EAAA/vB,KAAAD,GAAA,GACG,EAEH,OAEA6vB,GAAAd,EAAAG,OAAA,CAAAgB,EAAAF,IAGAH,GAAAd,EAAAI,YAAA,CAAAgB,EAAAH,EAEA,CAGA,SAAAI,GACArB,CAAA,CACA,CAAIoB,kBAAAA,CAAA,CAAAD,kBAAAA,CAAA,CAAsC,UAG1CD,GAAAlB,EAAA,CAAmCoB,kBAAAA,EAAAD,kBAAAA,CAAA,IAKnCnB,CAAAA,WAAAA,EAAAM,OAAA,EAAAN,IAAAA,EAAAK,SAAA,CAKA,CAMA,SAAAiB,GACA,CACAF,kBAAAA,CAAA,CACAD,kBAAAA,CAAA,CACAZ,kBAAAA,CAAA,CACA,CAGAgB,CAAA,EAEA,IAAAC,EAAAD,EAAAV,aAAA,EAAAY,WAhGA,IAAA/B,KACA,YAGA,IAEA,IAAAgC,EAAApqC,EAAAqoC,cAAA,CAAAgC,OAAA,CAAAlqC,GAEA,IAAAiqC,EACA,YAGA,IAAAE,EAAAvnC,KAAAwnC,KAAA,CAAAH,GAIA,OAFAtG,IAAAO,GAAAM,QAAA,6BAEA8D,GAAA6B,EACA,CAAI,MAAA1hC,EAAA,CACJ,WACA,CACA,WA+EA,EAKAmhC,GAAAG,EAAA,CAA+CJ,kBAAAA,EAAAD,kBAAAA,CAAA,IAI/C/F,IAAAO,GAAAM,QAAA,8DACAyE,GAAAa,EAAA,CAAyChB,kBAAAiB,EAAAplC,EAAA,IAJzColC,GALApG,IAAAO,GAAAM,QAAA,yBACAyE,GAAAa,EAAA,CAA2ChB,kBAAAA,CAAA,GAS3C,CAcA,SAAAuB,GAAA3O,CAAA,CAAA/e,CAAA,CAAA2X,CAAA,QACA,EAAAgW,GAAA5O,EAAA/e,KAMA4tB,GAAA7O,EAAA/e,EAAA2X,GAEA,GACA,CAoBA,eAAAiW,GACA7O,CAAA,CACA/e,CAAA,CACA2X,CAAA,EAEA,IAAUkW,YAAAA,CAAA,EAAc9O,EAExB,IAAA8O,GAAAA,EAAA9E,eAAA,GAAApR,EACA,YAGA,IAAAmW,EAAA/O,WAAAA,EAAAgP,aAAA,CAEA,IACApW,GAAAmW,GACAD,EAAAtE,KAAA,GAGA5R,IACAkW,EAAA/E,WAAA,IACA+E,EAAA9E,eAAA,KAGA,IAAAiF,EAAAjP,EAAAkP,UAAA,GAEAC,EAAAC,SA0DAnuB,CAAA,CACAsV,CAAA,EAEA,IACA,sBAAAA,GAhIAtV,EAAA3W,IAAA,GAAAyY,GAAAwW,MAAA,CAiIA,OAAAhD,EAAAtV,EAEA,CAAI,MAAAta,EAAA,CAGJ,OAFAshC,IACAO,GAAAK,SAAA,CAAAliC,EAAA,sFACA,IACA,CAEA,OAAAsa,CACA,EAxEAA,EAAAguB,EAAAI,uBAAA,EAEA,IAAAF,EACA,OAGA,aAAAL,EAAA5E,QAAA,CAAAiF,EACA,CAAI,MAAAxoC,EAAA,CACJ,IAAA2oC,EAAA3oC,GAAAA,aAAAgjC,GAGA,GAAA2F,GAAAP,EAKA,OAHAD,EAAAtE,KAAA,GACAsE,EAAA9E,eAAA,IAEA,KAGAhK,EAAAuP,eAAA,CAAA5oC,GAEA,MAAAq5B,EAAAwP,IAAA,EAAwBC,OAZxBH,EAAA,iCAYwB,GAExB,IAAAI,EAAmB,GAAAC,EAAAC,EAAA,IAEnBF,GACAA,EAAAG,kBAAA,+BAEA,CACA,CAGA,SAAAjB,GAAA5O,CAAA,CAAA/e,CAAA,EACA,IAAA+e,EAAA8O,WAAA,EAAA9O,EAAA8P,QAAA,KAAA9P,EAAAsE,SAAA,GACA,SAGA,IAAAyL,EAAAnQ,GAAA3e,EAAA+X,SAAA,QAMA,CAAA+W,CAAAA,EAAA/P,EAAAgQ,QAAA,CAAAC,gBAAA,CAAAlyB,KAAAD,GAAA,OAKAiyB,CAAAA,EAAA/P,EAAA5pB,UAAA,GAAA85B,gBAAA,CAAAlQ,EAAAkP,UAAA,GAAAlB,iBAAA,IACA/F,IACAO,GAAAM,QAAA,kCAAuDiH,EAAA,sCAAe,GACtE,IAIA,CAyBA,SAAAI,GAAAlvB,CAAA,EACA,MAAAA,gBAAAA,EAAA3W,IAAA,CASA,SAAA8lC,GAAAnvB,CAAA,EACA,MAAAA,aAAAA,EAAA3W,IAAA,CA2NA,SAAA+lC,GAAApQ,CAAA,EACA,QAAAA,EAAAC,QAAA,CAsBA,SAAAoQ,KAEA,IAAAC,EAAc,GAAAZ,EAAAa,EAAA,IAAeC,qBAAA,GAAAF,GAAA,CAC7BA,GACA,OAAAA,EAAAG,SAAA,CAIA,IAAAC,EAAqB,GAAAC,EAAAC,EAAA,IACrB,GAAAF,EAAA,CACA,IAAAJ,EAAgB,GAAAO,EAAAC,EAAA,EAAiCJ,EACjD,UAAAD,SAAA,CAEA,CAkIA,SAAAM,GACAhR,CAAA,CACA3M,CAAA,EAEA,OAAAA,EAAA7V,GAAA,GAAwBlT,KAAAA,CAAA,CAAAwrB,MAAAA,CAAA,CAAAC,IAAAA,CAAA,CAAA3pB,KAAAA,CAAA,CAAA2K,KAAAA,CAAA,CAA8B,IACtD,IAAAw0B,EAAAvL,EAAAM,iBAAA,EACAh2B,KAAAyY,GAAAwW,MAAA,CACAP,UAAAlD,EACA/e,KAAA,CACAwpB,IAAA,kBACA5Z,QAAA,CACA1hB,GAAAqF,EACA2mC,YAAA7kC,EACA8kC,eAAApb,EACAqb,aAAApb,EACAhf,KAAAA,CACA,CACA,CACA,GAGA,uBAAAw0B,EAAAlB,QAAAC,OAAA,OAAAiB,CACA,EACA,CA2DA,SAAA6F,GACApR,CAAA,CACAtT,CAAA,MAZAhhB,EAcAs0B,EAAAsE,SAAA,IAIA5X,OAAAA,IAlBAhhB,EAsBAghB,EAAAtgB,IAAA,CApBA67B,CAAAA,CAAAA,KAAAjI,EAAAkP,UAAA,GAAAmC,YAAA,CAAAnI,cAAA,GAIS,GAAAoI,EAAAC,CAAA,EAAkB7lC,EAAM,GAAAikC,EAAAC,EAAA,MAoBjC5P,EAAAK,SAAA,MACA2Q,GAAAhR,EAAA,CAAAtT,EAAA,EAIA,KAEA,CAGA,SAAA8kB,GAAA9xB,CAAA,EACA,IAAAA,EACA,OAGA,IAAA+xB,EAAA,IAAAC,YAEA,IACA,oBAAAhyB,EACA,OAAA+xB,EAAAE,MAAA,CAAAjyB,GAAA1a,MAAA,CAGA,GAAA0a,aAAAkyB,gBACA,OAAAH,EAAAE,MAAA,CAAAjyB,EAAA3Z,QAAA,IAAAf,MAAA,CAGA,GAAA0a,aAAAmyB,SAAA,CACA,IAAAC,EAAAC,GAAAryB,GACA,OAAA+xB,EAAAE,MAAA,CAAAG,GAAA9sC,MAAA,CAGA,GAAA0a,aAAAsyB,KACA,OAAAtyB,EAAAuJ,IAAA,CAGA,GAAAvJ,aAAAuyB,YACA,OAAAvyB,EAAAwyB,UAAA,CAII,MAAAnlC,EAAA,CAEJ,CAGA,CAGA,SAAAolC,GAAAC,CAAA,EACA,IAAAA,EACA,OAGA,IAAAnpB,EAAAopB,SAAAD,EAAA,IACA,OAAA1iB,MAAAzG,GAAA5jB,KAAAA,EAAA4jB,CACA,CAGA,SAAAqpB,GAAA5yB,CAAA,EACA,IACA,oBAAAA,EACA,OAAAA,EAAA,CAGA,GAAAA,aAAAkyB,gBACA,OAAAlyB,EAAA3Z,QAAA,IAGA,GAAA2Z,aAAAmyB,SACA,OAAAE,GAAAryB,GAAA,CAGA,IAAAA,EACA,OAAAra,KAAAA,EAAA,CAEI,MAAAsB,EAAA,CAEJ,OADAshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,2BAAA+Y,GACA,CAAAra,KAAAA,EAAA,oBAKA,OAFA4iC,IAAAO,GAAAiB,IAAA,8CAAA/pB,GAEA,CAAAra,KAAAA,EAAA,yBAIA,SAAAktC,GACA9I,CAAA,CACA+I,CAAA,EAEA,IAAA/I,EACA,OACAgJ,QAAA,GACAxpB,KAAA5jB,KAAAA,EACAqtC,MAAA,CACAC,SAAA,CAAAH,EAAA,CAEA,EAGA,IAAAI,EAAA,CAAoB,GAAAnJ,EAAAiJ,KAAA,EACpBG,EAAAD,EAAAD,QAAA,KAIA,OAHAC,EAAAD,QAAA,KAAAE,EAAAL,EAAA,CAEA/I,EAAAiJ,KAAA,CAAAE,EACAnJ,CACA,CAGA,SAAAqJ,GACAxoC,CAAA,CACAyM,CAAA,EAEA,IAAAA,EACA,YAGA,IAAUm6B,eAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAzlC,IAAAA,CAAA,CAAA0/B,OAAAA,CAAA,CAAAlF,WAAAA,CAAA,CAAA6M,QAAAA,CAAA,CAAAxH,SAAAA,CAAA,EAA2Ex0B,EAerF,MAbA,CACAzM,KAAAA,EACAwrB,MAAAob,EAAA,IACAnb,IAAAob,EAAA,IACA/kC,KAAAV,EACAqL,KAAU,GAAAgrB,EAAAiR,EAAA,EAAiB,CAC3B5H,OAAAA,EACAlF,WAAAA,EACA6M,QAAAA,EACAxH,SAAAA,CACA,EACA,CAGA,CAGA,SAAA0H,GAAAC,CAAA,EACA,OACAT,QAAA,GACAxpB,KAAAiqB,EACAR,MAAA,CACAC,SAAA,gBAEA,CACA,CAGA,SAAAQ,GACAV,CAAA,CACAS,CAAA,CACAxzB,CAAA,EAEA,IAAAwzB,GAAArtC,IAAAA,OAAAwD,IAAA,CAAAopC,GAAAztC,MAAA,CACA,OAGA,IAAAkuC,EACA,OACAT,QAAAA,CACA,EAGA,IAAA/yB,EACA,OACA+yB,QAAAA,EACAxpB,KAAAiqB,CACA,EAGA,IAAAzJ,EAAA,CACAgJ,QAAAA,EACAxpB,KAAAiqB,CACA,EAEA,CAAUxzB,KAAA0zB,CAAA,CAAAT,SAAAA,CAAA,EAAiCU,SA8B3C3zB,CAAA,EAGA,IAAAA,GAAA,iBAAAA,EACA,OACAA,KAAAA,CACA,EAGA,IAAA4zB,EAAA5zB,EAAA1a,MAAA,CAljNA,KAmjNAuuC,EAAAC,SAkCAzoC,CAAA,EACA,IAAA0oC,EAAA1oC,CAAA,IACA2oC,EAAA3oC,CAAA,CAAAA,EAAA/F,MAAA,IAGA,YAAAyuC,GAAAC,MAAAA,GAAAD,MAAAA,GAAyDC,MAAAA,CACzD,EAxCAh0B,GAEA,GAAA4zB,EAAA,CACA,IAAAK,EAAAj0B,EAAAjR,KAAA,GAtjNA,aAwjNA,EACA,CACAiR,KAAAi0B,EACAhB,SAAA,0BAIA,CACAjzB,KAAA,GAAei0B,EAAc,GAC7BhB,SAAA,mBAEA,CAEA,GAAAY,EACA,IAEA,OACA7zB,KAFAxY,KAAAwnC,KAAA,CAAAhvB,EAGA,CACA,CAAM,MAAAhO,EAAA,CAEN,CAGA,OACAgO,KAAAA,CACA,CACA,EAxE2CA,GAQ3C,OAPA+pB,EAAA/pB,IAAA,CAAA0zB,EACAT,GAAAA,EAAA3tC,MAAA,IACAykC,CAAAA,EAAAiJ,KAAA,EACAC,SAAAA,CACA,GAGAlJ,CACA,CAGA,SAAAmK,GAAAnB,CAAA,CAAAoB,CAAA,EACA,OAAAhuC,OAAAwtB,OAAA,CAAAof,GAAAqB,MAAA,EAAAC,EAAA,CAAAvrB,EAAA1jB,EAAA,IACA,IAAAugC,EAAA7c,EAAAhe,WAAA,GAKA,OAHAqpC,EAAAptC,QAAA,CAAA4+B,IAAAoN,CAAA,CAAAjqB,EAAA,EACAurB,CAAAA,CAAA,CAAA1O,EAAA,CAAAvgC,CAAA,EAEAivC,CACA,EAAG,GACH,CAEA,SAAAhC,GAAAiC,CAAA,EAIA,WAAApC,gBAAAoC,GAAAjuC,QAAA,EACA,CAuDA,SAAAkuC,GAAAvoC,CAAA,CAAAwoC,CAAA,EACA,IAAAC,EAAAC,SAMA1oC,CAAA,CAAA2oC,EAAAlwC,EAAAmI,QAAA,CAAA+nC,OAAA,EAEA,GAAA3oC,EAAA8D,UAAA,aAAA9D,EAAA8D,UAAA,cAAA9D,EAAA8D,UAAA,CAAArL,EAAA0H,QAAA,CAAAkC,MAAA,EACA,OAAArC,EAEA,IAAA4oC,EAAA,IAAA3oC,IAAAD,EAAA2oC,GAGA,GAAAC,EAAAvmC,MAAA,OAAApC,IAAA0oC,GAAAtmC,MAAA,CACA,OAAArC,EAGA,IAAAyoC,EAAAG,EAAAltC,IAAA,OAGA,CAAAsE,EAAAikB,QAAA,OAAAwkB,EAAAxkB,QAAA,MACAwkB,EAAA1lC,KAAA,OAGA0lC,CACA,EA1BAzoC,GAEA,MAAS,GAAA6oC,EAAAC,EAAA,EAAwBL,EAAAD,EACjC,CA6BA,eAAAO,GACAxU,CAAA,CACAyU,CAAA,CACAjiC,CAAA,EAIA,IACA,IAAAsE,EAAA,MAAA49B,GAAA1U,EAAAyU,EAAAjiC,GAGAia,EAAAomB,GAAA,iBAAA/7B,GACAq6B,GAAA3+B,EAAAutB,MAAA,CAAAtT,EACA,CAAI,MAAA/lB,EAAA,CACJshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,qCACA,CACA,CA0BA,eAAAguC,GACA1U,CAAA,CACAyU,CAAA,CACAjiC,CAAA,EAEA,IAAAqL,EAAAC,KAAAD,GAAA,GACA,CAAUozB,eAAAA,EAAApzB,CAAA,CAAAqzB,aAAAA,EAAArzB,CAAA,EAA2C42B,EAErD,CACAhpC,IAAAA,CAAA,CACA0/B,OAAAA,CAAA,CACAwJ,YAAA1O,EAAA,EACA2O,kBAAAC,CAAA,CACAC,mBAAAC,CAAA,CACA,CAAI/U,EAAAlpB,IAAA,CAEJk+B,EACAhB,GAAAvoC,EAAA+G,EAAAyiC,sBAAA,IAAAjB,GAAAvoC,EAAA+G,EAAA0iC,qBAAA,EAOA,OACAjE,eAAAA,EACAC,aAAAA,EACAzlC,IAAAA,EACA0/B,OAAAA,EACAlF,WAAAA,EACA6M,QAXAkC,EACAG,SAgBA,CAAIC,qBAAAA,CAAA,CAAAC,sBAAAA,CAAA,CAA6C,CACjDhkB,CAAA,CACAwjB,CAAA,EAEA,IAAArC,EAAAnhB,EAgIA,IAAAikB,EAAAvwC,MAAA,mBAAAuwC,CAAA,IACAC,GAAAD,CAAA,IAjIAD,GAoIAC,IAAAA,EAAAvwC,MAAA,CACAwwC,GAAAD,CAAA,IArIAD,GAwIA,GAxIA,GAEA,IAAAD,EACA,OAAAlC,GAAAV,EAAAqC,EAAAzvC,KAAAA,GAKA,IAAAowC,EAAAjD,EAAA,CAAAF,GADAoD,GAAApkB,IAEAva,EAAAo8B,GAAAV,EAAAqC,EAAAW,UAEA,EACAlD,GAAAx7B,EAAAy7B,GAGAz7B,CACA,EApCAtE,EAAAiiC,EAAApjB,KAAA,CAAAwjB,GACA7B,GAAA6B,GAUAvJ,SATA,MAAAoK,GAAAV,EAAAxiC,EAAAiiC,EAAAnJ,QAAA,CAAAyJ,EAUA,CACA,CA0BA,eAAAW,GACAV,CAAA,CACA,CACAI,qBAAAA,CAAA,CACAO,uBAAAA,CAAA,CACG,CACHrK,CAAA,CACAyJ,CAAA,EAEA,IAAAC,GAAAD,KAAA3vC,IAAA2vC,EACA,OAAA/B,GAAA+B,GAGA,IAAAvC,EAAAlH,EAAAsK,GAAAtK,EAAAkH,OAAA,CAAAmD,GAAA,GAEA,IAAArK,GAAA,CAAA8J,GAAAL,KAAA3vC,IAAA2vC,EACA,OAAA7B,GAAAV,EAAAuC,EAAA3vC,KAAAA,GAGA,IAAAywC,EAAAtD,EAAA,OAAAuD,GAAAxK,GACA7e,EAAAspB,SAgBAF,CAAA,CACA,CACAT,qBAAAA,CAAA,CACAL,iBAAAA,CAAA,CACAC,eAAAA,CAAA,CACAxC,QAAAA,CAAA,CACA,EAIA,IACA,IAAAxpB,EACA6sB,GAAAA,EAAA9wC,MAAA,EAAAgwC,KAAA3vC,IAAA2vC,EAAAxD,GAAAsE,GAAAd,EAEA,IAAAC,EACA,OAAAhC,GAAAhqB,GAGA,GAAAosB,EACA,OAAAlC,GAAAV,EAAAxpB,EAAA6sB,GAGA,OAAA3C,GAAAV,EAAAxpB,EAAA5jB,KAAAA,EACA,CAAI,MAAAsB,EAAA,CAGJ,OAFAshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,qCAEAwsC,GAAAV,EAAAuC,EAAA3vC,KAAAA,EACA,CACA,EA5CAywC,EAAA,CACAT,qBAAAA,EAEAL,iBAAAA,EACAC,eAAAA,EACAxC,QAAAA,CACA,UAEA,EACAF,GAAA7lB,EAAA8lB,GAGA9lB,CACA,CAiCA,eAAAqpB,GAAAxK,CAAA,EACA,IAAA0K,EAAAC,SA+EA3K,CAAA,EACA,IAEA,OAAAA,EAAA4K,KAAA,EACA,CAAI,MAAAxvC,EAAA,CAEJshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,gCACA,CACA,EAvFA4kC,GAEA,IAAA0K,EACA,OAAA5wC,KAAAA,EAAA,oBAGA,IAEA,OADA,MAwFA,IAAAglC,QAAA,CAAAC,EAAAU,KACA,IAAAptB,EAAoB,GAAAqmB,EAAAC,EAAA,EAAY,IAAA8G,EAAA,0DAEhCoL,GA3FAH,GA4FArK,IAAA,CACAyK,GAAA/L,EAAA+L,GACA5G,GAAAzE,EAAAyE,IAEA6G,OAAA,KAAAhU,aAAA1kB,GACA,GAhGA,CACI,MAAAjX,EAAA,CACJ,GAAAA,aAAAijC,OAAAjjC,EAAA6xB,OAAA,CAAAhqB,OAAA,eAEA,OADAy5B,IAAAO,GAAAnwB,IAAA,8CACA,CAAAhT,KAAAA,EAAA,sBAIA,OADA4iC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,yCACA,CAAAtB,KAAAA,EAAA,oBAEA,CAEA,SAAAqwC,GAAAH,EAAA,IAEA,GAAAA,IAAAA,EAAAvwC,MAAA,mBAAAuwC,CAAA,IAIA,YAAA71B,IAAA,CAGA,SAAAm2B,GAAApD,CAAA,CAAAoB,CAAA,EACA,IAAA0C,EAAA,GAQA,OANA1C,EAAApqC,OAAA,CAAA2oC,IACAK,EAAAtpC,GAAA,CAAAipC,IACAmE,CAAAA,CAAA,CAAAnE,EAAA,CAAAK,EAAAtpC,GAAA,CAAAipC,EAAA,CAEA,GAEAmE,CACA,CAcA,SAAAf,GACAlkB,CAAA,CACAuiB,CAAA,EAEA,IAAAviB,EACA,SAGA,IAAAmhB,EAAAnhB,EAAAmhB,OAAA,QAEA,EAIAA,aAAA+D,QACAX,GAAApD,EAAAoB,GAIAxtC,MAAAm0B,OAAA,CAAAiY,GACA,GAGAmB,GAAAnB,EAAAoB,GAZA,EAaA,CA8BA,eAAAuC,GAAA7K,CAAA,EAGA,aAAAA,EAAA1gC,IAAA,EACA,CAMA,eAAA4rC,GACAxW,CAAA,CACAyU,CAAA,CACAjiC,CAAA,EAEA,IACA,IAAAsE,EAAA2/B,SAuCAzW,CAAA,CACAyU,CAAA,CACAjiC,CAAA,EAEA,IAAAqL,EAAAC,KAAAD,GAAA,GACA,CAAUozB,eAAAA,EAAApzB,CAAA,CAAAqzB,aAAAA,EAAArzB,CAAA,CAAAwT,MAAAA,CAAA,CAAAqlB,IAAAA,CAAA,EAAuDjC,EAEjE,CACAhpC,IAAAA,CAAA,CACA0/B,OAAAA,CAAA,CACAwJ,YAAA1O,EAAA,EACA2O,kBAAAC,CAAA,CACAC,mBAAAC,CAAA,CACA,CAAI/U,EAAAlpB,IAAA,CAEJ,IAAArL,EACA,YAGA,IAAAirC,GAAA,CAAA1C,GAAAvoC,EAAA+G,EAAAyiC,sBAAA,GAAAjB,GAAAvoC,EAAA+G,EAAA0iC,qBAAA,GACA,IAAApC,EAAAE,GAAA6B,GAEA,OACA5D,eAAAA,EACAC,aAAAA,EACAzlC,IAAAA,EACA0/B,OAAAA,EACAlF,WAAAA,EACA6M,QAAAA,EACAxH,SARA0H,GAAA+B,EASA,CACA,CAEA,IAAA4B,EAAAD,CAAA,CAAsBE,EAAAC,EAAmB,EACzCxB,EAAAsB,EACAhD,GAAAgD,EAAAG,eAAA,CAAAtkC,EAAA6iC,qBAAA,EACA,GACAM,EAAAhC,GAAAoD,SAmBAL,CAAA,EACA,IAAAlE,EAAAkE,EAAAM,qBAAA,UAEA,EAIAxE,EAAAzrC,KAAA,SAAA8sC,MAAA,EAAAoD,EAAAC,KACA,IAAA3uB,EAAA1jB,EAAA,CAAAqyC,EAAAnwC,KAAA,OAIA,OAHAlC,GACAoyC,CAAAA,CAAA,CAAA1uB,EAAAhe,WAAA,IAAA1F,CAAA,EAEAoyC,CACA,EAAG,IATH,EAUA,EAjCAP,GAAAlkC,EAAAmjC,sBAAA,EAEA,CAAAwB,EAAAC,EAAA,CAAA5kC,EAAA4iC,oBAAA,CAAA/C,GAAAhhB,GAAA,CAAAjsB,KAAAA,EAAA,CACA,CAAAiyC,EAAAC,EAAA,CAAA9kC,EAAA4iC,oBAAA,CAAAmC,SAgCAb,CAAA,EAEA,IAAAc,EAAA,GAEA,IACA,OAAAd,EAAAe,YAAA,EACI,MAAA3qC,EAAA,CACJ0qC,EAAAnwC,IAAA,CAAAyF,EACA,CAGA,IACA,OAAA4qC,SAsBAj4B,CAAA,CACAk4B,CAAA,EAEA,IACA,oBAAAl4B,EACA,OAAAA,EAAA,CAGA,GAAAA,aAAAtL,SACA,OAAAsL,EAAAA,IAAA,CAAAm4B,SAAA,EAGA,GAAAD,SAAAA,GAAAl4B,GAAA,iBAAAA,EACA,OAAAxY,KAAAC,SAAA,CAAAuY,GAAA,CAGA,IAAAA,EACA,OAAAra,KAAAA,EAAA,CAEI,MAAAsB,EAAA,CAEJ,OADAshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,2BAAA+Y,GACA,CAAAra,KAAAA,EAAA,oBAKA,OAFA4iC,IAAAO,GAAAiB,IAAA,8CAAA/pB,GAEA,CAAAra,KAAAA,EAAA,0BAhDAsxC,EAAApL,QAAA,CAAAoL,EAAAiB,YAAA,CACA,CAAI,MAAA7qC,EAAA,CACJ0qC,EAAAnwC,IAAA,CAAAyF,EACA,CAIA,OAFAk7B,IAAAO,GAAAnwB,IAAA,sCAAAo/B,GAEA,CAAApyC,KAAAA,EAAA,EAnDAsxC,GAAA,CAAAtxC,KAAAA,EAAA,CAEA0tC,EAAAI,GAAAmC,EAAAR,EAAAsC,GACA7L,EAAA4H,GAAAyC,EAAAZ,EAAAsC,GAEA,OACApG,eAAAA,EACAC,aAAAA,EACAzlC,IAAAA,EACA0/B,OAAAA,EACAlF,WAAAA,EACA6M,QAAAsE,EAAA9E,GAAAQ,EAAAsE,GAAAtE,EACAxH,SAAAgM,EAAAhF,GAAAhH,EAAAgM,GAAAhM,CACA,CACA,EA7FAtL,EAAAyU,EAAAjiC,GAGAia,EAAAomB,GAAA,eAAA/7B,GACAq6B,GAAA3+B,EAAAutB,MAAA,CAAAtT,EACA,CAAI,MAAA/lB,EAAA,CACJshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,mCACA,CACA,CAsUA,eAAAmxC,GAAA9X,CAAA,EAEA,IACA,OAAAqK,QAAAiC,GAAA,CACA0E,GAAAhR,EAAA,CAEA+X,SASAC,CAAA,EACA,IAAUC,gBAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,eAAAA,CAAA,EAAmDH,EAG7Dha,EAAAjgB,KAAAD,GAAA,OACA,OACAxT,KAAA,SACA8B,KAAA,SACA0pB,MAAAkI,EACAjI,IAAAiI,EACAjnB,KAAA,CACAqhC,OAAA,CACAH,gBAAAA,EACAC,gBAAAA,EACAC,eAAAA,CACA,CACA,CACA,CACA,EA3BAh0C,EAAAgjC,WAAA,CAAAiR,MAAA,EACA,EAEA,CAAI,MAAAzxC,EAAA,CAEJ,SAEA,CAqFA,IAAA0xC,GAAkBj0C,EAAAC,UAAU,CAAAi0C,SAAA,CAuO5B,eAAAC,GAAA,CACA7I,OAAAA,CAAA,CACA8I,MAAAA,CAAA,CACAC,SAAAC,CAAA,CACAz3B,MAAAA,CAAA,CACA,EAQA,IAAA03B,EAAA,CAAsBD,SAAAA,EAAAE,aAJtB,iBAAAlJ,EAAAmJ,aAAA,EAAAnJ,OAAAA,EAAAmJ,aAAA,EAAAxyC,MAAAm0B,OAAA,CAAAkV,EAAAmJ,aAAA,EAEAxzC,KAAAA,EADAQ,OAAAwD,IAAA,CAAAqmC,EAAAmJ,aAAA,CAGsB,EAEtBnJ,EAAA3qB,IAAA,mBAAA9D,EAAA03B,GAEA,IAAAG,EAAA,MAA+B,GAAAC,EAAAC,CAAA,EAC/BtJ,EAAAR,UAAA,GACAjuB,EACA03B,EACAH,EACA9I,EACI,GAAAC,EAAAsJ,EAAA,KAIJ,IAAAH,EACA,WAMAA,CAAAA,EAAAI,QAAA,CAAAJ,EAAAI,QAAA,eAGA,IAAAC,EAAAzJ,EAAA0J,cAAA,GACA,CAAUhtC,KAAAA,CAAA,CAAAitC,QAAAA,CAAA,EAAgB,GAAAF,EAAAG,GAAA,KAQ1B,OANAR,EAAAQ,GAAA,EACA,GAAAR,EAAAQ,GAAA,CACAltC,KAAAA,GAAA,4BACAitC,QAAAA,GAAA,OACA,EAEAP,CACA,CAKA,eAAAS,GAAA,CACAC,cAAAA,CAAA,CACAf,SAAAA,CAAA,CACAvL,UAAAuM,CAAA,CACAC,aAAAA,CAAA,CACA1gB,UAAAA,CAAA,CACA6T,QAAAA,CAAA,CACC,MAjHD8M,MAmMApO,EAjFA,IAAAqO,EAAAC,SA1FA,CACAL,cAAAA,CAAA,CACA/G,QAAAA,CAAA,CACA,MAGAqH,EAGA,IAAAC,EAAA,GAA2B7yC,KAAAC,SAAA,CAAAsrC,GAAA;AAC3B,EAEA,oBAAA+G,EACAM,EAAA,GAA6BC,EAAc,EAAEP,EAAc,MACvD,CAGJ,IAAAQ,EAAAC,IAFAvI,cAEAC,MAAA,CAAAoI,GAGAD,CADAA,EAAA,IAAAplB,WAAAslB,EAAAh1C,MAAA,CAAAw0C,EAAAx0C,MAAA,GACAgF,GAAA,CAAAgwC,GACAF,EAAA9vC,GAAA,CAAAwvC,EAAAQ,EAAAh1C,MAAA,CACA,CAEA,OAAA80C,CACA,EAiEA,CACAN,cAAAA,EACA/G,QAAA,CACAgH,WAAAA,CACA,CACA,GAEA,CAAUvF,KAAAA,CAAA,CAAAgG,SAAAA,CAAA,CAAAC,SAAAA,CAAA,CAAAjK,iBAAAA,CAAA,EAA6CwJ,EAEvDhK,EAAiB,GAAAC,EAAAC,EAAA,IACjB4I,EAAgB,GAAA7I,EAAAa,EAAA,IAChB4J,EAAA1K,GAAAA,EAAA2K,YAAA,GACAC,EAAA5K,GAAAA,EAAA6K,MAAA,GAEA,IAAA7K,GAAA,CAAA0K,GAAA,CAAAE,GAAA,CAAAzN,EAAAM,OAAA,CACA,MAAW,GAAAqN,EAAAC,EAAA,EAAmB,IAG9B,IAAAC,EAAA,CACApwC,KA9pPA,eA+pPAqwC,uBAAAzK,EAAA,IACAlX,UAAAA,EAAA,IACA4hB,UAAAV,EACAW,UAAAV,EACAjG,KAAAA,EACAxD,UAAA+H,EACAgB,WAAAA,EACAqB,YAAAjO,EAAAM,OAAA,EAGA4N,EAAA,MAAAxC,GAAA,CAAiDC,MAAAA,EAAA9I,OAAAA,EAAA+I,SAAAA,EAAAx3B,MAAAy5B,CAAA,GAEjD,IAAAK,EAIA,OAFArL,EAAAG,kBAAA,4BAAA6K,GACAzS,IAAAO,GAAAiB,IAAA,6DACW,GAAA+Q,EAAAC,EAAA,EAAmB,GAyC9B,QAAAM,EAAAC,qBAAA,CAEA,IAAAC,GAjMAtB,EAiMAjK,EAAAR,UAAA,GAAAyK,MAAA,CA/LS,GAAAuB,EAAAC,EAAA,EACL,GAAAD,EAAAE,EAAA,EA8LJL,EA9L4C,GAAAG,EAAAG,EAAA,EA8L5CN,GA9L2EpB,EA8L3EW,GA7LA,CACA,EAAShwC,KAAA,gBA4LTywC,EA5L+B,CAC/B,CACA,CACAzwC,KAAA,mBAIAtF,OACA,iBAoLA40C,EApLA,IAAAlI,cAAAC,MAAA,CAoLAiI,GApLA50C,MAAA,CAAAw0C,EAAAx0C,MAAA,EAoLA40C,EAjLA,CACA,GAoLA,IACArO,EAAA,MAAA6O,EAAAkB,IAAA,CAAAL,EACA,CAAI,MAAAnvC,EAAA,CACJ,IAAAnF,EAAA,MAAApC,GAEA,IAGAoC,EAAA40C,KAAA,CAAAzvC,CACA,CAAM,MAAAiB,EAAA,CAEN,CACA,MAAApG,CACA,CAGA,oBAAA4kC,EAAArF,UAAA,EAAAqF,CAAAA,EAAArF,UAAA,MAAAqF,EAAArF,UAAA,OACA,UAAAsV,GAAAjQ,EAAArF,UAAA,EAGA,IAAAuV,EAAqB,GAAAC,EAAAC,EAAA,EAAgB,GAAGpQ,GACxC,GAAM,GAAAmQ,EAAAE,CAAA,EAAaH,EAAA,UACnB,UAAAI,GAAAJ,GAGA,OAAAlQ,CACA,CAKA,MAAAiQ,WAAA5R,MACArhC,YAAA29B,CAAA,EACA,wCAA4CA,EAAW,EACvD,CACA,CAKA,MAAA2V,WAAAjS,MAEArhC,YAAAkzC,CAAA,EACA,wBACA,KAAAA,UAAA,CAAAA,CACA,CACA,CAKA,eAAAK,GACAC,CAAA,CACAC,EAAA,CACAzmB,MAAA,EACA0mB,SAnwPA,GAowPA,CAAG,EAEH,IAAUzC,cAAAA,CAAA,CAAA0C,QAAAA,CAAA,EAAyBH,EAGnC,GAAAvC,EAAAx0C,MAAA,CAIA,IAEA,OADA,MAAAu0C,GAAAwC,GACA,EACA,CAAI,MAAAjwC,EAAA,CACJ,GAAAA,aAAA0vC,IAAA1vC,aAAA+vC,GACA,MAAA/vC,EAcA,GAVI,GAAAy9B,EAAApY,CAAA,EAAU,WACdgrB,YAAAH,EAAAzmB,KAAA,GAGA2mB,GACAA,EAAApwC,GAKAkwC,EAAAzmB,KAAA,EA/xPA,EA+xPA,CACA,IAAA5uB,EAAA,SAAiCpC,EAAA,uBAAuB,GAExD,IAGAoC,EAAA40C,KAAA,CAAAzvC,CACA,CAAQ,MAAAiB,EAAA,CAER,CAEA,MAAApG,CACA,CAKA,OAFAq1C,EAAAC,QAAA,IAAAD,EAAAzmB,KAAA,CAEA,IAAA8U,QAAA,CAAAC,EAAAU,KACM,GAAA/G,EAAAC,EAAA,EAAY,UAClB,IACA,MAAA4X,GAAAC,EAAAC,GACA1R,EAAA,GACA,CAAU,MAAAx+B,EAAA,CACVk/B,EAAAl/B,EACA,CACA,EAAOkwC,EAAAC,QAAA,CACP,EACA,CACA,CAEA,IAAAG,GAAA,aA6DA,OAAAC,GAqDA9zC,YAAA,CACAkK,QAAAA,CAAA,CACA6pC,iBAAAA,CAAA,CACA,CAEA,CAAGD,GAAAv2C,SAAA,CAAAy2C,MAAA,CAAAn3C,IAAA,OAA4Ci3C,GAAAv2C,SAAA,CAAA02C,OAAA,CAAAp3C,IAAA,OAA6Ci3C,GAAAv2C,SAAA,CAAA22C,OAAA,CAAAr3C,IAAA,OAA6Ci3C,GAAAv2C,SAAA,CAAA42C,OAAA,CAAAt3C,IAAA,OAA6Ci3C,GAAAv2C,SAAA,CAAA62C,OAAA,CAAAv3C,IAAA,OAA6Ci3C,GAAAv2C,SAAA,CAAA82C,OAAA,CAAAx3C,IAAA,OACnO,KAAA0pC,WAAA,MACA,KAAA+N,kBAAA,IACA,KAAA9V,wBAAA,IACA,KAAAiI,aAAA,WACA,KAAAgB,QAAA,EACAC,iBAz8PA,IA08PAhC,kBAv8PA,GAw8PA,EACA,KAAA6O,aAAA,CAAA/+B,KAAAD,GAAA,GACA,KAAAi/B,UAAA,IACA,KAAAC,SAAA,IACA,KAAAC,oBAAA,IACA,KAAAC,4BAAA,IACA,KAAAC,QAAA,EACAjD,SAAA,IAAAz1B,IACA01B,SAAA,IAAA11B,IACAyvB,KAAA,GACAhE,iBAAAnyB,KAAAD,GAAA,GACAs/B,WAAA,EACA,EAEA,KAAAC,iBAAA,CAAAf,EACA,KAAAgB,QAAA,CAAA7qC,EAEA,KAAA8qC,eAAA,CAAAC,SArqBA9/B,CAAA,CAAAC,CAAA,CAAAlL,CAAA,MACAgrC,EAEAC,EACAC,EAEA,IAAAC,EAAAnrC,GAAAA,EAAAmrC,OAAA,CAAA/mC,KAAAgnC,GAAA,CAAAprC,EAAAmrC,OAAA,CAAAjgC,GAAA,EAEA,SAAAmgC,IAGA,OAFAC,IACAN,EAAA//B,GAEA,CAEA,SAAAqgC,IACAL,KAAAr4C,IAAAq4C,GAAApb,aAAAob,GACAC,KAAAt4C,IAAAs4C,GAAArb,aAAAqb,GACAD,EAAAC,EAAAt4C,KAAAA,CACA,CASA,SAAA24C,IAUA,OATAN,GACApb,aAAAob,GAEAA,EAAc,GAAAzZ,EAAAC,EAAA,EAAY4Z,EAAAngC,GAE1BigC,GAAAD,KAAAt4C,IAAAs4C,GACAA,CAAAA,EAAmB,GAAA1Z,EAAAC,EAAA,EAAY4Z,EAAAF,EAAA,EAG/BH,CACA,CAIA,OAFAO,EAAAC,MAAA,CAAAF,EACAC,EAAAE,KAAA,CArBA,kBACA,KAAA74C,IAAAq4C,GAAAC,KAAAt4C,IAAAs4C,EACAG,IAEAL,CACA,EAiBAO,CACA,EA0nBA,SAAAG,MAAA,QAAAb,QAAA,CAAAc,aAAA,EACAR,QAAA,KAAAN,QAAA,CAAAe,aAAA,GAGA,KAAAC,kBAAA,CAAAC,SAvIAr5C,CAAA,CACAs5C,CAAA,CACAC,CAAA,EAEA,IAAAC,EAAA,IAAAj2C,IAEAk2C,EAAA,IACA,IAAAlxB,EAAA3P,EAqIA,EApIA4gC,EAAAj1C,OAAA,EAAAgH,EAAA+X,KACAA,EAAAiF,GACAixB,EAAAn1C,MAAA,CAAAif,EAEA,EACA,EAEAo2B,EAAA,IACA,IAAAF,EAAAG,MAAA,IAAA/K,MAAA,EAAAvkC,EAAAinB,IAAAjnB,EAAAinB,EAAA,GAGAsoB,EAAA,GAEA,UAAA5xC,KAEA,IAAA4Q,EAAAjH,KAAAkoC,KAAA,CAAAhhC,KAAAD,GAAA,QAMA,GAHA6gC,EAAA7gC,GAGA8gC,KA6GA,IA7GA,CACA,IAAAI,EAAAF,EAEA,OADAA,EAAA,GACAE,EA5CA,YA4CA5C,EACA,CAEA0C,EAAA,GACA,IAAAvpB,EAAAmpB,EAAAv1C,GAAA,CAAA2U,IAAA,EAGA,OAFA4gC,EAAA10C,GAAA,CAAA8T,EAAAyX,EAAA,GAEArwB,KAAAgI,EACA,CACA,EA+FA,CAAA+T,EAAA2X,IAhtEA,GAgtEA,KAAA3X,GA5sEA4tB,GA4sEA,KAAA5tB,EAAA2X,GA/sEAyR,QAAAC,OAAA,OAitEA,EAEA,GAGA,IAAY2U,iBAAAA,CAAA,CAAAC,yBAAAA,CAAA,EAA6C,KAAAhQ,UAAA,GAEzDjO,EAAAge,EACA,CACAxxB,UAAA5W,KAAAC,GAAA,CAp9PA,IAo9PAmoC,GACArhC,QAAAqhC,EACAxd,cAp9PA,IAq9PA9Q,eAAAuuB,EAAAA,EAAA14C,IAAA,QACA,EACAnB,KAAAA,EAOA,GALA47B,GACA,MAAA8D,aAAA,KAAA/D,GAAA,KAAAC,EAAA,EAIAgH,GAAA,CACA,IAAAkX,EAAA1sC,EAAA4+B,YAAA,CACA7I,GAAAO,SAAA,EACAE,kBAAA,EAAAkW,EAAAlW,iBAAA,CACAC,eAAA,EAAAiW,EAAAjW,cAAA,EAEA,CACA,CAGA9yB,YAAA,CACA,YAAA+mC,QAAA,CAIA7Y,WAAA,CACA,YAAAyY,UAAA,CAIAjN,UAAA,CACA,YAAAkN,SAAA,CAMAoC,mBAAA,CACA,MAAA70C,CAAAA,CAAA,KAAA80C,OAAA,CAIAnQ,YAAA,CACA,YAAAoO,QAAA,CAIA/N,gBAAA5oC,CAAA,EACAshC,IAAAO,GAAAK,SAAA,CAAAliC,GACA,KAAA22C,QAAA,CAAApB,OAAA,EACA,KAAAoB,QAAA,CAAApB,OAAA,CAAAv1C,EAEA,CAMA24C,mBAAAlS,CAAA,EACA,IAAYmS,gBAAAA,CAAA,CAAA/R,kBAAAA,CAAA,EAAqC,KAAA8P,QAAA,CAIjDkC,EAAAD,GAAA,GAAA/R,GAAA,EAIA,GAFA,KAAAyP,oBAAA,CAAAuC,GAEAA,GAQA,GAFA,KAAAC,6BAAA,CAAArS,GAEA,MAAAP,OAAA,EAEA5E,IAAAO,GAAAK,SAAA,mDACA,MACA,CAEA,UAAAgE,OAAA,CAAAM,OAAA,GAQA,KAAA6B,aAAA,iBAAAnC,OAAA,CAAAM,OAAA,WAAAN,OAAA,CAAAK,SAAA,oBAEAjF,IAAAO,GAAAM,QAAA,uBAAyD,KAAAkG,aAAA,MAAoB,GAE7E,KAAA0Q,oBAAA,IACA,CASA5pB,OAAA,CACA,QAAAinB,UAAA,mBAAA/N,aAAA,EACA/G,IAAAO,GAAAiB,IAAA,qCACA,MACA,CAEA,QAAAsT,UAAA,kBAAA/N,aAAA,EACA/G,IAAAO,GAAAiB,IAAA,gEACA,MACA,CAEAxB,IAAAO,GAAAM,QAAA,oCAMA,KAAA6W,mBAAA,GAEA,IAAA9S,EAAAsB,GACA,CACAH,kBAAA,KAAAsP,QAAA,CAAAtP,iBAAA,CACAC,kBAAA,KAAA+B,QAAA,CAAA/B,iBAAA,EAEA,CACAP,cAAA,KAAA4P,QAAA,CAAA5P,aAAA,CAEAF,kBAAA,EACAC,eAAA,EACA,EAGA,MAAAZ,OAAA,CAAAA,EAEA,KAAA6S,oBAAA,EACA,CAMAE,gBAAA,CACA,QAAA7C,UAAA,EACA9U,IAAAO,GAAAiB,IAAA,gEACA,MACA,CAEAxB,IAAAO,GAAAM,QAAA,mCAEA,IAAA+D,EAAAsB,GACA,CACAF,kBAAA,KAAA+B,QAAA,CAAA/B,iBAAA,CACAD,kBAAA,KAAAsP,QAAA,CAAAtP,iBAAA,EAEA,CACAN,cAAA,KAAA4P,QAAA,CAAA5P,aAAA,CACAF,kBAAA,EACAC,eAAA,EACA,EAGA,MAAAZ,OAAA,CAAAA,EAEA,KAAAmC,aAAA,UACA,KAAA0Q,oBAAA,EACA,CAOAG,gBAAA,CACA,QA7xBA7f,MACA8f,EA6xBA,IAAAC,EAAA,KAAAV,OAAA,CAEA,KAAAW,cAAA,CAAAtjB,GAAA,CACA,QAAA2gB,iBAAA,CAIA,mBAAArO,aAAA,CACA,CAAcpS,iBA3pQd,GA2pQc,EAQd,KAAA0gB,QAAA,CAAAjM,YAAA,CAAA4O,kBAAA,GAEArjB,iBAAA/lB,KAAAgnC,GAAA,WAAAP,QAAA,CAAAjM,YAAA,CAAA4O,kBAAA,CACA,CAAa,CACbl7B,IAAA,EAlzBAib,EAkzBA,KAjzBA8f,EAAA,GAEA,CAAA7+B,EAAAi/B,KAEA,IAAAlgB,EAAAI,4BAAA,IACA6H,IAAAO,GAAAnwB,IAAA,iDAEA,MACA,CAIA,IAAAugB,EAAAsnB,GAAA,CAAAJ,EACAA,EAAA,GAEA9f,EAAA+E,aAAA,EACAob,SA77FApb,CAAA,CAAA9jB,CAAA,EACA,IASA,GA2BAA,IAAAA,EAAA3W,IAAA,CA1BA,OAGA,IAAYmU,OAAAA,CAAA,EAASwC,EAAAlK,IAAA,CASrB,GARAgqB,GAAAp3B,GAAA,CAAA8U,IACAsmB,EAAA/B,gBAAA,CAAA/hB,EAAA+X,SAAA,EAGAva,IAAAuE,GAAA4W,MAAA,EACAmL,EAAA9B,cAAA,CAAAhiB,EAAA+X,SAAA,EAuBA/X,EAAAlK,IAAA,CAAA0H,MAAA,GAAAuE,GAAA2W,gBAAA,CApBA,CACA,IAAcrvB,KAAAA,CAAA,CAAArB,GAAAA,CAAA,EAAWgY,EAAAlK,IAAA,CACzBlN,EAAA6yB,GAAAhqB,MAAA,CAAAxJ,OAAA,CAAAD,GAEAY,aAAAu2C,aAAA91C,IAAA2Y,GAAAuM,KAAA,EACAuV,EAAA7B,aAAA,CAAAr5B,EAEA,CACA,CAAI,MAAAkD,EAAA,CAEJ,CACA,EA25FAizB,EAAA+E,aAAA,CAAA9jB,GAIA+e,EAAAK,SAAA,MAYA,GANA,WAAAL,EAAAgP,aAAA,EAAApW,GACAoH,EAAAqgB,eAAA,GAKA,CAAA1R,GAAA3O,EAAA/e,EAAA2X,GAEA,SAKA,IAAAA,EACA,SAGA,IAAAiU,EAAA7M,EAAA6M,OAAA,CAeA,GAJAjU,GA8EAoH,EAAA6M,OAAA,EAAA7M,IAAAA,EAAA6M,OAAA,CAAAK,SAAA,EAIAyB,GAlFA3O,EAkFAsgB,SAnCAtgB,CAAA,EACA,IAAAvtB,EAAAutB,EAAAkP,UAAA,GACA,OACA5kC,KAAAyY,GAAAwW,MAAA,CACAP,UAAAjb,KAAAD,GAAA,GACA/G,KAAA,CACAwpB,IAAA,UACA5Z,QAAA,CACA45B,mBAAAvgB,EAAAof,iBAAA,GACA5R,kBAAA/6B,EAAA+6B,iBAAA,CACA+R,gBAAA9sC,EAAA8sC,eAAA,CACAiB,qBAAA/tC,EAAAguC,cAAA,CACAC,cAAAjuC,EAAAiuC,aAAA,CACA1uC,YAAAS,EAAAT,WAAA,CACA8qB,cAAArqB,EAAAqqB,aAAA,CACA2jB,eAAAzgB,EAAAA,EAAA8O,WAAA,EAAA9O,WAAAA,EAAA8O,WAAA,CAAAxkC,IAAA,CACAq2C,qBAAAluC,EAAAyiC,sBAAA,CAAAlwC,MAAA,GACAqwC,qBAAA5iC,EAAA4iC,oBAAA,CACAuL,yBAAAnuC,EAAA6iC,qBAAA,CAAAtwC,MAAA,GACA67C,0BAAApuC,EAAAmjC,sBAAA,CAAA5wC,MAAA,EACA,CACA,CACA,CACA,EAtEAg7B,GAkFA,IA9EAA,WAAAA,EAAAgP,aAAA,EAAAnC,GAAA7M,EAAA8O,WAAA,EACA,IAAAgS,EAAA9gB,EAAA8O,WAAA,CAAArE,oBAAA,GACAqW,IACA7Y,IACAO,GAAAiB,IAAA,+DAAsF,IAAA1rB,KAAA+iC,GAAwB,GAE9GjU,EAAAG,OAAA,CAAA8T,EAEA9gB,EAAAkP,UAAA,GAAAxB,aAAA,EACAL,GAAAR,GAGA,OAQA,EAAAA,KAAAA,EAAAO,iBAAA,GAIA,YAAApN,EAAAgP,aAAA,EAQAhP,EAAAke,KAAA,GAGA,GACA,EACA,GA1GA,GAZA,oBACA3vC,IAAA,KAAA8pC,GAAA0I,SAAA,OACA,aAAAxyC,IAAA,KAAA8pC,GAAA0I,SAAA,OACA1I,IACAA,GAAA2I,cAAA,EACA3I,GAAA2I,cAAA,GAEA,CACAp2B,SAAA,CACA4C,UAAA,EACA,CACA,EAGA,EA2zBA,CACArD,WAAA,KAAA82B,kBAAA,CACA,GAAAlB,EACA,CACA3sC,aAAA2sC,EAAA3sC,YAAA,CACAiqB,iBAAA0iB,EAAA1iB,gBAAA,CACAzS,SAAAm1B,EAAAn1B,QAAA,CACA1X,eAAA6sC,EAAA7sC,cAAA,EAEA,EAAc,EAEd,CAAM,MAAApH,EAAA,CACN,KAAAyjC,eAAA,CAAAzjC,EACA,CACA,CAQAo1C,eAAA,CACA,IAMA,OALA,KAAAlB,cAAA,GACA,KAAAA,cAAA,GACA,KAAAA,cAAA,CAAA36C,KAAAA,GAGA,EACA,CAAM,MAAAyG,EAAA,CAEN,OADA,KAAAyjC,eAAA,CAAAzjC,GACA,EACA,CACA,CAMA,MAAA0jC,KAAA,CAAgB2R,WAAAA,EAAA,GAAA1R,OAAAA,CAAA,EAA6B,EAAI,EACjD,QAAAsN,UAAA,EAMA,KAAAA,UAAA,IAEA,IACA9U,IAAAO,GAAAiB,IAAA,mBAAmDgG,EAAA,iBAA0BA,EAAO,KAAO,GAE3Fa,KAEA,KAAA8Q,gBAAA,GACA,KAAAF,aAAA,GAEA,KAAA3D,eAAA,CAAAU,MAAA,GAGAkD,GACA,WAAAhD,MAAA,EAA4BkD,MAAA,KAI5B,KAAAvS,WAAA,OAAAA,WAAA,CAAAxS,OAAA,GACA,KAAAwS,WAAA,MAjuFAwS,WAQA,GAAA/U,KAIA,IACApoC,EAAAqoC,cAAA,CAAA+U,UAAA,CAAAj9C,EACA,CAAI,MAAAyI,EAAA,CAEJ,CACA,IAhBAizB,IAouFA,CApuFA6M,OAAA,CAAAxnC,KAAAA,CAquFA,CAAM,MAAAyG,EAAA,CACN,KAAAyjC,eAAA,CAAAzjC,EACA,EACA,CAOA01C,OAAA,EACA,KAAAxE,SAAA,GAIA,KAAAA,SAAA,IACA,KAAAkE,aAAA,GAEAjZ,IAAAO,GAAAiB,IAAA,mBACA,CAQAgY,QAAA,CACA,KAAAzE,SAAA,OAAA0E,aAAA,KAIA,KAAA1E,SAAA,IACA,KAAA6C,cAAA,GAEA5X,IAAAO,GAAAiB,IAAA,oBACA,CASA,MAAAkY,0BAAA,CAAqCC,kBAAAA,EAAA,IAA2B,EAAI,EACpE,oBAAA5S,aAAA,CACA,YAAA6S,cAAA,GAGA,IAAAC,EAAA/jC,KAAAD,GAAA,EAEAmqB,CAAAA,IAAAO,GAAAiB,IAAA,iCAMA,WAAAoY,cAAA,GAEA,IAAAE,EAAA,KAAAb,aAAA,GAEAU,GAAAG,GAKA,iBAAA/S,aAAA,GAKA,KAAAA,aAAA,WAGA,KAAAnC,OAAA,GACA,KAAA8S,mBAAA,CAAAmC,GACA,KAAAE,sBAAA,CAAAF,GACA,KAAAG,iBAAA,IAGA,KAAApC,cAAA,GACA,CAUAxf,UAAAjX,CAAA,EAEA,IAAA84B,EAAA94B,GAIA,iBAAA4lB,aAAA,EAMAkT,CAAA,IAAAA,GAMA,KAAA3E,eAAA,EACA,CAOApd,qBAAA,CAKA,GAJA,KAAAwf,mBAAA,GAIA,MAAAK,cAAA,EAGA,SAAA0B,aAAA,GACA,OAIA,KAAAD,MAAA,GACA,MACA,CAGA,KAAArhB,4BAAA,GAEA,KAAA4hB,sBAAA,EACA,CASAG,oBAAA,CACA,KAAAxC,mBAAA,GACA,KAAAqC,sBAAA,EACA,CAKAI,kBAAA,OACA,gBAAApT,aAAA,CACA3E,QAAAC,OAAA,GAGA,KAAAuX,cAAA,EACA,CAKA3D,OAAA,CACA,YAAAX,eAAA,EACA,CAOAsE,gBAAA,CAGA,OAFA,KAAAtE,eAAA,GAEA,KAAAA,eAAA,CAAAW,KAAA,EACA,CAKAmE,aAAA,CACA,KAAA9E,eAAA,CAAAU,MAAA,EACA,CAGAqE,cAAA,CACA,YAAAzV,OAAA,OAAAA,OAAA,CAAA5jC,EAAA,CAWAm3B,8BAAA,CAKA,GACA,KAAA0c,aAAA,EACAnP,GAAA,KAAAmP,aAAA,MAAA9M,QAAA,CAAAC,gBAAA,GACA,KAAApD,OAAA,EACA,iBAAAA,OAAA,CAAAM,OAAA,CACA,CAKA,KAAAqU,KAAA,GACA,MACA,SAIA,KAAAE,aAAA,EAMA,CAOArB,iBAAA,CACA,IAAAkC,EAAA,GAAuBp+C,EAAA0H,QAAA,CAAAE,QAAA,CAAyB,EAAE5H,EAAA0H,QAAA,CAAA22C,IAAA,CAAqB,EAAEr+C,EAAA0H,QAAA,CAAAiyB,MAAA,CAAuB,EAChGpyB,EAAA,GAAmBvH,EAAA0H,QAAA,CAAAkC,MAAA,CAAuB,EAAEw0C,EAAQ,EAEpD,KAAA1F,kBAAA,IACA,KAAA9V,wBAAA,IAGA,KAAA0b,aAAA,GAEA,KAAAtF,QAAA,CAAAC,UAAA,CAAA1xC,EACA,KAAAyxC,QAAA,CAAAjN,gBAAA,CAAAnyB,KAAAD,GAAA,GACA,KAAAq/B,QAAA,CAAAjJ,IAAA,CAAA5sC,IAAA,CAAAoE,EACA,CAMA40B,kBACArf,CAAA,CACA2X,CAAA,CACA,CACA,IAAAqd,EAAA,KAAAqI,kBAAA,CAAAr9B,EAAA2X,GAIA,GAAAqd,IAAAmG,GAAA,CACA,IAAAnc,EAAAkE,GAAA,CACAjE,SAAA,kBACA,GAEA,KAAAG,SAAA,KAEA,CAAAsO,GAAA,MACArkC,KA/7IA,EAg8IA0uB,UAAAiH,EAAAjH,SAAA,IACAjiB,KAAA,CACAwpB,IAAA,aACA5Z,QAAAsZ,EACA+D,OAAA,EACA,CACA,GAEA,CAEA,OAAAiS,CACA,CAMAlS,iBAAA,CACA,IAAA2e,EAAA,KAAAA,cAAA,EAAkD,GAAA9R,EAAAC,EAAA,IAClD8R,EAAAD,GAA2C,GAAA9R,EAAAgS,EAAA,EAAWF,GAGtDjkC,EAAAxJ,CADA,GAAwC,GAAA27B,EAAAiS,EAAA,EAAUF,GAAA5rC,IAAA,KAClD,CAA8B+rC,EAAAC,EAAgC,EAC9D,MAAAtkC,GAAA,mBAAAhY,QAAA,CAAAgY,GAIA,MAAW,GAAAmyB,EAAAiS,EAAA,EAAUF,GAAA1R,WAAA,CAOrByO,sBAAA,CACA,KAAAW,eAAA,GAIA,KAAA2B,sBAAA,GAEA,KAAAlT,WAAA,CAAAkU,SA1lGA,CACAvC,eAAAA,CAAA,CACAwC,UAAAC,CAAA,CACC,EACD,GACAzC,GAEA70C,OAAAu3C,MAAA,CACA,CACA,IAAAvY,EAAAwY,SAWAF,CAAA,EACA,IACA,IAAAD,EAAAC,GAgBA,qBAAAG,kCAAAA,iCAIA,GAHAt2C,WAthBa,IAAAA,EAAA,IAAAilC,KAAA,CAFb,q9TAEa,EAAsB,OAAArmC,IAAA23C,eAAA,CAAAv2C,EAAA,GAuhBnC,EAhBA,IAAAk2C,EACA,MAGAhb,CAAAA,IAAAO,GAAAiB,IAAA,4BAA0DyZ,EAAA,SAA2BA,EAAgB,KAAO,GAC5G,IAAAtY,EAAA,IAAAuY,OAAAF,GACA,WAAApX,GAAAjB,EACA,CAAI,MAAAjkC,EAAA,CACJshC,IAAAO,GAAAK,SAAA,CAAAliC,EAAA,sCAEA,CACA,EA1BAu8C,GAEA,GAAAtY,EACA,OAAAA,CAEA,CAGA,OADA3C,IAAAO,GAAAiB,IAAA,wBACA,IAAAI,EACA,EAwkGA,CACA4W,eAAA,KAAAnD,QAAA,CAAAmD,cAAA,CACAwC,UAAA,KAAA3F,QAAA,CAAA2F,SAAA,GAGA,KAAA7B,gBAAA,GACA,KAAAmC,aAAA,GAGA,KAAAxG,UAAA,IACA,KAAAC,SAAA,IAEA,KAAA6C,cAAA,EACA,CAKAJ,8BAAArS,CAAA,EAGA,IAAAK,EAAA,KAAA6P,QAAA,CAAAiC,eAAA,GAEA1S,EAAAsB,GACA,CACAF,kBAAA,KAAA+B,QAAA,CAAA/B,iBAAA,CACAD,kBAAA,KAAAsP,QAAA,CAAAtP,iBAAA,CACAZ,kBAAAA,CACA,EACA,CACAM,cAAA,KAAA4P,QAAA,CAAA5P,aAAA,CACAF,kBAAA,KAAA8P,QAAA,CAAA9P,iBAAA,CACAC,eAAAA,CACA,EAGA,MAAAZ,OAAA,CAAAA,CACA,CAMA6U,eAAA,CAGA,SAAA7U,OAAA,CACA,SAGA,IAAA2W,EAAA,KAAA3W,OAAA,OAEA,CACAqB,GAAAsV,EAAA,CACAvV,kBAAA,KAAA+B,QAAA,CAAA/B,iBAAA,CACAD,kBAAA,KAAAsP,QAAA,CAAAtP,iBAAA,KAKA,KAAAyV,eAAA,CAAAD,GACA,GAIA,CAOA,MAAAC,gBAAA5W,CAAA,EACA,KAAAkQ,UAAA,GAGA,WAAAvN,IAAA,EAAsBC,OAAA,oBACtB,KAAA6P,kBAAA,CAAAzS,EAAA5jC,EAAA,EACA,CAKAs6C,eAAA,CACA,IACAp/C,EAAAmI,QAAA,CAAA6L,gBAAA,yBAAAurC,uBAAA,EACAv/C,EAAAgU,gBAAA,aAAAwrC,iBAAA,EACAx/C,EAAAgU,gBAAA,cAAAyrC,kBAAA,EACAz/C,EAAAgU,gBAAA,gBAAA0rC,oBAAA,EAEA,KAAA9e,aAAA,EACA,KAAAA,aAAA,CAAAnD,YAAA,GAIA,KAAAsb,4BAAA,GACA4G,SA38CA9jB,CAAA,EAEA,IAAA0P,EAAiB,GAAAC,EAAAC,EAAA,IAEf,GAAAmU,EAAAC,CAAA,EAAsC3f,GAAArE,IACtC,GAAAikB,EAAA10C,CAAA,EAp5BF,IACA,IAAAywB,EAAAsE,SAAA,GACA,OAGA,IAAA5X,EAAAw3B,SAzBA1f,CAAA,EACA,IAAUl+B,KAAAA,CAAA,CAAA69C,GAAAA,CAAA,EAAW3f,EAErB1mB,EAAAC,KAAAD,GAAA,OAEA,OACAxT,KAAA,kBACAwrB,MAAAhY,EACAiY,IAAAjY,EACA1R,KAAA+3C,EACAptC,KAAA,CACA8G,SAAAvX,CACA,CACA,CACA,EAWAk+B,EAEA,QAAA9X,IAKAsT,EAAA5pB,UAAA,GAAA89B,IAAA,CAAA5sC,IAAA,CAAAolB,EAAAtgB,IAAA,EACA4zB,EAAAG,mBAAA,GAEAH,EAAAK,SAAA,MACA2Q,GAo4BkChR,EAp4BlC,CAAAtT,EAAA,EAEA,KAEA,GAi4BA03B,SA3sCApkB,CAAA,EACA,IAAA0P,EAAiB,GAAAC,EAAAC,EAAA,IAEjBF,GAIAA,EAAAxyB,EAAA,uBAAA+iB,GAAAokB,CAGA,SAAArkB,CAAA,CAAAC,CAAA,EACA,IAAAD,EAAAsE,SAAA,KAAA+L,GAAApQ,GACA,OAGA,IAAAvT,EAQA,CACA2jB,GATApQ,IAUA,CAEA,QACA,MAEA,eACA,qBACA,CAAAx5B,QAAA,CAAAw5B,EAAAC,QAAA,GAEAD,EAAAC,QAAA,CAAA1wB,UAAA,QAEA,KAGAywB,YAAAA,EAAAC,QAAA,CACAokB,SAQArkB,CAAA,EAEA,IAAA96B,EAAA86B,EAAAlpB,IAAA,EAAAkpB,EAAAlpB,IAAA,CAAAwtC,SAAA,CAEA,IAAAl+C,MAAAm0B,OAAA,CAAAr1B,IAAAA,IAAAA,EAAAH,MAAA,CACA,OAAAm/B,GAAAlE,GAGA,IAAAukB,EAAA,GAGAC,EAAAt/C,EAAAqY,GAAA,CAAA6tB,IACA,IAAAA,EACA,OAAAA,EAEA,oBAAAA,SACA,EAAArmC,MAAA,CA/iMA,KAgjMAw/C,EAAA,GACA,GAAkBnZ,EAAA58B,KAAA,GAjjMlB,KAijMqD,IAGrD48B,EAEA,oBAAAA,EACA,IACA,IAAAqZ,EAA8B,GAAAlkB,EAAAC,EAAA,EAAS4K,EAAA,GAEvC,GAAAsZ,KADAx9C,SAAA,CAAAu9C,GACA1/C,MAAA,CA1jMA,IA6jMA,OAFAw/C,EAAA,GAEA,GAAoBt9C,KAAAC,SAAA,CAAAu9C,EAAA,QAAAj2C,KAAA,GA7jMpB,KA6jM0F,GAE1F,OAAAi2C,CACA,CAAQ,MAAA33C,EAAA,CAER,CAGA,OAAAs+B,CACA,GAEA,OAAAlH,GAAA,CACA,GAAAlE,CAAA,CACAlpB,KAAA,CACA,GAAAkpB,EAAAlpB,IAAA,CACAwtC,UAAAE,EACA,GAAAD,EAAA,CAA0B9R,MAAA,CAASC,SAAA,4BAAwC,EAAI,CAE/E,EACA,EAlFA1S,GA4BAkE,GA5BAlE,GACAvT,GACAqT,GAAAC,EAAAtT,EAEA,GAZAsT,EAAAC,GACA,EAmsCAD,GACA4kB,SA5FA5kB,CAAA,EACA,IAAA0P,EAAiB,GAAAC,EAAAC,EAAA,IAEjB,IACA,IACAsF,uBAAAA,CAAA,CACAC,sBAAAA,CAAA,CACAE,qBAAAA,CAAA,CACAC,sBAAAA,CAAA,CACAM,uBAAAA,CAAA,CACA,CAAM5V,EAAAkP,UAAA,GAENz8B,EAAA,CACAutB,OAAAA,EACAkV,uBAAAA,EACAC,sBAAAA,EACAE,qBAAAA,EACAC,sBAAAA,EACAM,uBAAAA,CACA,EAEAlG,GACAA,EAAAxyB,EAAA,wBAAA+iB,EAAAyU,IAAAmQ,CAQA,SACApyC,CAAA,CACAwtB,CAAA,CACAyU,CAAA,EAEA,GAAAzU,EAAAlpB,IAAA,CAIA,QAmCA29B,EAIAA,CAtCAoQ,CA2BA,QAAA7kB,EAAAC,QAAA,GAOAwU,EAlCAA,IAmCAA,EAAAiC,GAAA,GA/BAoO,SA5NA9kB,CAAA,CACAyU,CAAA,EAEA,IAAUiC,IAAAA,CAAA,CAAArlB,MAAAA,CAAA,EAAaojB,EAEvB,IAAAiC,EACA,OAGA,IAAAqO,EAAAxT,GAAAlgB,GACA2zB,EAAAtO,EAAAuO,iBAAA,mBACA/S,GAAAwE,EAAAuO,iBAAA,oBACAC,SAmJAzlC,CAAA,CACAk4B,CAAA,EAEA,IACA,IAAAnC,EAAAmC,SAAAA,GAAAl4B,GAAA,iBAAAA,EAAAxY,KAAAC,SAAA,CAAAuY,GAAAA,EACA,OAAA8xB,GAAAiE,EACA,CAAI,MAAA/jC,EAAA,CACJ,MACA,CACA,EA5JAilC,EAAApL,QAAA,CAAAoL,EAAAiB,YAAA,CAEAvyC,MAAAA,IAAA2/C,GACA/kB,CAAAA,EAAAlpB,IAAA,CAAA89B,iBAAA,CAAAmQ,CAAA,EAEA3/C,KAAAA,IAAA4/C,GACAhlB,CAAAA,EAAAlpB,IAAA,CAAAg+B,kBAAA,CAAAkQ,CAAA,CAEA,EAwMAhlB,EAAAyU,GAIA+B,GAAAxW,EAAAyU,EAAAjiC,IAGA2yC,UAoBAnlB,EAAAC,QAAA,GAOAwU,EA3BAA,IA4BAA,EAAAnJ,QAAA,GAxBA8Z,SAlgBAplB,CAAA,CACAyU,CAAA,EAEA,IAAUpjB,MAAAA,CAAA,CAAAia,SAAAA,CAAA,EAAkBmJ,EAG5BsQ,EAAAxT,GADAlgB,EAAAokB,GAAApkB,GAAAjsB,KAAAA,GAGA4/C,EAAA1Z,EAAA4G,GAAA5G,EAAAkH,OAAA,CAAAtpC,GAAA,oBAAA9D,KAAAA,CAEAA,MAAAA,IAAA2/C,GACA/kB,CAAAA,EAAAlpB,IAAA,CAAA89B,iBAAA,CAAAmQ,CAAA,EAEA3/C,KAAAA,IAAA4/C,GACAhlB,CAAAA,EAAAlpB,IAAA,CAAAg+B,kBAAA,CAAAkQ,CAAA,CAEA,EAkfAhlB,EAAAyU,GAIAD,GAAAxU,EAAAyU,EAAAjiC,GAEA,CAAI,MAAA1F,EAAA,CACJk7B,IAAAO,GAAAK,SAAA,CAAA97B,EAAA,0CACA,CACA,GA1CA0F,EAAAwtB,EAAAyU,GAEA,CAAI,MAAAhjC,EAAA,CAEJ,CACA,EAiEAsuB,GAIA,IAAAvB,EAzgCA54B,OAAA4V,MAAA,CACA,CAAAwF,EAAAyzB,IAEA,CAAA1U,EAAAsE,SAAA,IAAAtE,EAAA8P,QAAA,GACA7uB,EAxUAA,iBAAAA,EAAA3W,IAAA,EA8UA,OAAA2W,EAAAqkC,WAAA,CACArkC,GAIA,CA7VAA,EAAA3W,IAAA,EA6VA6lC,GAAAlvB,IAAAmvB,GAAAnvB,GAKA+e,EAAAI,4BAAA,GAOAgQ,GAAAnvB,IAGA+e,EAAAke,KAAA,GACAj9B,EAAAskC,QAAA,CAAAC,QAAA,CAAA9U,SAAA,CAAA1Q,EAAAsiB,YAAA,GAzFAtiB,EAAAG,mBAAA,GACAH,EAAAK,SAAA,KACA,CAAApf,EAAA+X,SAAA,GAQAgH,EAAAM,iBAAA,EACAh2B,KAAAyY,GAAAwW,MAAA,CACAP,UAAA/X,IAAAA,EAAA+X,SAAA,CACAjiB,KAAA,CACAwpB,IAAA,aACA5Z,QAAA,CACAqS,UAAA/X,EAAA+X,SAAA,CACA1uB,KAAA,UACA41B,SAAA,kBACAnpB,KAAA,CACA0uC,WAAAxkC,EAAAy3B,QAAA,CAEA,CACA,CACA,GAEA,KAkEAz3B,IA9HAA,EAAA3W,IAAA,EAAA2W,EAAA4nB,SAAA,EAAA5nB,EAAA4nB,SAAA,CAAAgW,MAAA,EAAA59B,EAAA4nB,SAAA,CAAAgW,MAAA,CAAA75C,MAAA,EAKA0vC,EAAAgR,iBAAA,EAAAhR,EAAAgR,iBAAA,CAAAC,SAAA,EA8HA,CAAA3lB,EAAAkP,UAAA,GAAAmC,YAAA,CAAApI,iBAAA,EACAhB,IAAAO,GAAAod,GAAA,uCAAA3kC,GACA,OAUA4kC,CAzEA,WAAA7lB,EAAAgP,aAAA,EAMA/tB,EAAAuX,OAAA,GAAAj0B,GAKA0c,EAAA4nB,SAAA,GAAA5nB,EAAA3W,IAAA,EAIAmiC,GAAAzM,EAAAkP,UAAA,GAAAqQ,eAAA,GA0DAvf,YAAAA,EAAAgP,aAAA,GAGA/tB,CAAAA,EAAA6kC,IAAA,EAAuB,GAAA7kC,EAAA6kC,IAAA,CAAArN,SAAAzY,EAAAsiB,YAAA,KAGvBrhC,IAlCAqvB,KACArvB,GARAA,EA2CA,CAAMhY,GAAA,WA+8BJ,GAAAsgC,EAAAwc,EAAA,EAAiBtnB,GAGnBiR,IACAA,EAAAxyB,EAAA,mBA9vCA,IACA8iB,EAAAsE,SAAA,KA/FArjB,EAAA3W,IAAA,EAmGA07C,SAIAhmB,CAAA,CAAA/e,CAAA,EACA,IAAAglC,EACAhlC,EAAA4nB,SAAA,EAAA5nB,EAAA4nB,SAAA,CAAAgW,MAAA,EAAA59B,EAAA4nB,SAAA,CAAAgW,MAAA,KAAA59B,EAAA4nB,SAAA,CAAAgW,MAAA,IAAA/5C,KAAA,CACA,iBAAAmhD,GAQAA,CAAAA,EAAAj6C,KAAA,CACA,oGAKAi6C,EAAAj6C,KAAA,sEAQA+zB,GAAAC,EANAmE,GAAA,CACAjE,SAAA,uBACAnpB,KAAA,CACArL,IAAa,GAAAi5B,EAAAuhB,EAAA,GACb,CACA,GAGA,EA0tCAlmB,EAzvCA/e,EACA,GAyvCAyuB,EAAAxyB,EAAA,kBAv0CA,CAAA+D,EAAAklC,KACA,IAAAnmB,EAAAsE,SAAA,MAvBAh6B,IAAA,EAuBA,CAAA6lC,GAAAlvB,GACA,OAGA,IAAAilB,EAAAigB,GAAAA,EAAAjgB,UAAA,CAKA,OAAAA,CAAAA,EAAA,OAAAA,CAAAA,GAAA,MAIA,GAAAiK,GAAAlvB,GAAA,CACAmlC,CAQA,SAAApmB,CAAA,CAAA/e,CAAA,EACA,IAAAolC,EAAArmB,EAAA5pB,UAAA,EAKA6K,CAAAA,EAAAskC,QAAA,EAAAtkC,EAAAskC,QAAA,CAAAe,KAAA,EAAArlC,EAAAskC,QAAA,CAAAe,KAAA,CAAAC,QAAA,EAAAF,EAAAlM,QAAA,CAAAlxB,IAAA,MACAo9B,EAAAlM,QAAA,CAAArwC,GAAA,CAAAmX,EAAAskC,QAAA,CAAAe,KAAA,CAAAC,QAAA,CAEA,GAuyCAvmB,EAxzCA/e,GACA,MACA,CAEAulC,CAeA,SAAAxmB,CAAA,CAAA/e,CAAA,EACA,IAAAolC,EAAArmB,EAAA5pB,UAAA,GAcA,GANA6K,EAAAy3B,QAAA,EAAA2N,EAAAnM,QAAA,CAAAjxB,IAAA,MACAo9B,EAAAnM,QAAA,CAAApwC,GAAA,CAAAmX,EAAAy3B,QAAA,EAKA1Y,WAAAA,EAAAgP,aAAA,GAAA/tB,EAAA6kC,IAAA,GAAA7kC,EAAA6kC,IAAA,CAAArN,QAAA,CACA,OAGA,IAAUgO,oBAAAA,CAAA,EAAsBzmB,EAAAkP,UAAA,GAChC,oBAAAuX,GAAAA,EAAAxlC,EAAA,GAIE,GAAAgjB,EAAAC,EAAA,EAAY,UACd,IAEA,MAAAlE,EAAA2hB,yBAAA,EACA,CAAM,MAAA71C,EAAA,CACNk0B,EAAAuP,eAAA,CAAAzjC,EACA,CACA,EACA,GAqwCAk0B,EApzCA/e,GACA,GAozCAyuB,EAAAxyB,EAAA,iBACA,IAAAu7B,EAAAzY,EAAAsiB,YAAA,GAEA7J,GAAAzY,EAAAsE,SAAA,IAAAtE,YAAAA,EAAAgP,aAAA,EAEAhP,EAAAI,4BAAA,IAEAmQ,CAAAA,EAAAG,SAAA,CAAA+H,CAAA,CAGA,GAEA/I,EAAAxyB,EAAA,aAAAwpC,IACA1mB,EAAA0iB,cAAA,CAAAgE,CACA,GAIAhX,EAAAxyB,EAAA,WAAAwpC,IACA1mB,EAAA0iB,cAAA,CAAAgE,CACA,GAGAhX,EAAAxyB,EAAA,uBAAAypC,EAAAl0C,KACA,IAAAgmC,EAAAzY,EAAAsiB,YAAA,GACA7vC,GAAAA,EAAAm0C,aAAA,EAAA5mB,EAAAsE,SAAA,IAAAmU,GAEAkO,EAAApB,QAAA,EAAAoB,EAAApB,QAAA,CAAAC,QAAA,EACAmB,CAAAA,EAAApB,QAAA,CAAAC,QAAA,CAAA9U,SAAA,CAAA+H,CAAA,CAGA,GAEA,EAw5CA,MAEA,KAAAyE,4BAAA,IAEA,CAAM,MAAApxC,EAAA,CACN,KAAAyjC,eAAA,CAAAzjC,EACA,CAEA,KAAA+6C,2BAAA,CAAAC,SAztHA9mB,CAAA,EACA,SAAA+mB,EAAAvhB,CAAA,EAEAxF,EAAA6c,kBAAA,CAAAp2C,QAAA,CAAA++B,IACAxF,EAAA6c,kBAAA,CAAAv1C,IAAA,CAAAk+B,EAEA,CAEA,SAAAwhB,EAAA,CAAuB3zB,QAAAA,CAAA,CAAS,EAChCA,EAAA5pB,OAAA,CAAAs9C,EACA,CAEA,IAAAE,EAAA,GAcA,MAZA,kCAAAx9C,OAAA,CAAAa,IACA28C,EAAA3/C,IAAA,CAAwB,GAAA4/C,EAAAC,EAAA,EAAoC78C,EAAA08C,GAC5D,GAEAC,EAAA3/C,IAAA,CACI,GAAA4/C,EAAAE,EAAA,EAA4BvgB,GAAAQ,GAAArH,IAC5B,GAAAknB,EAAAG,EAAA,EAA4BxgB,GAAAW,GAAAxH,IAC5B,GAAAknB,EAAA/C,EAAA,EAA4Btd,GAAAgB,GAAA7H,IAC5B,GAAAknB,EAAAI,EAAA,EAA4BzgB,GAAAiB,GAAA9H,KAIhC,KACAinB,EAAAx9C,OAAA,CAAA89C,GAAAA,IACA,CACA,EA4rHA,KACA,CAKAnG,kBAAA,CACA,IACAj9C,EAAAmI,QAAA,CAAAwL,mBAAA,yBAAA4rC,uBAAA,EAEAv/C,EAAA2T,mBAAA,aAAA6rC,iBAAA,EACAx/C,EAAA2T,mBAAA,cAAA8rC,kBAAA,EACAz/C,EAAA2T,mBAAA,gBAAA+rC,oBAAA,EAEA,KAAA9e,aAAA,EACA,KAAAA,aAAA,CAAA3C,eAAA,GAGA,KAAAykB,2BAAA,EACA,KAAAA,2BAAA,EAEA,CAAM,MAAA/6C,EAAA,CACN,KAAAyjC,eAAA,CAAAzjC,EACA,CACA,CAQAywC,QAAA,CAAa,KAAAmH,uBAAA,MACbv/C,YAAAA,EAAAmI,QAAA,CAAAk7C,eAAA,CACA,KAAAC,0BAAA,GAEA,KAAAC,0BAAA,EAEA,EAKAlL,SAAA,CAAc,KAAAmH,iBAAA,MACd,IAAA1jB,EAAAkE,GAAA,CACAjE,SAAA,SACA,GAIA,KAAAwnB,0BAAA,CAAAznB,EACA,EAKAwc,SAAA,CAAc,KAAAmH,kBAAA,MACd,IAAA3jB,EAAAkE,GAAA,CACAjE,SAAA,UACA,GAIA,KAAAunB,0BAAA,CAAAxnB,EACA,EAGAyc,SAAA,CAAc,KAAAmH,oBAAA,MACd8D,SA1jIA3nB,CAAA,CAAA/e,CAAA,EACA,IAAA+e,EAAAsE,SAAA,GACA,OAMAtE,EAAAmiB,kBAAA,GAEA,IAAAliB,EAAA2nB,SAUA3mC,CAAA,MAmCA9D,EAlCA,IAAU8nB,QAAAA,CAAA,CAAAE,SAAAA,CAAA,CAAAD,QAAAA,CAAA,CAAAF,OAAAA,CAAA,CAAAxc,IAAAA,CAAA,CAAArL,OAAAA,CAAA,EAAkD8D,EAG5D,IAAA9D,GAgCAA,UAAAA,CADAA,EA/BAA,GAgCA9S,OAAA,EAAA8S,aAAAA,EAAA9S,OAAA,EAAA8S,EAAA0qC,iBAAA,EAhCA,CAAAr/B,EACA,YAIA,IAAAs/B,EAAA7iB,GAAAC,GAAAF,EACA+iB,EAAAv/B,IAAAA,EAAAxjB,MAAA,CAIA,IAAA8iD,GAAAC,EACA,YAGA,IAAAvvB,EAAkB,GAAAmM,EAAAC,EAAA,EAAgBznB,EAAA,CAAW0nB,gBAAA,OAAsB,YACnEmjB,EAAAljB,GAAA3nB,EAAAqb,GAEA,OAAA2L,GAAA,CACAjE,SAAA,aACA1H,QAAAA,EACAzhB,KAAA,CACA,GAAAixC,EAAAjxC,IAAA,CACAkuB,QAAAA,EACAE,SAAAA,EACAD,QAAAA,EACAF,OAAAA,EACAxc,IAAAA,CACA,CACA,EACA,EA3CAvH,GAEAgf,GAIAF,GAAAC,EAAAC,EACA,EAyiIA,KAAAhf,EACA,EAKAymC,2BAAAznB,CAAA,EACA,MAAA4M,OAAA,EAIAkB,GAAA,KAAAlB,OAAA,EACAmB,kBAAA,KAAAsP,QAAA,CAAAtP,iBAAA,CACAC,kBAAA,KAAA+B,QAAA,CAAA/B,iBAAA,KAOAhO,GACA,KAAAgoB,uBAAA,CAAAhoB,GAQA,KAAAmiB,gBAAA,GACA,CAKAqF,2BAAAxnB,CAAA,EACA,QAAA4M,OAAA,EAMA,IAFA,KAAAzM,4BAAA,GAEA,CAIA6H,IAAAO,GAAAiB,IAAA,wDACA,MACA,CAEAxJ,GACA,KAAAgoB,uBAAA,CAAAhoB,GAEA,CAKA0f,oBAAA7C,EAAA/+B,KAAAD,GAAA,IACA,KAAAg/B,aAAA,CAAAA,CACA,CAKAkF,uBAAAlF,EAAA/+B,KAAAD,GAAA,IACA,KAAA+uB,OAAA,GACA,KAAAA,OAAA,CAAAI,YAAA,CAAA6P,EACA,KAAAmF,iBAAA,GAEA,CAKAgG,wBAAAhoB,CAAA,EACA,KAAAI,SAAA,MAGA,KAAAC,iBAAA,EACAh2B,KAAAyY,GAAAwW,MAAA,CACAP,UAAAiH,EAAAjH,SAAA,IACAjiB,KAAA,CACAwpB,IAAA,aACA5Z,QAAAsZ,CACA,CACA,EACA,EACA,CAMAioB,wBAAA,CACA,IAAArL,EAAAsL,IAAA,CAAAtL,kBAAA,CAnkIAr/B,GAAA,CAAAwpB,IAAApgB,MAAA,CAAArc,SAmkIA69C,MAAA,MAAArhB,wBAAA,EAWA,GATA,KAAA8V,kBAAA,IACA,KAAA9V,wBAAA,IAQA,KAAAkW,oBAAA,EACA,IAAAoL,EAAA,KAAAlL,QAAA,CAAAjN,gBAAA,KACA2M,EAAAA,EAAAj2B,MAAA,CAAA4e,GAAAA,EAAA1P,KAAA,EAAAuyB,EACA,CAEA,OAAAhe,QAAAiC,GAAA,CAAA0E,GAAA,KAAA6L,GACA,CAKA4F,eAAA,CAEA,KAAAtF,QAAA,CAAAjD,QAAA,CAAA1P,KAAA,GACA,KAAA2S,QAAA,CAAAhD,QAAA,CAAA3P,KAAA,GACA,KAAA2S,QAAA,CAAAjJ,IAAA,IAIAoU,wCAAA,CACA,IAAYzb,QAAAA,CAAA,CAAAiC,YAAAA,CAAA,EAAuB,KAGnC,IAAAjC,GAAA,CAAAiC,GAAA,KAAAmO,oBAAA,EAKApQ,EAAAK,SAAA,CAJA,OAQA,IAAA4T,EAAAhS,EAAArE,oBAAA,GACAqW,GAAAA,EAAA,KAAA3D,QAAA,CAAAjN,gBAAA,EACA,MAAAiN,QAAA,CAAAjN,gBAAA,CAAA4Q,CAAA,CAEA,CAKAyH,kBAAA,CACA,IAAApL,EAAA,CACAjN,iBAAA,KAAAiN,QAAA,CAAAjN,gBAAA,CACAkN,WAAA,KAAAD,QAAA,CAAAC,UAAA,CACAlD,SAAA7zC,MAAAC,IAAA,MAAA62C,QAAA,CAAAjD,QAAA,EACAC,SAAA9zC,MAAAC,IAAA,MAAA62C,QAAA,CAAAhD,QAAA,EACAjG,KAAA,KAAAiJ,QAAA,CAAAjJ,IAAA,EAKA,OAFA,KAAAuO,aAAA,GAEAtF,CACA,CAUA,MAAAqL,WAAA,CACA,IAAA/P,EAAA,KAAA6J,YAAA,GAEA,SAAAzV,OAAA,QAAAiC,WAAA,GAAA2J,EAAA,CACAxQ,IAAAO,GAAA7hC,KAAA,8CACA,MACA,CAKA,GAHA,WAAAuhD,sBAAA,GAGA,KAAApZ,WAAA,OAAAA,WAAA,CAAA7E,SAAA,GAKA,MAAA6N,GAAA,MAGA,KAAAhJ,WAAA,EAKA2J,IAAA,KAAA6J,YAAA,IAIA,IAEA,KAAAgG,sCAAA,GAEA,IAAAtvB,EAAAjb,KAAAD,GAAA,GAKA,GAAAkb,EAAA,KAAAmkB,QAAA,CAAAjN,gBAAA,MAAAoN,QAAA,CAAAtP,iBAAA,KACA,uDAGA,IAAA0L,EAAA,KAAA6O,gBAAA,GAEArb,EAAA,KAAAL,OAAA,CAAAK,SAAA,GACA,KAAA+U,iBAAA,GAGA,IAAAzI,EAAA,WAAA1K,WAAA,CAAA1E,MAAA,EAEA,OAAA0R,GAAA,CACArD,SAAAA,EACAe,cAAAA,EACAtM,UAAAA,EACAwM,aAAAA,EACA7M,QAAA,KAAAA,OAAA,CACA7T,UAAAA,EACAkjB,QAAApwC,GAAA,KAAAyjC,eAAA,CAAAzjC,EACA,EACA,CAAM,MAAAA,EAAA,CACN,KAAAyjC,eAAA,CAAAzjC,GAOA,KAAA0jC,IAAA,EAAkBC,OAAA,eAElB,IAAAC,EAAqB,GAAAC,EAAAC,EAAA,IAErBF,GAEAA,EAAAG,kBAAA,CADA/jC,aAAA+vC,GAAA,iCACA,SAEA,CACA,CAMAc,SAAA,CAAc,KAAAwB,MAAA,QACdkD,MAAAA,EAAA,GACA,CAEA,EAAK,IACL,SAAAtE,UAAA,GAAAsE,EAEA,OAGA,SAAAjhB,4BAAA,IACA6H,IAAAO,GAAA7hC,KAAA,6DACA,MACA,CAEA,SAAAkmC,OAAA,CAEA,OAGA,IAAA/W,EAAA,KAAA+W,OAAA,CAAAG,OAAA,CAEA5G,EAAAtoB,KADAA,GAAA,GACAgY,EAGA,KAAAynB,eAAA,CAAAU,MAAA,GAIA,IAAAwK,EAAAriB,EAAA,KAAAkX,QAAA,CAAAoL,iBAAA,CACAC,EAAAviB,EAAA,KAAAkX,QAAA,CAAAtP,iBAAA,KACA,GAAAya,GAAAE,EAAA,CACA1gB,IACAO,GAAAiB,IAAA,CACA,qBAA+B5yB,KAAAkoC,KAAA,CAAA3Y,EAAA,KAA4B,YAC3DqiB,EAAA,eACW,wBAGXA,GACA,KAAAlL,eAAA,GAEA,MACA,CAEA,IAAAzO,EAAA,KAAAA,WAAA,CACAA,GAAA,SAAAjC,OAAA,CAAAK,SAAA,GAAA4B,EAAA/E,WAAA,EACA9B,IAAAO,GAAAiB,IAAA,+CAIA,IAAAmf,EAAA,OAAAC,UAAA,CAIA,KAAAA,UAAA,EACA,MAAAA,UAAA,MAAAL,SAAA,IAGA,IACA,WAAAK,UAAA,CACM,MAAA/8C,EAAA,CACN,KAAAyjC,eAAA,CAAAzjC,EACA,QAAM,CACN,KAAA+8C,UAAA,CAAAxjD,KAAAA,EAEAujD,GAMA,KAAArL,eAAA,EAEA,CACA,EAGA0E,mBAAA,CACA,KAAApV,OAAA,OAAAyQ,QAAA,CAAA5P,aAAA,EACAL,GAAA,KAAAR,OAAA,CAEA,CAGA+P,SAAA,CAAc,KAAAqE,kBAAA,KACd,IAAA1rB,EAAA1Q,EAAA7f,MAAA,CAEA8jD,EAAA,KAAAxL,QAAA,CAAAwL,aAAA,CACAC,EAAA,KAAAzL,QAAA,CAAAyL,uBAAA,CACAC,EAAAF,GAAAvzB,EAAAuzB,EAIA,GAAAvzB,EAAAwzB,GAAAC,EAAA,CACA,IAAA/oB,EAAAkE,GAAA,CACAjE,SAAA,mBACAnpB,KAAA,CACAwe,MAAAA,EACA3kB,MAAAo4C,CACA,CACA,GACA,KAAAf,uBAAA,CAAAhoB,EACA,OAGA,CAAA+oB,IAGA,KAAAxZ,IAAA,EAAkBC,OAAA,gBAAA0R,WAAA,iBAAAnS,aAAA,GAClB,GAKA,EACA,CAEA,SAAAia,GAAAC,CAAA,CAAAC,CAAA,EACA,UACAD,KAEAC,EACA,CAAA3iD,IAAA,KACA,CAyDA,IAAA4iD,GACA,mGAEAC,GAAA,2CAEAC,GAAA,GAgBAC,GAAA,GACA,IAAAC,GAAA/2C,EASA,OAAA+2C,GAIA,OAAAC,cAAA,CAA0B,KAAAxgD,EAAA,UAkB1BV,YAAA,CACA61C,cAAAA,EA/rSA,GA+rSA,CACAC,cAAAA,EA7rSA,IA6rSA,CACAqK,kBAAAA,EAvqSA,IAuqSA,CACA1a,kBAAAA,EAnqSA,IAmqSA,CACAN,cAAAA,EAAA,GACA+S,eAAAA,EAAA,GACAwC,UAAAA,CAAA,CACA5R,aAAAA,EAAA,EAAqB,CACrBr/B,YAAAA,EAAA,GACA8qB,cAAAA,EAAA,GACA4jB,cAAAA,EAAA,GAEAqI,wBAAAA,EAAA,IACAD,cAAAA,EAAA,IAEA7J,iBAAAA,EAAA,IACAC,yBAAAA,EAAA,GAEAhK,uBAAAA,EAAA,GACAC,sBAAAA,EAAA,GACAE,qBAAAA,EAAA,GACAC,sBAAAA,EAAA,GACAM,uBAAAA,EAAA,GAEA8T,KAAAA,EAAA,GACAC,eAAAA,EAAA,wBACAC,OAAAA,EAAA,GACAC,MAAAA,EAAA,GACAC,QAAAA,EAAA,GACAC,OAAAA,EAAA,GACAC,OAAAA,CAAA,CAEA3a,wBAAAA,CAAA,CACAoX,oBAAAA,CAAA,CACAvK,QAAAA,CAAA,CACA,CAAI,EAAI,EACR,KAAA9vC,IAAA,CAAAo9C,GAAAvgD,EAAA,CAEA,IAAAghD,EAAAC,SAhJA,CAA6BR,KAAAA,CAAA,CAAAE,OAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAsC,EAgBnE,MAVA,CAEAl4C,iBALAo3C,GAAAS,EAAA,uCAMA33C,mBALAk3C,GAAAW,EAAA,IAOAh3C,cAAAq2C,GAAAY,EAAA,uCAVA,mCAUA,EACAh3C,gBAAAo2C,GAAAa,EAAA,IACAn5B,eAAAs4B,GAAAc,EAAA,+DACA,CAGA,EA+HA,CACAL,KAAAA,EACAE,OAAAA,EACAC,MAAAA,EACAC,QAAAA,EACAC,OAAAA,CACA,GAyEA,GAvEA,KAAA1M,iBAAA,EACAvgB,cAAAA,EACA9qB,YAAAA,EACA5H,iBAAA,CAA0B+/C,SAAA,IAC1Bn3C,WAAAg3C,EACAp/C,YAAAo/C,EACAr6C,gBAAA,CAAA6Y,EAAA1jB,EAAAuG,IACA++C,CAzIA,UACA/+C,GAAAA,CAAA,CACAmd,IAAAA,CAAA,CACAmhC,eAAAA,CAAA,CACA33C,YAAAA,CAAA,CACAi4C,eAAAA,CAAA,CACAnlD,MAAAA,CAAA,CACC,QAED,CAAAkN,GAKAi4C,EAAAl4C,kBAAA,EAAA1G,EAAAgG,OAAA,CAAA44C,EAAAl4C,kBAAA,EAJAjN,EASA6kD,EAAAljD,QAAA,CAAA+hB,IAGAA,UAAAA,GAAAnd,UAAAA,EAAAhB,OAAA,sBAAA5D,QAAA,CAAA4E,EAAAC,YAAA,cAEAxG,EAAA4B,OAAA,cAGA5B,CACA,GA6GA,CACA6kD,eAAAA,EACA33C,YAAAA,EACAi4C,eAAAA,EACAzhC,IAAAA,EACA1jB,MAAAA,EACAuG,GAAAA,CACA,GAEA,GAAA4+C,CAAA,CAGAh3C,eAAA,MACAF,iBAAA,GAEAI,aAAA,GAGA6gB,aAAA,GACAzwB,aAAA,IACA,IACAuI,EAAA65C,SAAA,GACA,CAAU,MAAAh/C,EAAA,CAGV,CACA,CACA,EAEA,KAAA0jD,eAAA,EACAjM,cAAAA,EACAC,cAAAA,EACAqK,kBAAA7xC,KAAAC,GAAA,CAAA4xC,EAxvSA,MAyvSA1a,kBAAAn3B,KAAAC,GAAA,CAAAk3B,EAtvSA,MAuvSAN,cAAAA,EACA+S,eAAAA,EACAwC,UAAAA,EACAvC,cAAAA,EACA5jB,cAAAA,EACA9qB,YAAAA,EACA+2C,wBAAAA,EACAD,cAAAA,EACA7J,iBAAAA,EACAC,yBAAAA,EACAhK,uBAAAA,EACAC,sBAAAA,EACAE,qBAAAA,EACAC,sBAAAgV,GAAAhV,GACAM,uBAAA0U,GAAA1U,GACAvG,wBAAAA,EACAoX,oBAAAA,EACAvK,QAAAA,EAEA7K,aAAAA,CACA,EAEA,KAAAgZ,eAAA,CAAA3J,aAAA,EAGA,MAAArD,iBAAA,CAAAzqC,aAAA,MAAAyqC,iBAAA,CAAAzqC,aAAA,CAEA,GAAa,KAAAyqC,iBAAA,CAAAzqC,aAAA,CAAqC,GAAGw2C,GAAgB,EADrEA,EACqE,EAGrE,KAAAmB,cAAA,EAA+B,GAAAC,EAAAC,CAAA,IAC/B,yEAGA,MAAAF,cAAA,GACA,CAGA,IAAAA,gBAAA,CACA,OAAAjB,EACA,CAGA,IAAAiB,eAAAzlD,CAAA,EACAwkD,GAAAxkD,CACA,CAKA4lD,cAAAhb,CAAA,EACS,GAAA8a,EAAAC,CAAA,MAAS,KAAA/oB,OAAA,GAIlB,KAAAipB,MAAA,CAAAjb,GACA,KAAAkb,WAAA,CAAAlb,GACA,CASA5Z,OAAA,CACA,KAAA4L,OAAA,EAGA,KAAAA,OAAA,CAAA5L,KAAA,EACA,CAMA8pB,gBAAA,CACA,KAAAle,OAAA,EAIA,KAAAA,OAAA,CAAAke,cAAA,EACA,CAMApQ,MAAA,QACA,KAAA9N,OAAA,CAIA,KAAAA,OAAA,CAAA8N,IAAA,EAA+B2R,WAAA,iBAAAzf,OAAA,CAAAsN,aAAA,GAH/B3E,QAAAC,OAAA,EAIA,CAUA4T,MAAAzrC,CAAA,SACA,KAAAivB,OAAA,CAKA,KAAAA,OAAA,CAAA4C,SAAA,GAKA,KAAA5C,OAAA,CAAAigB,yBAAA,CAAAlvC,IAJA,KAAAivB,OAAA,CAAA5L,KAAA,GACAuU,QAAAC,OAAA,IANAD,QAAAC,OAAA,EAUA,CAKAugB,aAAA,CACA,QAAAnpB,OAAA,OAAAA,OAAA,CAAA4C,SAAA,GAIA,YAAA5C,OAAA,CAAA4gB,YAAA,EACA,CAUAwI,kBAAA,CACA,QAAAppB,OAAA,OAAAA,OAAA,CAAA4C,SAAA,GAIA,YAAA5C,OAAA,CAAAsN,aAAA,CAMA4b,YAAAlb,CAAA,EACA,KAAAhO,OAAA,GAIA,KAAAqpB,qCAAA,CAAArb,GACA,KAAAhO,OAAA,CAAA4d,kBAAA,GACA,CAGAqL,OAAAjb,CAAA,EAEA,IAAAsb,EAAAC,SA8BAC,CAAA,CAAAxb,CAAA,EACA,IAAAyb,EAAAzb,EAAAR,UAAA,GAEA8b,EAAA,CACAxd,kBAAA,EACA+R,gBAAA,EACA,GAAO,GAAAxd,EAAAiR,EAAA,EAAiBkY,EAAA,EAGxBE,EAAmC,GAAAC,EAAAt+B,CAAA,EAAeo+B,EAAAC,wBAAA,EAClDE,EAAmC,GAAAD,EAAAt+B,CAAA,EAAeo+B,EAAAG,wBAAA,EAmBlD,OAjBA,MAAAF,GAAAE,MAAAA,GACI,GAAAniB,EAAAoiB,EAAA,EAAc,KAElBnzC,QAAAC,IAAA,CACA,wGAEA,GAGA,MAAA+yC,GACAJ,CAAAA,EAAAxd,iBAAA,CAAA4d,CAAA,EAGA,MAAAE,GACAN,CAAAA,EAAAzL,eAAA,CAAA+L,CAAA,EAGAN,CACA,EA5DA,KAAAX,eAAA,CAAA3a,EAEA,MAAAhO,OAAA,KAAA2a,GAAA,CACA5pC,QAAAu4C,EACA1O,iBAAA,KAAAe,iBAAA,EAEA,CAGA0N,sCAAArb,CAAA,EAIA,IACA,IAAA8b,EAAA9b,EAAA+b,oBAAA,iBAGA,IAAAD,EACA,MAGA,MAAA9pB,OAAA,SAAA8pB,EAAAtc,UAAA,EACA,CAAM,MAAAniC,EAAA,CAEN,CAEA,CACA,CAmCA,SAAAu9C,GAAA7X,CAAA,EACA,UAAA4W,MAAA5W,EAAAj1B,GAAA,CAAA40B,GAAAA,EAAA5nC,WAAA,KApCCg/C,GAAAC,YAAA","sources":["webpack://_N_E/./node_modules/@sentry-internal/replay/build/npm/esm/index.js?8080"],"sourcesContent":["import { _nullishCoalesce, _optionalChain } from '@sentry/core';\nimport { GLOBAL_OBJ, normalize, fill, htmlTreeAsString, browserPerformanceTimeOrigin, logger as logger$1, severityLevelFromString, captureException, addBreadcrumb, uuid4, getClient, getLocationHref, getCurrentScope, getActiveSpan, getDynamicSamplingContextFromSpan, isSentryRequestUrl, dropUndefinedKeys, stringMatchesSomePattern, addEventProcessor, createEnvelope, createEventEnvelopeHeaders, getSdkMetadataForEnvelopeHeader, prepareEvent, getIsolationScope, resolvedSyncPromise, updateRateLimits, isRateLimited, setContext, getRootSpan, spanToJSON, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, isBrowser, parseSampleRate, consoleSandbox } from '@sentry/core';\nimport { setTimeout as setTimeout$3, addPerformanceInstrumentationHandler, addLcpInstrumentationHandler, addClsInstrumentationHandler, addFidInstrumentationHandler, addInpInstrumentationHandler, SENTRY_XHR_DATA_KEY, addClickKeypressInstrumentationHandler, addHistoryInstrumentationHandler } from '@sentry-internal/browser-utils';\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nconst WINDOW = GLOBAL_OBJ ;\n\nconst REPLAY_SESSION_KEY = 'sentryReplaySession';\nconst REPLAY_EVENT_NAME = 'replay_event';\nconst UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session after which recording is paused.\nconst SESSION_IDLE_PAUSE_DURATION = 300000; // 5 minutes in ms\n\n// The idle limit for a session after which the session expires.\nconst SESSION_IDLE_EXPIRE_DURATION = 900000; // 15 minutes in ms\n\n/** Default flush delays */\nconst DEFAULT_FLUSH_MIN_DELAY = 5000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nconst DEFAULT_FLUSH_MAX_DELAY = 5500;\n\n/* How long to wait for error checkouts */\nconst BUFFER_CHECKOUT_TIME = 60000;\n\nconst RETRY_BASE_INTERVAL = 5000;\nconst RETRY_MAX_COUNT = 3;\n\n/* The max (uncompressed) size in bytes of a network body. Any body larger than this will be truncated. */\nconst NETWORK_BODY_MAX_SIZE = 150000;\n\n/* The max size of a single console arg that is captured. Any arg larger than this will be truncated. */\nconst CONSOLE_ARG_MAX_SIZE = 5000;\n\n/* Min. time to wait before we consider something a slow click. */\nconst SLOW_CLICK_THRESHOLD = 3000;\n/* For scroll actions after a click, we only look for a very short time period to detect programmatic scrolling. */\nconst SLOW_CLICK_SCROLL_TIMEOUT = 300;\n\n/** When encountering a total segment size exceeding this size, stop the replay (as we cannot properly ingest it). */\nconst REPLAY_MAX_EVENT_BUFFER_SIZE = 20000000; // ~20MB\n\n/** Replays must be min. 5s long before we send them. */\nconst MIN_REPLAY_DURATION = 4999;\n/* The max. allowed value that the minReplayDuration can be set to. */\nconst MIN_REPLAY_DURATION_LIMIT = 15000;\n\n/** The max. length of a replay. */\nconst MAX_REPLAY_DURATION = 3600000; // 60 minutes in ms;\n\nfunction _nullishCoalesce$1(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }function _optionalChain$5(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var NodeType$3;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType$3 || (NodeType$3 = {}));\n\nfunction isElement$1(n) {\n    return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n    const host = _optionalChain$5([n, 'optionalAccess', _ => _.host]);\n    return Boolean(_optionalChain$5([host, 'optionalAccess', _2 => _2.shadowRoot]) === n);\n}\nfunction isNativeShadowDom(shadowRoot) {\n    return Object.prototype.toString.call(shadowRoot) === '[object ShadowRoot]';\n}\nfunction fixBrowserCompatibilityIssuesInCSS(cssText) {\n    if (cssText.includes(' background-clip: text;') &&\n        !cssText.includes(' -webkit-background-clip: text;')) {\n        cssText = cssText.replace(/\\sbackground-clip:\\s*text;/g, ' -webkit-background-clip: text; background-clip: text;');\n    }\n    return cssText;\n}\nfunction escapeImportStatement(rule) {\n    const { cssText } = rule;\n    if (cssText.split('\"').length < 3)\n        return cssText;\n    const statement = ['@import', `url(${JSON.stringify(rule.href)})`];\n    if (rule.layerName === '') {\n        statement.push(`layer`);\n    }\n    else if (rule.layerName) {\n        statement.push(`layer(${rule.layerName})`);\n    }\n    if (rule.supportsText) {\n        statement.push(`supports(${rule.supportsText})`);\n    }\n    if (rule.media.length) {\n        statement.push(rule.media.mediaText);\n    }\n    return statement.join(' ') + ';';\n}\nfunction stringifyStylesheet(s) {\n    try {\n        const rules = s.rules || s.cssRules;\n        return rules\n            ? fixBrowserCompatibilityIssuesInCSS(Array.from(rules, stringifyRule).join(''))\n            : null;\n    }\n    catch (error) {\n        return null;\n    }\n}\nfunction fixAllCssProperty(rule) {\n    let styles = '';\n    for (let i = 0; i < rule.style.length; i++) {\n        const styleDeclaration = rule.style;\n        const attribute = styleDeclaration[i];\n        const isImportant = styleDeclaration.getPropertyPriority(attribute);\n        styles += `${attribute}:${styleDeclaration.getPropertyValue(attribute)}${isImportant ? ` !important` : ''};`;\n    }\n    return `${rule.selectorText} { ${styles} }`;\n}\nfunction stringifyRule(rule) {\n    let importStringified;\n    if (isCSSImportRule(rule)) {\n        try {\n            importStringified =\n                stringifyStylesheet(rule.styleSheet) ||\n                    escapeImportStatement(rule);\n        }\n        catch (error) {\n        }\n    }\n    else if (isCSSStyleRule(rule)) {\n        let cssText = rule.cssText;\n        const needsSafariColonFix = rule.selectorText.includes(':');\n        const needsAllFix = typeof rule.style['all'] === 'string' && rule.style['all'];\n        if (needsAllFix) {\n            cssText = fixAllCssProperty(rule);\n        }\n        if (needsSafariColonFix) {\n            cssText = fixSafariColons(cssText);\n        }\n        if (needsSafariColonFix || needsAllFix) {\n            return cssText;\n        }\n    }\n    return importStringified || rule.cssText;\n}\nfunction fixSafariColons(cssStringified) {\n    const regex = /(\\[(?:[\\w-]+)[^\\\\])(:(?:[\\w-]+)\\])/gm;\n    return cssStringified.replace(regex, '$1\\\\$2');\n}\nfunction isCSSImportRule(rule) {\n    return 'styleSheet' in rule;\n}\nfunction isCSSStyleRule(rule) {\n    return 'selectorText' in rule;\n}\nclass Mirror {\n    constructor() {\n        this.idNodeMap = new Map();\n        this.nodeMetaMap = new WeakMap();\n    }\n    getId(n) {\n        if (!n)\n            return -1;\n        const id = _optionalChain$5([this, 'access', _3 => _3.getMeta, 'call', _4 => _4(n), 'optionalAccess', _5 => _5.id]);\n        return _nullishCoalesce$1(id, () => ( -1));\n    }\n    getNode(id) {\n        return this.idNodeMap.get(id) || null;\n    }\n    getIds() {\n        return Array.from(this.idNodeMap.keys());\n    }\n    getMeta(n) {\n        return this.nodeMetaMap.get(n) || null;\n    }\n    removeNodeFromMap(n) {\n        const id = this.getId(n);\n        this.idNodeMap.delete(id);\n        if (n.childNodes) {\n            n.childNodes.forEach((childNode) => this.removeNodeFromMap(childNode));\n        }\n    }\n    has(id) {\n        return this.idNodeMap.has(id);\n    }\n    hasNode(node) {\n        return this.nodeMetaMap.has(node);\n    }\n    add(n, meta) {\n        const id = meta.id;\n        this.idNodeMap.set(id, n);\n        this.nodeMetaMap.set(n, meta);\n    }\n    replace(id, n) {\n        const oldNode = this.getNode(id);\n        if (oldNode) {\n            const meta = this.nodeMetaMap.get(oldNode);\n            if (meta)\n                this.nodeMetaMap.set(n, meta);\n        }\n        this.idNodeMap.set(id, n);\n    }\n    reset() {\n        this.idNodeMap = new Map();\n        this.nodeMetaMap = new WeakMap();\n    }\n}\nfunction createMirror() {\n    return new Mirror();\n}\nfunction shouldMaskInput({ maskInputOptions, tagName, type, }) {\n    if (tagName === 'OPTION') {\n        tagName = 'SELECT';\n    }\n    return Boolean(maskInputOptions[tagName.toLowerCase()] ||\n        (type && maskInputOptions[type]) ||\n        type === 'password' ||\n        (tagName === 'INPUT' && !type && maskInputOptions['text']));\n}\nfunction maskInputValue({ isMasked, element, value, maskInputFn, }) {\n    let text = value || '';\n    if (!isMasked) {\n        return text;\n    }\n    if (maskInputFn) {\n        text = maskInputFn(text, element);\n    }\n    return '*'.repeat(text.length);\n}\nfunction toLowerCase(str) {\n    return str.toLowerCase();\n}\nfunction toUpperCase(str) {\n    return str.toUpperCase();\n}\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx)\n        return true;\n    const chunkSize = 50;\n    for (let x = 0; x < canvas.width; x += chunkSize) {\n        for (let y = 0; y < canvas.height; y += chunkSize) {\n            const getImageData = ctx.getImageData;\n            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData\n                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]\n                : getImageData;\n            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n            if (pixelBuffer.some((pixel) => pixel !== 0))\n                return false;\n        }\n    }\n    return true;\n}\nfunction getInputType(element) {\n    const type = element.type;\n    return element.hasAttribute('data-rr-is-password')\n        ? 'password'\n        : type\n            ?\n                toLowerCase(type)\n            : null;\n}\nfunction getInputValue(el, tagName, type) {\n    if (tagName === 'INPUT' && (type === 'radio' || type === 'checkbox')) {\n        return el.getAttribute('value') || '';\n    }\n    return el.value;\n}\nfunction extractFileExtension(path, baseURL) {\n    let url;\n    try {\n        url = new URL(path, _nullishCoalesce$1(baseURL, () => ( window.location.href)));\n    }\n    catch (err) {\n        return null;\n    }\n    const regex = /\\.([0-9a-z]+)(?:$)/i;\n    const match = url.pathname.match(regex);\n    return _nullishCoalesce$1(_optionalChain$5([match, 'optionalAccess', _6 => _6[1]]), () => ( null));\n}\nconst cachedImplementations$1 = {};\nfunction getImplementation$1(name) {\n    const cached = cachedImplementations$1[name];\n    if (cached) {\n        return cached;\n    }\n    const document = window.document;\n    let impl = window[name];\n    if (document && typeof document.createElement === 'function') {\n        try {\n            const sandbox = document.createElement('iframe');\n            sandbox.hidden = true;\n            document.head.appendChild(sandbox);\n            const contentWindow = sandbox.contentWindow;\n            if (contentWindow && contentWindow[name]) {\n                impl =\n                    contentWindow[name];\n            }\n            document.head.removeChild(sandbox);\n        }\n        catch (e) {\n        }\n    }\n    return (cachedImplementations$1[name] = impl.bind(window));\n}\nfunction setTimeout$2(...rest) {\n    return getImplementation$1('setTimeout')(...rest);\n}\nfunction clearTimeout$2(...rest) {\n    return getImplementation$1('clearTimeout')(...rest);\n}\nfunction getIframeContentDocument(iframe) {\n    try {\n        return iframe.contentDocument;\n    }\n    catch (e) {\n    }\n}\n\nlet _id = 1;\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\nconst IGNORED_NODE = -2;\nfunction genId() {\n    return _id++;\n}\nfunction getValidTagName(element) {\n    if (element instanceof HTMLFormElement) {\n        return 'form';\n    }\n    const processedTagName = toLowerCase(element.tagName);\n    if (tagNameRegex.test(processedTagName)) {\n        return 'div';\n    }\n    return processedTagName;\n}\nfunction extractOrigin(url) {\n    let origin = '';\n    if (url.indexOf('//') > -1) {\n        origin = url.split('/').slice(0, 3).join('/');\n    }\n    else {\n        origin = url.split('/')[0];\n    }\n    origin = origin.split('?')[0];\n    return origin;\n}\nlet canvasService;\nlet canvasCtx;\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nconst URL_PROTOCOL_MATCH = /^(?:[a-z+]+:)?\\/\\//i;\nconst URL_WWW_MATCH = /^www\\..*/i;\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n        const filePath = path1 || path2 || path3;\n        const maybeQuote = quote1 || quote2 || '';\n        if (!filePath) {\n            return origin;\n        }\n        if (URL_PROTOCOL_MATCH.test(filePath) || URL_WWW_MATCH.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (DATA_URI.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (filePath[0] === '/') {\n            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n        }\n        const stack = href.split('/');\n        const parts = filePath.split('/');\n        stack.pop();\n        for (const part of parts) {\n            if (part === '.') {\n                continue;\n            }\n            else if (part === '..') {\n                stack.pop();\n            }\n            else {\n                stack.push(part);\n            }\n        }\n        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n    });\n}\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n    if (attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    let pos = 0;\n    function collectCharacters(regEx) {\n        let chars;\n        const match = regEx.exec(attributeValue.substring(pos));\n        if (match) {\n            chars = match[0];\n            pos += chars.length;\n            return chars;\n        }\n        return '';\n    }\n    const output = [];\n    while (true) {\n        collectCharacters(SRCSET_COMMAS_OR_SPACES);\n        if (pos >= attributeValue.length) {\n            break;\n        }\n        let url = collectCharacters(SRCSET_NOT_SPACES);\n        if (url.slice(-1) === ',') {\n            url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n            output.push(url);\n        }\n        else {\n            let descriptorsStr = '';\n            url = absoluteToDoc(doc, url);\n            let inParens = false;\n            while (true) {\n                const c = attributeValue.charAt(pos);\n                if (c === '') {\n                    output.push((url + descriptorsStr).trim());\n                    break;\n                }\n                else if (!inParens) {\n                    if (c === ',') {\n                        pos += 1;\n                        output.push((url + descriptorsStr).trim());\n                        break;\n                    }\n                    else if (c === '(') {\n                        inParens = true;\n                    }\n                }\n                else {\n                    if (c === ')') {\n                        inParens = false;\n                    }\n                }\n                descriptorsStr += c;\n                pos += 1;\n            }\n        }\n    }\n    return output.join(', ');\n}\nconst cachedDocument = new WeakMap();\nfunction absoluteToDoc(doc, attributeValue) {\n    if (!attributeValue || attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    return getHref(doc, attributeValue);\n}\nfunction isSVGElement(el) {\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref(doc, customHref) {\n    let a = cachedDocument.get(doc);\n    if (!a) {\n        a = doc.createElement('a');\n        cachedDocument.set(doc, a);\n    }\n    if (!customHref) {\n        customHref = '';\n    }\n    else if (customHref.startsWith('blob:') || customHref.startsWith('data:')) {\n        return customHref;\n    }\n    a.setAttribute('href', customHref);\n    return a.href;\n}\nfunction transformAttribute(doc, tagName, name, value, element, maskAttributeFn) {\n    if (!value) {\n        return value;\n    }\n    if (name === 'src' ||\n        (name === 'href' && !(tagName === 'use' && value[0] === '#'))) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'xlink:href' && value[0] !== '#') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'background' &&\n        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'srcset') {\n        return getAbsoluteSrcsetString(doc, value);\n    }\n    else if (name === 'style') {\n        return absoluteToStylesheet(value, getHref(doc));\n    }\n    else if (tagName === 'object' && name === 'data') {\n        return absoluteToDoc(doc, value);\n    }\n    if (typeof maskAttributeFn === 'function') {\n        return maskAttributeFn(name, value, element);\n    }\n    return value;\n}\nfunction ignoreAttribute(tagName, name, _value) {\n    return (tagName === 'video' || tagName === 'audio') && name === 'autoplay';\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n    try {\n        if (unblockSelector && element.matches(unblockSelector)) {\n            return false;\n        }\n        if (typeof blockClass === 'string') {\n            if (element.classList.contains(blockClass)) {\n                return true;\n            }\n        }\n        else {\n            for (let eIndex = element.classList.length; eIndex--;) {\n                const className = element.classList[eIndex];\n                if (blockClass.test(className)) {\n                    return true;\n                }\n            }\n        }\n        if (blockSelector) {\n            return element.matches(blockSelector);\n        }\n    }\n    catch (e) {\n    }\n    return false;\n}\nfunction elementClassMatchesRegex(el, regex) {\n    for (let eIndex = el.classList.length; eIndex--;) {\n        const className = el.classList[eIndex];\n        if (regex.test(className)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction distanceToMatch(node, matchPredicate, limit = Infinity, distance = 0) {\n    if (!node)\n        return -1;\n    if (node.nodeType !== node.ELEMENT_NODE)\n        return -1;\n    if (distance > limit)\n        return -1;\n    if (matchPredicate(node))\n        return distance;\n    return distanceToMatch(node.parentNode, matchPredicate, limit, distance + 1);\n}\nfunction createMatchPredicate(className, selector) {\n    return (node) => {\n        const el = node;\n        if (el === null)\n            return false;\n        try {\n            if (className) {\n                if (typeof className === 'string') {\n                    if (el.matches(`.${className}`))\n                        return true;\n                }\n                else if (elementClassMatchesRegex(el, className)) {\n                    return true;\n                }\n            }\n            if (selector && el.matches(selector))\n                return true;\n            return false;\n        }\n        catch (e2) {\n            return false;\n        }\n    };\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText) {\n    try {\n        const el = node.nodeType === node.ELEMENT_NODE\n            ? node\n            : node.parentElement;\n        if (el === null)\n            return false;\n        if (el.tagName === 'INPUT') {\n            const autocomplete = el.getAttribute('autocomplete');\n            const disallowedAutocompleteValues = [\n                'current-password',\n                'new-password',\n                'cc-number',\n                'cc-exp',\n                'cc-exp-month',\n                'cc-exp-year',\n                'cc-csc',\n            ];\n            if (disallowedAutocompleteValues.includes(autocomplete)) {\n                return true;\n            }\n        }\n        let maskDistance = -1;\n        let unmaskDistance = -1;\n        if (maskAllText) {\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector));\n            if (unmaskDistance < 0) {\n                return true;\n            }\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector), unmaskDistance >= 0 ? unmaskDistance : Infinity);\n        }\n        else {\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector));\n            if (maskDistance < 0) {\n                return false;\n            }\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector), maskDistance >= 0 ? maskDistance : Infinity);\n        }\n        return maskDistance >= 0\n            ? unmaskDistance >= 0\n                ? maskDistance <= unmaskDistance\n                : true\n            : unmaskDistance >= 0\n                ? false\n                : !!maskAllText;\n    }\n    catch (e) {\n    }\n    return !!maskAllText;\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n    const win = iframeEl.contentWindow;\n    if (!win) {\n        return;\n    }\n    let fired = false;\n    let readyState;\n    try {\n        readyState = win.document.readyState;\n    }\n    catch (error) {\n        return;\n    }\n    if (readyState !== 'complete') {\n        const timer = setTimeout$2(() => {\n            if (!fired) {\n                listener();\n                fired = true;\n            }\n        }, iframeLoadTimeout);\n        iframeEl.addEventListener('load', () => {\n            clearTimeout$2(timer);\n            fired = true;\n            listener();\n        });\n        return;\n    }\n    const blankUrl = 'about:blank';\n    if (win.location.href !== blankUrl ||\n        iframeEl.src === blankUrl ||\n        iframeEl.src === '') {\n        setTimeout$2(listener, 0);\n        return iframeEl.addEventListener('load', listener);\n    }\n    iframeEl.addEventListener('load', listener);\n}\nfunction onceStylesheetLoaded(link, listener, styleSheetLoadTimeout) {\n    let fired = false;\n    let styleSheetLoaded;\n    try {\n        styleSheetLoaded = link.sheet;\n    }\n    catch (error) {\n        return;\n    }\n    if (styleSheetLoaded)\n        return;\n    const timer = setTimeout$2(() => {\n        if (!fired) {\n            listener();\n            fired = true;\n        }\n    }, styleSheetLoadTimeout);\n    link.addEventListener('load', () => {\n        clearTimeout$2(timer);\n        fired = true;\n        listener();\n    });\n}\nfunction serializeNode(n, options) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskAttributeFn, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, } = options;\n    const rootId = getRootId(doc, mirror);\n    switch (n.nodeType) {\n        case n.DOCUMENT_NODE:\n            if (n.compatMode !== 'CSS1Compat') {\n                return {\n                    type: NodeType$3.Document,\n                    childNodes: [],\n                    compatMode: n.compatMode,\n                };\n            }\n            else {\n                return {\n                    type: NodeType$3.Document,\n                    childNodes: [],\n                };\n            }\n        case n.DOCUMENT_TYPE_NODE:\n            return {\n                type: NodeType$3.DocumentType,\n                name: n.name,\n                publicId: n.publicId,\n                systemId: n.systemId,\n                rootId,\n            };\n        case n.ELEMENT_NODE:\n            return serializeElementNode(n, {\n                doc,\n                blockClass,\n                blockSelector,\n                unblockSelector,\n                inlineStylesheet,\n                maskAttributeFn,\n                maskInputOptions,\n                maskInputFn,\n                dataURLOptions,\n                inlineImages,\n                recordCanvas,\n                keepIframeSrcFn,\n                newlyAddedElement,\n                rootId,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n            });\n        case n.TEXT_NODE:\n            return serializeTextNode(n, {\n                doc,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                maskTextFn,\n                maskInputOptions,\n                maskInputFn,\n                rootId,\n            });\n        case n.CDATA_SECTION_NODE:\n            return {\n                type: NodeType$3.CDATA,\n                textContent: '',\n                rootId,\n            };\n        case n.COMMENT_NODE:\n            return {\n                type: NodeType$3.Comment,\n                textContent: n.textContent || '',\n                rootId,\n            };\n        default:\n            return false;\n    }\n}\nfunction getRootId(doc, mirror) {\n    if (!mirror.hasNode(doc))\n        return undefined;\n    const docId = mirror.getId(doc);\n    return docId === 1 ? undefined : docId;\n}\nfunction serializeTextNode(n, options) {\n    const { maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, maskTextFn, maskInputOptions, maskInputFn, rootId, } = options;\n    const parentTagName = n.parentNode && n.parentNode.tagName;\n    let textContent = n.textContent;\n    const isStyle = parentTagName === 'STYLE' ? true : undefined;\n    const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n    const isTextarea = parentTagName === 'TEXTAREA' ? true : undefined;\n    if (isStyle && textContent) {\n        try {\n            if (n.nextSibling || n.previousSibling) {\n            }\n            else if (_optionalChain$5([n, 'access', _7 => _7.parentNode, 'access', _8 => _8.sheet, 'optionalAccess', _9 => _9.cssRules])) {\n                textContent = stringifyStylesheet(n.parentNode.sheet);\n            }\n        }\n        catch (err) {\n            console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n        }\n        textContent = absoluteToStylesheet(textContent, getHref(options.doc));\n    }\n    if (isScript) {\n        textContent = 'SCRIPT_PLACEHOLDER';\n    }\n    const forceMask = needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText);\n    if (!isStyle && !isScript && !isTextarea && textContent && forceMask) {\n        textContent = maskTextFn\n            ? maskTextFn(textContent, n.parentElement)\n            : textContent.replace(/[\\S]/g, '*');\n    }\n    if (isTextarea && textContent && (maskInputOptions.textarea || forceMask)) {\n        textContent = maskInputFn\n            ? maskInputFn(textContent, n.parentNode)\n            : textContent.replace(/[\\S]/g, '*');\n    }\n    if (parentTagName === 'OPTION' && textContent) {\n        const isInputMasked = shouldMaskInput({\n            type: null,\n            tagName: parentTagName,\n            maskInputOptions,\n        });\n        textContent = maskInputValue({\n            isMasked: needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked),\n            element: n,\n            value: textContent,\n            maskInputFn,\n        });\n    }\n    return {\n        type: NodeType$3.Text,\n        textContent: textContent || '',\n        isStyle,\n        rootId,\n    };\n}\nfunction serializeElementNode(n, options) {\n    const { doc, blockClass, blockSelector, unblockSelector, inlineStylesheet, maskInputOptions = {}, maskAttributeFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, rootId, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, } = options;\n    const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n    const tagName = getValidTagName(n);\n    let attributes = {};\n    const len = n.attributes.length;\n    for (let i = 0; i < len; i++) {\n        const attr = n.attributes[i];\n        if (attr.name && !ignoreAttribute(tagName, attr.name, attr.value)) {\n            attributes[attr.name] = transformAttribute(doc, tagName, toLowerCase(attr.name), attr.value, n, maskAttributeFn);\n        }\n    }\n    if (tagName === 'link' && inlineStylesheet) {\n        const stylesheet = Array.from(doc.styleSheets).find((s) => {\n            return s.href === n.href;\n        });\n        let cssText = null;\n        if (stylesheet) {\n            cssText = stringifyStylesheet(stylesheet);\n        }\n        if (cssText) {\n            attributes.rel = null;\n            attributes.href = null;\n            attributes.crossorigin = null;\n            attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n        }\n    }\n    if (tagName === 'style' &&\n        n.sheet &&\n        !(n.innerText || n.textContent || '').trim().length) {\n        const cssText = stringifyStylesheet(n.sheet);\n        if (cssText) {\n            attributes._cssText = absoluteToStylesheet(cssText, getHref(doc));\n        }\n    }\n    if (tagName === 'input' ||\n        tagName === 'textarea' ||\n        tagName === 'select' ||\n        tagName === 'option') {\n        const el = n;\n        const type = getInputType(el);\n        const value = getInputValue(el, toUpperCase(tagName), type);\n        const checked = el.checked;\n        if (type !== 'submit' && type !== 'button' && value) {\n            const forceMask = needMaskingText(el, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, shouldMaskInput({\n                type,\n                tagName: toUpperCase(tagName),\n                maskInputOptions,\n            }));\n            attributes.value = maskInputValue({\n                isMasked: forceMask,\n                element: el,\n                value,\n                maskInputFn,\n            });\n        }\n        if (checked) {\n            attributes.checked = checked;\n        }\n    }\n    if (tagName === 'option') {\n        if (n.selected && !maskInputOptions['select']) {\n            attributes.selected = true;\n        }\n        else {\n            delete attributes.selected;\n        }\n    }\n    if (tagName === 'canvas' && recordCanvas) {\n        if (n.__context === '2d') {\n            if (!is2DCanvasBlank(n)) {\n                attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            }\n        }\n        else if (!('__context' in n)) {\n            const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            const blankCanvas = doc.createElement('canvas');\n            blankCanvas.width = n.width;\n            blankCanvas.height = n.height;\n            const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            if (canvasDataURL !== blankCanvasDataURL) {\n                attributes.rr_dataURL = canvasDataURL;\n            }\n        }\n    }\n    if (tagName === 'img' && inlineImages) {\n        if (!canvasService) {\n            canvasService = doc.createElement('canvas');\n            canvasCtx = canvasService.getContext('2d');\n        }\n        const image = n;\n        const imageSrc = image.currentSrc || image.getAttribute('src') || '<unknown-src>';\n        const priorCrossOrigin = image.crossOrigin;\n        const recordInlineImage = () => {\n            image.removeEventListener('load', recordInlineImage);\n            try {\n                canvasService.width = image.naturalWidth;\n                canvasService.height = image.naturalHeight;\n                canvasCtx.drawImage(image, 0, 0);\n                attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            }\n            catch (err) {\n                if (image.crossOrigin !== 'anonymous') {\n                    image.crossOrigin = 'anonymous';\n                    if (image.complete && image.naturalWidth !== 0)\n                        recordInlineImage();\n                    else\n                        image.addEventListener('load', recordInlineImage);\n                    return;\n                }\n                else {\n                    console.warn(`Cannot inline img src=${imageSrc}! Error: ${err}`);\n                }\n            }\n            if (image.crossOrigin === 'anonymous') {\n                priorCrossOrigin\n                    ? (attributes.crossOrigin = priorCrossOrigin)\n                    : image.removeAttribute('crossorigin');\n            }\n        };\n        if (image.complete && image.naturalWidth !== 0)\n            recordInlineImage();\n        else\n            image.addEventListener('load', recordInlineImage);\n    }\n    if (tagName === 'audio' || tagName === 'video') {\n        attributes.rr_mediaState = n.paused\n            ? 'paused'\n            : 'played';\n        attributes.rr_mediaCurrentTime = n.currentTime;\n    }\n    if (!newlyAddedElement) {\n        if (n.scrollLeft) {\n            attributes.rr_scrollLeft = n.scrollLeft;\n        }\n        if (n.scrollTop) {\n            attributes.rr_scrollTop = n.scrollTop;\n        }\n    }\n    if (needBlock) {\n        const { width, height } = n.getBoundingClientRect();\n        attributes = {\n            class: attributes.class,\n            rr_width: `${width}px`,\n            rr_height: `${height}px`,\n        };\n    }\n    if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n        if (!needBlock && !getIframeContentDocument(n)) {\n            attributes.rr_src = attributes.src;\n        }\n        delete attributes.src;\n    }\n    let isCustomElement;\n    try {\n        if (customElements.get(tagName))\n            isCustomElement = true;\n    }\n    catch (e) {\n    }\n    return {\n        type: NodeType$3.Element,\n        tagName,\n        attributes,\n        childNodes: [],\n        isSVG: isSVGElement(n) || undefined,\n        needBlock,\n        rootId,\n        isCustom: isCustomElement,\n    };\n}\nfunction lowerIfExists(maybeAttr) {\n    if (maybeAttr === undefined || maybeAttr === null) {\n        return '';\n    }\n    else {\n        return maybeAttr.toLowerCase();\n    }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n    if (slimDOMOptions.comment && sn.type === NodeType$3.Comment) {\n        return true;\n    }\n    else if (sn.type === NodeType$3.Element) {\n        if (slimDOMOptions.script &&\n            (sn.tagName === 'script' ||\n                (sn.tagName === 'link' &&\n                    (sn.attributes.rel === 'preload' ||\n                        sn.attributes.rel === 'modulepreload')) ||\n                (sn.tagName === 'link' &&\n                    sn.attributes.rel === 'prefetch' &&\n                    typeof sn.attributes.href === 'string' &&\n                    extractFileExtension(sn.attributes.href) === 'js'))) {\n            return true;\n        }\n        else if (slimDOMOptions.headFavicon &&\n            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||\n                (sn.tagName === 'meta' &&\n                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||\n                        lowerIfExists(sn.attributes.name) === 'application-name' ||\n                        lowerIfExists(sn.attributes.rel) === 'icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {\n            return true;\n        }\n        else if (sn.tagName === 'meta') {\n            if (slimDOMOptions.headMetaDescKeywords &&\n                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaSocial &&\n                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||\n                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||\n                    lowerIfExists(sn.attributes.name) === 'pinterest')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaRobots &&\n                (lowerIfExists(sn.attributes.name) === 'robots' ||\n                    lowerIfExists(sn.attributes.name) === 'googlebot' ||\n                    lowerIfExists(sn.attributes.name) === 'bingbot')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaHttpEquiv &&\n                sn.attributes['http-equiv'] !== undefined) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaAuthorship &&\n                (lowerIfExists(sn.attributes.name) === 'author' ||\n                    lowerIfExists(sn.attributes.name) === 'generator' ||\n                    lowerIfExists(sn.attributes.name) === 'framework' ||\n                    lowerIfExists(sn.attributes.name) === 'publisher' ||\n                    lowerIfExists(sn.attributes.name) === 'progid' ||\n                    lowerIfExists(sn.attributes.property).match(/^article:/) ||\n                    lowerIfExists(sn.attributes.property).match(/^product:/))) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaVerification &&\n                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||\n                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||\n                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||\n                    lowerIfExists(sn.attributes.name) === 'verification' ||\n                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction serializeNodeWithId(n, options) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputOptions = {}, maskAttributeFn, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, onStylesheetLoad, stylesheetLoadTimeout = 5000, keepIframeSrcFn = () => false, newlyAddedElement = false, } = options;\n    let { preserveWhiteSpace = true } = options;\n    const _serializedNode = serializeNode(n, {\n        doc,\n        mirror,\n        blockClass,\n        blockSelector,\n        maskAllText,\n        unblockSelector,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        inlineStylesheet,\n        maskInputOptions,\n        maskAttributeFn,\n        maskTextFn,\n        maskInputFn,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        keepIframeSrcFn,\n        newlyAddedElement,\n    });\n    if (!_serializedNode) {\n        console.warn(n, 'not serialized');\n        return null;\n    }\n    let id;\n    if (mirror.hasNode(n)) {\n        id = mirror.getId(n);\n    }\n    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||\n        (!preserveWhiteSpace &&\n            _serializedNode.type === NodeType$3.Text &&\n            !_serializedNode.isStyle &&\n            !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length)) {\n        id = IGNORED_NODE;\n    }\n    else {\n        id = genId();\n    }\n    const serializedNode = Object.assign(_serializedNode, { id });\n    mirror.add(n, serializedNode);\n    if (id === IGNORED_NODE) {\n        return null;\n    }\n    if (onSerialize) {\n        onSerialize(n);\n    }\n    let recordChild = !skipChild;\n    if (serializedNode.type === NodeType$3.Element) {\n        recordChild = recordChild && !serializedNode.needBlock;\n        delete serializedNode.needBlock;\n        const shadowRoot = n.shadowRoot;\n        if (shadowRoot && isNativeShadowDom(shadowRoot))\n            serializedNode.isShadowHost = true;\n    }\n    if ((serializedNode.type === NodeType$3.Document ||\n        serializedNode.type === NodeType$3.Element) &&\n        recordChild) {\n        if (slimDOMOptions.headWhitespace &&\n            serializedNode.type === NodeType$3.Element &&\n            serializedNode.tagName === 'head') {\n            preserveWhiteSpace = false;\n        }\n        const bypassOptions = {\n            doc,\n            mirror,\n            blockClass,\n            blockSelector,\n            maskAllText,\n            unblockSelector,\n            maskTextClass,\n            unmaskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild,\n            inlineStylesheet,\n            maskInputOptions,\n            maskAttributeFn,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            onStylesheetLoad,\n            stylesheetLoadTimeout,\n            keepIframeSrcFn,\n        };\n        for (const childN of Array.from(n.childNodes)) {\n            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n            if (serializedChildNode) {\n                serializedNode.childNodes.push(serializedChildNode);\n            }\n        }\n        if (isElement$1(n) && n.shadowRoot) {\n            for (const childN of Array.from(n.shadowRoot.childNodes)) {\n                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n                if (serializedChildNode) {\n                    isNativeShadowDom(n.shadowRoot) &&\n                        (serializedChildNode.isShadow = true);\n                    serializedNode.childNodes.push(serializedChildNode);\n                }\n            }\n        }\n    }\n    if (n.parentNode &&\n        isShadowRoot(n.parentNode) &&\n        isNativeShadowDom(n.parentNode)) {\n        serializedNode.isShadow = true;\n    }\n    if (serializedNode.type === NodeType$3.Element &&\n        serializedNode.tagName === 'iframe') {\n        onceIframeLoaded(n, () => {\n            const iframeDoc = getIframeContentDocument(n);\n            if (iframeDoc && onIframeLoad) {\n                const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n                    doc: iframeDoc,\n                    mirror,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskAllText,\n                    maskTextClass,\n                    unmaskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputOptions,\n                    maskAttributeFn,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    onStylesheetLoad,\n                    stylesheetLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedIframeNode) {\n                    onIframeLoad(n, serializedIframeNode);\n                }\n            }\n        }, iframeLoadTimeout);\n    }\n    if (serializedNode.type === NodeType$3.Element &&\n        serializedNode.tagName === 'link' &&\n        typeof serializedNode.attributes.rel === 'string' &&\n        (serializedNode.attributes.rel === 'stylesheet' ||\n            (serializedNode.attributes.rel === 'preload' &&\n                typeof serializedNode.attributes.href === 'string' &&\n                extractFileExtension(serializedNode.attributes.href) === 'css'))) {\n        onceStylesheetLoaded(n, () => {\n            if (onStylesheetLoad) {\n                const serializedLinkNode = serializeNodeWithId(n, {\n                    doc,\n                    mirror,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskAllText,\n                    maskTextClass,\n                    unmaskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputOptions,\n                    maskAttributeFn,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    onStylesheetLoad,\n                    stylesheetLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedLinkNode) {\n                    onStylesheetLoad(n, serializedLinkNode);\n                }\n            }\n        }, stylesheetLoadTimeout);\n    }\n    return serializedNode;\n}\nfunction snapshot(n, options) {\n    const { mirror = new Mirror(), blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskAllInputs = false, maskAttributeFn, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, onStylesheetLoad, stylesheetLoadTimeout, keepIframeSrcFn = () => false, } = options || {};\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n        }\n        : maskAllInputs === false\n            ? {}\n            : maskAllInputs;\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all'\n        ?\n            {\n                script: true,\n                comment: true,\n                headFavicon: true,\n                headWhitespace: true,\n                headMetaDescKeywords: slimDOM === 'all',\n                headMetaSocial: true,\n                headMetaRobots: true,\n                headMetaHttpEquiv: true,\n                headMetaAuthorship: true,\n                headMetaVerification: true,\n            }\n        : slimDOM === false\n            ? {}\n            : slimDOM;\n    return serializeNodeWithId(n, {\n        doc: n,\n        mirror,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maskAllText,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        skipChild: false,\n        inlineStylesheet,\n        maskInputOptions,\n        maskAttributeFn,\n        maskTextFn,\n        maskInputFn,\n        slimDOMOptions,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        preserveWhiteSpace,\n        onSerialize,\n        onIframeLoad,\n        iframeLoadTimeout,\n        onStylesheetLoad,\n        stylesheetLoadTimeout,\n        keepIframeSrcFn,\n        newlyAddedElement: false,\n    });\n}\n\nfunction _optionalChain$4(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nfunction on(type, fn, target = document) {\n    const options = { capture: true, passive: true };\n    target.addEventListener(type, fn, options);\n    return () => target.removeEventListener(type, fn, options);\n}\nconst DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' +\n    '\\r\\n' +\n    'now you can use replayer.getMirror() to access the mirror instance of a replayer,' +\n    '\\r\\n' +\n    'or you can use record.mirror to access the mirror instance during recording.';\nlet _mirror = {\n    map: {},\n    getId() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return -1;\n    },\n    getNode() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return null;\n    },\n    removeNodeFromMap() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n    has() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return false;\n    },\n    reset() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n    _mirror = new Proxy(_mirror, {\n        get(target, prop, receiver) {\n            if (prop === 'map') {\n                console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n    });\n}\nfunction throttle$1(func, wait, options = {}) {\n    let timeout = null;\n    let previous = 0;\n    return function (...args) {\n        const now = Date.now();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        const context = this;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout$1(timeout);\n                timeout = null;\n            }\n            previous = now;\n            func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout$1(() => {\n                previous = options.leading === false ? 0 : Date.now();\n                timeout = null;\n                func.apply(context, args);\n            }, remaining);\n        }\n    };\n}\nfunction hookSetter(target, key, d, isRevoked, win = window) {\n    const original = win.Object.getOwnPropertyDescriptor(target, key);\n    win.Object.defineProperty(target, key, isRevoked\n        ? d\n        : {\n            set(value) {\n                setTimeout$1(() => {\n                    d.set.call(this, value);\n                }, 0);\n                if (original && original.set) {\n                    original.set.call(this, value);\n                }\n            },\n        });\n    return () => hookSetter(target, key, original || {}, true);\n}\nfunction patch(source, name, replacement) {\n    try {\n        if (!(name in source)) {\n            return () => {\n            };\n        }\n        const original = source[name];\n        const wrapped = replacement(original);\n        if (typeof wrapped === 'function') {\n            wrapped.prototype = wrapped.prototype || {};\n            Object.defineProperties(wrapped, {\n                __rrweb_original__: {\n                    enumerable: false,\n                    value: original,\n                },\n            });\n        }\n        source[name] = wrapped;\n        return () => {\n            source[name] = original;\n        };\n    }\n    catch (e2) {\n        return () => {\n        };\n    }\n}\nlet nowTimestamp = Date.now;\nif (!(/[1-9][0-9]{12}/.test(Date.now().toString()))) {\n    nowTimestamp = () => new Date().getTime();\n}\nfunction getWindowScroll(win) {\n    const doc = win.document;\n    return {\n        left: doc.scrollingElement\n            ? doc.scrollingElement.scrollLeft\n            : win.pageXOffset !== undefined\n                ? win.pageXOffset\n                : _optionalChain$4([doc, 'optionalAccess', _ => _.documentElement, 'access', _2 => _2.scrollLeft]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _3 => _3.body, 'optionalAccess', _4 => _4.parentElement, 'optionalAccess', _5 => _5.scrollLeft]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _6 => _6.body, 'optionalAccess', _7 => _7.scrollLeft]) ||\n                    0,\n        top: doc.scrollingElement\n            ? doc.scrollingElement.scrollTop\n            : win.pageYOffset !== undefined\n                ? win.pageYOffset\n                : _optionalChain$4([doc, 'optionalAccess', _8 => _8.documentElement, 'access', _9 => _9.scrollTop]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _10 => _10.body, 'optionalAccess', _11 => _11.parentElement, 'optionalAccess', _12 => _12.scrollTop]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _13 => _13.body, 'optionalAccess', _14 => _14.scrollTop]) ||\n                    0,\n    };\n}\nfunction getWindowHeight() {\n    return (window.innerHeight ||\n        (document.documentElement && document.documentElement.clientHeight) ||\n        (document.body && document.body.clientHeight));\n}\nfunction getWindowWidth() {\n    return (window.innerWidth ||\n        (document.documentElement && document.documentElement.clientWidth) ||\n        (document.body && document.body.clientWidth));\n}\nfunction closestElementOfNode(node) {\n    if (!node) {\n        return null;\n    }\n    const el = node.nodeType === node.ELEMENT_NODE\n        ? node\n        : node.parentElement;\n    return el;\n}\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector, checkAncestors) {\n    if (!node) {\n        return false;\n    }\n    const el = closestElementOfNode(node);\n    if (!el) {\n        return false;\n    }\n    const blockedPredicate = createMatchPredicate(blockClass, blockSelector);\n    if (!checkAncestors) {\n        const isUnblocked = unblockSelector && el.matches(unblockSelector);\n        return blockedPredicate(el) && !isUnblocked;\n    }\n    const blockDistance = distanceToMatch(el, blockedPredicate);\n    let unblockDistance = -1;\n    if (blockDistance < 0) {\n        return false;\n    }\n    if (unblockSelector) {\n        unblockDistance = distanceToMatch(el, createMatchPredicate(null, unblockSelector));\n    }\n    if (blockDistance > -1 && unblockDistance < 0) {\n        return true;\n    }\n    return blockDistance < unblockDistance;\n}\nfunction isSerialized(n, mirror) {\n    return mirror.getId(n) !== -1;\n}\nfunction isIgnored(n, mirror) {\n    return mirror.getId(n) === IGNORED_NODE;\n}\nfunction isAncestorRemoved(target, mirror) {\n    if (isShadowRoot(target)) {\n        return false;\n    }\n    const id = mirror.getId(target);\n    if (!mirror.has(id)) {\n        return true;\n    }\n    if (target.parentNode &&\n        target.parentNode.nodeType === target.DOCUMENT_NODE) {\n        return false;\n    }\n    if (!target.parentNode) {\n        return true;\n    }\n    return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction legacy_isTouchEvent(event) {\n    return Boolean(event.changedTouches);\n}\nfunction polyfill(win = window) {\n    if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n        win.NodeList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n        win.DOMTokenList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if (!Node.prototype.contains) {\n        Node.prototype.contains = (...args) => {\n            let node = args[0];\n            if (!(0 in args)) {\n                throw new TypeError('1 argument is required');\n            }\n            do {\n                if (this === node) {\n                    return true;\n                }\n            } while ((node = node && node.parentNode));\n            return false;\n        };\n    }\n}\nfunction isSerializedIframe(n, mirror) {\n    return Boolean(n.nodeName === 'IFRAME' && mirror.getMeta(n));\n}\nfunction isSerializedStylesheet(n, mirror) {\n    return Boolean(n.nodeName === 'LINK' &&\n        n.nodeType === n.ELEMENT_NODE &&\n        n.getAttribute &&\n        n.getAttribute('rel') === 'stylesheet' &&\n        mirror.getMeta(n));\n}\nfunction hasShadowRoot(n) {\n    return Boolean(_optionalChain$4([n, 'optionalAccess', _18 => _18.shadowRoot]));\n}\nclass StyleSheetMirror {\n    constructor() {\n        this.id = 1;\n        this.styleIDMap = new WeakMap();\n        this.idStyleMap = new Map();\n    }\n    getId(stylesheet) {\n        return _nullishCoalesce(this.styleIDMap.get(stylesheet), () => ( -1));\n    }\n    has(stylesheet) {\n        return this.styleIDMap.has(stylesheet);\n    }\n    add(stylesheet, id) {\n        if (this.has(stylesheet))\n            return this.getId(stylesheet);\n        let newId;\n        if (id === undefined) {\n            newId = this.id++;\n        }\n        else\n            newId = id;\n        this.styleIDMap.set(stylesheet, newId);\n        this.idStyleMap.set(newId, stylesheet);\n        return newId;\n    }\n    getStyle(id) {\n        return this.idStyleMap.get(id) || null;\n    }\n    reset() {\n        this.styleIDMap = new WeakMap();\n        this.idStyleMap = new Map();\n        this.id = 1;\n    }\n    generateId() {\n        return this.id++;\n    }\n}\nfunction getShadowHost(n) {\n    let shadowHost = null;\n    if (_optionalChain$4([n, 'access', _19 => _19.getRootNode, 'optionalCall', _20 => _20(), 'optionalAccess', _21 => _21.nodeType]) === Node.DOCUMENT_FRAGMENT_NODE &&\n        n.getRootNode().host)\n        shadowHost = n.getRootNode().host;\n    return shadowHost;\n}\nfunction getRootShadowHost(n) {\n    let rootShadowHost = n;\n    let shadowHost;\n    while ((shadowHost = getShadowHost(rootShadowHost)))\n        rootShadowHost = shadowHost;\n    return rootShadowHost;\n}\nfunction shadowHostInDom(n) {\n    const doc = n.ownerDocument;\n    if (!doc)\n        return false;\n    const shadowHost = getRootShadowHost(n);\n    return doc.contains(shadowHost);\n}\nfunction inDom(n) {\n    const doc = n.ownerDocument;\n    if (!doc)\n        return false;\n    return doc.contains(n) || shadowHostInDom(n);\n}\nconst cachedImplementations = {};\nfunction getImplementation(name) {\n    const cached = cachedImplementations[name];\n    if (cached) {\n        return cached;\n    }\n    const document = window.document;\n    let impl = window[name];\n    if (document && typeof document.createElement === 'function') {\n        try {\n            const sandbox = document.createElement('iframe');\n            sandbox.hidden = true;\n            document.head.appendChild(sandbox);\n            const contentWindow = sandbox.contentWindow;\n            if (contentWindow && contentWindow[name]) {\n                impl =\n                    contentWindow[name];\n            }\n            document.head.removeChild(sandbox);\n        }\n        catch (e) {\n        }\n    }\n    return (cachedImplementations[name] = impl.bind(window));\n}\nfunction onRequestAnimationFrame(...rest) {\n    return getImplementation('requestAnimationFrame')(...rest);\n}\nfunction setTimeout$1(...rest) {\n    return getImplementation('setTimeout')(...rest);\n}\nfunction clearTimeout$1(...rest) {\n    return getImplementation('clearTimeout')(...rest);\n}\n\nvar EventType = /* @__PURE__ */ ((EventType2) => {\n  EventType2[EventType2[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n  EventType2[EventType2[\"Load\"] = 1] = \"Load\";\n  EventType2[EventType2[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n  EventType2[EventType2[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n  EventType2[EventType2[\"Meta\"] = 4] = \"Meta\";\n  EventType2[EventType2[\"Custom\"] = 5] = \"Custom\";\n  EventType2[EventType2[\"Plugin\"] = 6] = \"Plugin\";\n  return EventType2;\n})(EventType || {});\nvar IncrementalSource = /* @__PURE__ */ ((IncrementalSource2) => {\n  IncrementalSource2[IncrementalSource2[\"Mutation\"] = 0] = \"Mutation\";\n  IncrementalSource2[IncrementalSource2[\"MouseMove\"] = 1] = \"MouseMove\";\n  IncrementalSource2[IncrementalSource2[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n  IncrementalSource2[IncrementalSource2[\"Scroll\"] = 3] = \"Scroll\";\n  IncrementalSource2[IncrementalSource2[\"ViewportResize\"] = 4] = \"ViewportResize\";\n  IncrementalSource2[IncrementalSource2[\"Input\"] = 5] = \"Input\";\n  IncrementalSource2[IncrementalSource2[\"TouchMove\"] = 6] = \"TouchMove\";\n  IncrementalSource2[IncrementalSource2[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n  IncrementalSource2[IncrementalSource2[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n  IncrementalSource2[IncrementalSource2[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n  IncrementalSource2[IncrementalSource2[\"Font\"] = 10] = \"Font\";\n  IncrementalSource2[IncrementalSource2[\"Log\"] = 11] = \"Log\";\n  IncrementalSource2[IncrementalSource2[\"Drag\"] = 12] = \"Drag\";\n  IncrementalSource2[IncrementalSource2[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n  IncrementalSource2[IncrementalSource2[\"Selection\"] = 14] = \"Selection\";\n  IncrementalSource2[IncrementalSource2[\"AdoptedStyleSheet\"] = 15] = \"AdoptedStyleSheet\";\n  IncrementalSource2[IncrementalSource2[\"CustomElement\"] = 16] = \"CustomElement\";\n  return IncrementalSource2;\n})(IncrementalSource || {});\nvar MouseInteractions = /* @__PURE__ */ ((MouseInteractions2) => {\n  MouseInteractions2[MouseInteractions2[\"MouseUp\"] = 0] = \"MouseUp\";\n  MouseInteractions2[MouseInteractions2[\"MouseDown\"] = 1] = \"MouseDown\";\n  MouseInteractions2[MouseInteractions2[\"Click\"] = 2] = \"Click\";\n  MouseInteractions2[MouseInteractions2[\"ContextMenu\"] = 3] = \"ContextMenu\";\n  MouseInteractions2[MouseInteractions2[\"DblClick\"] = 4] = \"DblClick\";\n  MouseInteractions2[MouseInteractions2[\"Focus\"] = 5] = \"Focus\";\n  MouseInteractions2[MouseInteractions2[\"Blur\"] = 6] = \"Blur\";\n  MouseInteractions2[MouseInteractions2[\"TouchStart\"] = 7] = \"TouchStart\";\n  MouseInteractions2[MouseInteractions2[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n  MouseInteractions2[MouseInteractions2[\"TouchEnd\"] = 9] = \"TouchEnd\";\n  MouseInteractions2[MouseInteractions2[\"TouchCancel\"] = 10] = \"TouchCancel\";\n  return MouseInteractions2;\n})(MouseInteractions || {});\nvar PointerTypes = /* @__PURE__ */ ((PointerTypes2) => {\n  PointerTypes2[PointerTypes2[\"Mouse\"] = 0] = \"Mouse\";\n  PointerTypes2[PointerTypes2[\"Pen\"] = 1] = \"Pen\";\n  PointerTypes2[PointerTypes2[\"Touch\"] = 2] = \"Touch\";\n  return PointerTypes2;\n})(PointerTypes || {});\n\nvar NodeType$1;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType$1 || (NodeType$1 = {}));\nvar NodeType$2;\n(function (NodeType) {\n    NodeType[NodeType[\"PLACEHOLDER\"] = 0] = \"PLACEHOLDER\";\n    NodeType[NodeType[\"ELEMENT_NODE\"] = 1] = \"ELEMENT_NODE\";\n    NodeType[NodeType[\"ATTRIBUTE_NODE\"] = 2] = \"ATTRIBUTE_NODE\";\n    NodeType[NodeType[\"TEXT_NODE\"] = 3] = \"TEXT_NODE\";\n    NodeType[NodeType[\"CDATA_SECTION_NODE\"] = 4] = \"CDATA_SECTION_NODE\";\n    NodeType[NodeType[\"ENTITY_REFERENCE_NODE\"] = 5] = \"ENTITY_REFERENCE_NODE\";\n    NodeType[NodeType[\"ENTITY_NODE\"] = 6] = \"ENTITY_NODE\";\n    NodeType[NodeType[\"PROCESSING_INSTRUCTION_NODE\"] = 7] = \"PROCESSING_INSTRUCTION_NODE\";\n    NodeType[NodeType[\"COMMENT_NODE\"] = 8] = \"COMMENT_NODE\";\n    NodeType[NodeType[\"DOCUMENT_NODE\"] = 9] = \"DOCUMENT_NODE\";\n    NodeType[NodeType[\"DOCUMENT_TYPE_NODE\"] = 10] = \"DOCUMENT_TYPE_NODE\";\n    NodeType[NodeType[\"DOCUMENT_FRAGMENT_NODE\"] = 11] = \"DOCUMENT_FRAGMENT_NODE\";\n})(NodeType$2 || (NodeType$2 = {}));\n\nfunction getIFrameContentDocument(iframe) {\n    try {\n        return iframe.contentDocument;\n    }\n    catch (e) {\n    }\n}\nfunction getIFrameContentWindow(iframe) {\n    try {\n        return iframe.contentWindow;\n    }\n    catch (e) {\n    }\n}\n\nfunction _optionalChain$3(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nfunction isNodeInLinkedList(n) {\n    return '__ln' in n;\n}\nclass DoubleLinkedList {\n    constructor() {\n        this.length = 0;\n        this.head = null;\n        this.tail = null;\n    }\n    get(position) {\n        if (position >= this.length) {\n            throw new Error('Position outside of list range');\n        }\n        let current = this.head;\n        for (let index = 0; index < position; index++) {\n            current = _optionalChain$3([current, 'optionalAccess', _ => _.next]) || null;\n        }\n        return current;\n    }\n    addNode(n) {\n        const node = {\n            value: n,\n            previous: null,\n            next: null,\n        };\n        n.__ln = node;\n        if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n            const current = n.previousSibling.__ln.next;\n            node.next = current;\n            node.previous = n.previousSibling.__ln;\n            n.previousSibling.__ln.next = node;\n            if (current) {\n                current.previous = node;\n            }\n        }\n        else if (n.nextSibling &&\n            isNodeInLinkedList(n.nextSibling) &&\n            n.nextSibling.__ln.previous) {\n            const current = n.nextSibling.__ln.previous;\n            node.previous = current;\n            node.next = n.nextSibling.__ln;\n            n.nextSibling.__ln.previous = node;\n            if (current) {\n                current.next = node;\n            }\n        }\n        else {\n            if (this.head) {\n                this.head.previous = node;\n            }\n            node.next = this.head;\n            this.head = node;\n        }\n        if (node.next === null) {\n            this.tail = node;\n        }\n        this.length++;\n    }\n    removeNode(n) {\n        const current = n.__ln;\n        if (!this.head) {\n            return;\n        }\n        if (!current.previous) {\n            this.head = current.next;\n            if (this.head) {\n                this.head.previous = null;\n            }\n            else {\n                this.tail = null;\n            }\n        }\n        else {\n            current.previous.next = current.next;\n            if (current.next) {\n                current.next.previous = current.previous;\n            }\n            else {\n                this.tail = current.previous;\n            }\n        }\n        if (n.__ln) {\n            delete n.__ln;\n        }\n        this.length--;\n    }\n}\nconst moveKey = (id, parentId) => `${id}@${parentId}`;\nclass MutationBuffer {\n    constructor() {\n        this.frozen = false;\n        this.locked = false;\n        this.texts = [];\n        this.attributes = [];\n        this.attributeMap = new WeakMap();\n        this.removes = [];\n        this.mapRemoves = [];\n        this.movedMap = {};\n        this.addedSet = new Set();\n        this.movedSet = new Set();\n        this.droppedSet = new Set();\n        this.processMutations = (mutations) => {\n            mutations.forEach(this.processMutation);\n            this.emit();\n        };\n        this.emit = () => {\n            if (this.frozen || this.locked) {\n                return;\n            }\n            const adds = [];\n            const addedIds = new Set();\n            const addList = new DoubleLinkedList();\n            const getNextId = (n) => {\n                let ns = n;\n                let nextId = IGNORED_NODE;\n                while (nextId === IGNORED_NODE) {\n                    ns = ns && ns.nextSibling;\n                    nextId = ns && this.mirror.getId(ns);\n                }\n                return nextId;\n            };\n            const pushAdd = (n) => {\n                if (!n.parentNode || !inDom(n)) {\n                    return;\n                }\n                const parentId = isShadowRoot(n.parentNode)\n                    ? this.mirror.getId(getShadowHost(n))\n                    : this.mirror.getId(n.parentNode);\n                const nextId = getNextId(n);\n                if (parentId === -1 || nextId === -1) {\n                    return addList.addNode(n);\n                }\n                const sn = serializeNodeWithId(n, {\n                    doc: this.doc,\n                    mirror: this.mirror,\n                    blockClass: this.blockClass,\n                    blockSelector: this.blockSelector,\n                    maskAllText: this.maskAllText,\n                    unblockSelector: this.unblockSelector,\n                    maskTextClass: this.maskTextClass,\n                    unmaskTextClass: this.unmaskTextClass,\n                    maskTextSelector: this.maskTextSelector,\n                    unmaskTextSelector: this.unmaskTextSelector,\n                    skipChild: true,\n                    newlyAddedElement: true,\n                    inlineStylesheet: this.inlineStylesheet,\n                    maskInputOptions: this.maskInputOptions,\n                    maskAttributeFn: this.maskAttributeFn,\n                    maskTextFn: this.maskTextFn,\n                    maskInputFn: this.maskInputFn,\n                    slimDOMOptions: this.slimDOMOptions,\n                    dataURLOptions: this.dataURLOptions,\n                    recordCanvas: this.recordCanvas,\n                    inlineImages: this.inlineImages,\n                    onSerialize: (currentN) => {\n                        if (isSerializedIframe(currentN, this.mirror) &&\n                            !isBlocked(currentN, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n                            this.iframeManager.addIframe(currentN);\n                        }\n                        if (isSerializedStylesheet(currentN, this.mirror)) {\n                            this.stylesheetManager.trackLinkElement(currentN);\n                        }\n                        if (hasShadowRoot(n)) {\n                            this.shadowDomManager.addShadowRoot(n.shadowRoot, this.doc);\n                        }\n                    },\n                    onIframeLoad: (iframe, childSn) => {\n                        if (isBlocked(iframe, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n                            return;\n                        }\n                        this.iframeManager.attachIframe(iframe, childSn);\n                        if (iframe.contentWindow) {\n                            this.canvasManager.addWindow(iframe.contentWindow);\n                        }\n                        this.shadowDomManager.observeAttachShadow(iframe);\n                    },\n                    onStylesheetLoad: (link, childSn) => {\n                        this.stylesheetManager.attachLinkElement(link, childSn);\n                    },\n                });\n                if (sn) {\n                    adds.push({\n                        parentId,\n                        nextId,\n                        node: sn,\n                    });\n                    addedIds.add(sn.id);\n                }\n            };\n            while (this.mapRemoves.length) {\n                this.mirror.removeNodeFromMap(this.mapRemoves.shift());\n            }\n            for (const n of this.movedSet) {\n                if (isParentRemoved(this.removes, n, this.mirror) &&\n                    !this.movedSet.has(n.parentNode)) {\n                    continue;\n                }\n                pushAdd(n);\n            }\n            for (const n of this.addedSet) {\n                if (!isAncestorInSet(this.droppedSet, n) &&\n                    !isParentRemoved(this.removes, n, this.mirror)) {\n                    pushAdd(n);\n                }\n                else if (isAncestorInSet(this.movedSet, n)) {\n                    pushAdd(n);\n                }\n                else {\n                    this.droppedSet.add(n);\n                }\n            }\n            let candidate = null;\n            while (addList.length) {\n                let node = null;\n                if (candidate) {\n                    const parentId = this.mirror.getId(candidate.value.parentNode);\n                    const nextId = getNextId(candidate.value);\n                    if (parentId !== -1 && nextId !== -1) {\n                        node = candidate;\n                    }\n                }\n                if (!node) {\n                    let tailNode = addList.tail;\n                    while (tailNode) {\n                        const _node = tailNode;\n                        tailNode = tailNode.previous;\n                        if (_node) {\n                            const parentId = this.mirror.getId(_node.value.parentNode);\n                            const nextId = getNextId(_node.value);\n                            if (nextId === -1)\n                                continue;\n                            else if (parentId !== -1) {\n                                node = _node;\n                                break;\n                            }\n                            else {\n                                const unhandledNode = _node.value;\n                                if (unhandledNode.parentNode &&\n                                    unhandledNode.parentNode.nodeType ===\n                                        Node.DOCUMENT_FRAGMENT_NODE) {\n                                    const shadowHost = unhandledNode.parentNode\n                                        .host;\n                                    const parentId = this.mirror.getId(shadowHost);\n                                    if (parentId !== -1) {\n                                        node = _node;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!node) {\n                    while (addList.head) {\n                        addList.removeNode(addList.head.value);\n                    }\n                    break;\n                }\n                candidate = node.previous;\n                addList.removeNode(node.value);\n                pushAdd(node.value);\n            }\n            const payload = {\n                texts: this.texts\n                    .map((text) => ({\n                    id: this.mirror.getId(text.node),\n                    value: text.value,\n                }))\n                    .filter((text) => !addedIds.has(text.id))\n                    .filter((text) => this.mirror.has(text.id)),\n                attributes: this.attributes\n                    .map((attribute) => {\n                    const { attributes } = attribute;\n                    if (typeof attributes.style === 'string') {\n                        const diffAsStr = JSON.stringify(attribute.styleDiff);\n                        const unchangedAsStr = JSON.stringify(attribute._unchangedStyles);\n                        if (diffAsStr.length < attributes.style.length) {\n                            if ((diffAsStr + unchangedAsStr).split('var(').length ===\n                                attributes.style.split('var(').length) {\n                                attributes.style = attribute.styleDiff;\n                            }\n                        }\n                    }\n                    return {\n                        id: this.mirror.getId(attribute.node),\n                        attributes: attributes,\n                    };\n                })\n                    .filter((attribute) => !addedIds.has(attribute.id))\n                    .filter((attribute) => this.mirror.has(attribute.id)),\n                removes: this.removes,\n                adds,\n            };\n            if (!payload.texts.length &&\n                !payload.attributes.length &&\n                !payload.removes.length &&\n                !payload.adds.length) {\n                return;\n            }\n            this.texts = [];\n            this.attributes = [];\n            this.attributeMap = new WeakMap();\n            this.removes = [];\n            this.addedSet = new Set();\n            this.movedSet = new Set();\n            this.droppedSet = new Set();\n            this.movedMap = {};\n            this.mutationCb(payload);\n        };\n        this.processMutation = (m) => {\n            if (isIgnored(m.target, this.mirror)) {\n                return;\n            }\n            switch (m.type) {\n                case 'characterData': {\n                    const value = m.target.textContent;\n                    if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) &&\n                        value !== m.oldValue) {\n                        this.texts.push({\n                            value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, this.maskAllText) && value\n                                ? this.maskTextFn\n                                    ? this.maskTextFn(value, closestElementOfNode(m.target))\n                                    : value.replace(/[\\S]/g, '*')\n                                : value,\n                            node: m.target,\n                        });\n                    }\n                    break;\n                }\n                case 'attributes': {\n                    const target = m.target;\n                    let attributeName = m.attributeName;\n                    let value = m.target.getAttribute(attributeName);\n                    if (attributeName === 'value') {\n                        const type = getInputType(target);\n                        const tagName = target.tagName;\n                        value = getInputValue(target, tagName, type);\n                        const isInputMasked = shouldMaskInput({\n                            maskInputOptions: this.maskInputOptions,\n                            tagName,\n                            type,\n                        });\n                        const forceMask = needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, isInputMasked);\n                        value = maskInputValue({\n                            isMasked: forceMask,\n                            element: target,\n                            value,\n                            maskInputFn: this.maskInputFn,\n                        });\n                    }\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) ||\n                        value === m.oldValue) {\n                        return;\n                    }\n                    let item = this.attributeMap.get(m.target);\n                    if (target.tagName === 'IFRAME' &&\n                        attributeName === 'src' &&\n                        !this.keepIframeSrcFn(value)) {\n                        const iframeDoc = getIFrameContentDocument(target);\n                        if (!iframeDoc) {\n                            attributeName = 'rr_src';\n                        }\n                        else {\n                            return;\n                        }\n                    }\n                    if (!item) {\n                        item = {\n                            node: m.target,\n                            attributes: {},\n                            styleDiff: {},\n                            _unchangedStyles: {},\n                        };\n                        this.attributes.push(item);\n                        this.attributeMap.set(m.target, item);\n                    }\n                    if (attributeName === 'type' &&\n                        target.tagName === 'INPUT' &&\n                        (m.oldValue || '').toLowerCase() === 'password') {\n                        target.setAttribute('data-rr-is-password', 'true');\n                    }\n                    if (!ignoreAttribute(target.tagName, attributeName)) {\n                        item.attributes[attributeName] = transformAttribute(this.doc, toLowerCase(target.tagName), toLowerCase(attributeName), value, target, this.maskAttributeFn);\n                        if (attributeName === 'style') {\n                            if (!this.unattachedDoc) {\n                                try {\n                                    this.unattachedDoc =\n                                        document.implementation.createHTMLDocument();\n                                }\n                                catch (e) {\n                                    this.unattachedDoc = this.doc;\n                                }\n                            }\n                            const old = this.unattachedDoc.createElement('span');\n                            if (m.oldValue) {\n                                old.setAttribute('style', m.oldValue);\n                            }\n                            for (const pname of Array.from(target.style)) {\n                                const newValue = target.style.getPropertyValue(pname);\n                                const newPriority = target.style.getPropertyPriority(pname);\n                                if (newValue !== old.style.getPropertyValue(pname) ||\n                                    newPriority !== old.style.getPropertyPriority(pname)) {\n                                    if (newPriority === '') {\n                                        item.styleDiff[pname] = newValue;\n                                    }\n                                    else {\n                                        item.styleDiff[pname] = [newValue, newPriority];\n                                    }\n                                }\n                                else {\n                                    item._unchangedStyles[pname] = [newValue, newPriority];\n                                }\n                            }\n                            for (const pname of Array.from(old.style)) {\n                                if (target.style.getPropertyValue(pname) === '') {\n                                    item.styleDiff[pname] = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n                case 'childList': {\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, true)) {\n                        return;\n                    }\n                    m.addedNodes.forEach((n) => this.genAdds(n, m.target));\n                    m.removedNodes.forEach((n) => {\n                        const nodeId = this.mirror.getId(n);\n                        const parentId = isShadowRoot(m.target)\n                            ? this.mirror.getId(m.target.host)\n                            : this.mirror.getId(m.target);\n                        if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) ||\n                            isIgnored(n, this.mirror) ||\n                            !isSerialized(n, this.mirror)) {\n                            return;\n                        }\n                        if (this.addedSet.has(n)) {\n                            deepDelete(this.addedSet, n);\n                            this.droppedSet.add(n);\n                        }\n                        else if (this.addedSet.has(m.target) && nodeId === -1) ;\n                        else if (isAncestorRemoved(m.target, this.mirror)) ;\n                        else if (this.movedSet.has(n) &&\n                            this.movedMap[moveKey(nodeId, parentId)]) {\n                            deepDelete(this.movedSet, n);\n                        }\n                        else {\n                            this.removes.push({\n                                parentId,\n                                id: nodeId,\n                                isShadow: isShadowRoot(m.target) && isNativeShadowDom(m.target)\n                                    ? true\n                                    : undefined,\n                            });\n                        }\n                        this.mapRemoves.push(n);\n                    });\n                    break;\n                }\n            }\n        };\n        this.genAdds = (n, target) => {\n            if (this.processedNodeManager.inOtherBuffer(n, this))\n                return;\n            if (this.addedSet.has(n) || this.movedSet.has(n))\n                return;\n            if (this.mirror.hasNode(n)) {\n                if (isIgnored(n, this.mirror)) {\n                    return;\n                }\n                this.movedSet.add(n);\n                let targetId = null;\n                if (target && this.mirror.hasNode(target)) {\n                    targetId = this.mirror.getId(target);\n                }\n                if (targetId && targetId !== -1) {\n                    this.movedMap[moveKey(this.mirror.getId(n), targetId)] = true;\n                }\n            }\n            else {\n                this.addedSet.add(n);\n                this.droppedSet.delete(n);\n            }\n            if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n                n.childNodes.forEach((childN) => this.genAdds(childN));\n                if (hasShadowRoot(n)) {\n                    n.shadowRoot.childNodes.forEach((childN) => {\n                        this.processedNodeManager.add(childN, this);\n                        this.genAdds(childN, n);\n                    });\n                }\n            }\n        };\n    }\n    init(options) {\n        [\n            'mutationCb',\n            'blockClass',\n            'blockSelector',\n            'unblockSelector',\n            'maskAllText',\n            'maskTextClass',\n            'unmaskTextClass',\n            'maskTextSelector',\n            'unmaskTextSelector',\n            'inlineStylesheet',\n            'maskInputOptions',\n            'maskAttributeFn',\n            'maskTextFn',\n            'maskInputFn',\n            'keepIframeSrcFn',\n            'recordCanvas',\n            'inlineImages',\n            'slimDOMOptions',\n            'dataURLOptions',\n            'doc',\n            'mirror',\n            'iframeManager',\n            'stylesheetManager',\n            'shadowDomManager',\n            'canvasManager',\n            'processedNodeManager',\n        ].forEach((key) => {\n            this[key] = options[key];\n        });\n    }\n    freeze() {\n        this.frozen = true;\n        this.canvasManager.freeze();\n    }\n    unfreeze() {\n        this.frozen = false;\n        this.canvasManager.unfreeze();\n        this.emit();\n    }\n    isFrozen() {\n        return this.frozen;\n    }\n    lock() {\n        this.locked = true;\n        this.canvasManager.lock();\n    }\n    unlock() {\n        this.locked = false;\n        this.canvasManager.unlock();\n        this.emit();\n    }\n    reset() {\n        this.shadowDomManager.reset();\n        this.canvasManager.reset();\n    }\n}\nfunction deepDelete(addsSet, n) {\n    addsSet.delete(n);\n    n.childNodes.forEach((childN) => deepDelete(addsSet, childN));\n}\nfunction isParentRemoved(removes, n, mirror) {\n    if (removes.length === 0)\n        return false;\n    return _isParentRemoved(removes, n, mirror);\n}\nfunction _isParentRemoved(removes, n, mirror) {\n    let node = n.parentNode;\n    while (node) {\n        const parentId = mirror.getId(node);\n        if (removes.some((r) => r.id === parentId)) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\nfunction isAncestorInSet(set, n) {\n    if (set.size === 0)\n        return false;\n    return _isAncestorInSet(set, n);\n}\nfunction _isAncestorInSet(set, n) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    if (set.has(parentNode)) {\n        return true;\n    }\n    return _isAncestorInSet(set, parentNode);\n}\n\nlet errorHandler;\nfunction registerErrorHandler(handler) {\n    errorHandler = handler;\n}\nfunction unregisterErrorHandler() {\n    errorHandler = undefined;\n}\nconst callbackWrapper = (cb) => {\n    if (!errorHandler) {\n        return cb;\n    }\n    const rrwebWrapped = ((...rest) => {\n        try {\n            return cb(...rest);\n        }\n        catch (error) {\n            if (errorHandler && errorHandler(error) === true) {\n                return () => {\n                };\n            }\n            throw error;\n        }\n    });\n    return rrwebWrapped;\n};\n\nfunction _optionalChain$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nconst mutationBuffers = [];\nfunction getEventTarget(event) {\n    try {\n        if ('composedPath' in event) {\n            const path = event.composedPath();\n            if (path.length) {\n                return path[0];\n            }\n        }\n        else if ('path' in event && event.path.length) {\n            return event.path[0];\n        }\n    }\n    catch (e2) {\n    }\n    return event && event.target;\n}\nfunction initMutationObserver(options, rootEl) {\n    const mutationBuffer = new MutationBuffer();\n    mutationBuffers.push(mutationBuffer);\n    mutationBuffer.init(options);\n    let mutationObserverCtor = window.MutationObserver ||\n        window.__rrMutationObserver;\n    const angularZoneSymbol = _optionalChain$2([window, 'optionalAccess', _ => _.Zone, 'optionalAccess', _2 => _2.__symbol__, 'optionalCall', _3 => _3('MutationObserver')]);\n    if (angularZoneSymbol &&\n        window[angularZoneSymbol]) {\n        mutationObserverCtor = window[angularZoneSymbol];\n    }\n    const observer = new mutationObserverCtor(callbackWrapper((mutations) => {\n        if (options.onMutation && options.onMutation(mutations) === false) {\n            return;\n        }\n        mutationBuffer.processMutations.bind(mutationBuffer)(mutations);\n    }));\n    observer.observe(rootEl, {\n        attributes: true,\n        attributeOldValue: true,\n        characterData: true,\n        characterDataOldValue: true,\n        childList: true,\n        subtree: true,\n    });\n    return observer;\n}\nfunction initMoveObserver({ mousemoveCb, sampling, doc, mirror, }) {\n    if (sampling.mousemove === false) {\n        return () => {\n        };\n    }\n    const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n    const callbackThreshold = typeof sampling.mousemoveCallback === 'number'\n        ? sampling.mousemoveCallback\n        : 500;\n    let positions = [];\n    let timeBaseline;\n    const wrappedCb = throttle$1(callbackWrapper((source) => {\n        const totalOffset = Date.now() - timeBaseline;\n        mousemoveCb(positions.map((p) => {\n            p.timeOffset -= totalOffset;\n            return p;\n        }), source);\n        positions = [];\n        timeBaseline = null;\n    }), callbackThreshold);\n    const updatePosition = callbackWrapper(throttle$1(callbackWrapper((evt) => {\n        const target = getEventTarget(evt);\n        const { clientX, clientY } = legacy_isTouchEvent(evt)\n            ? evt.changedTouches[0]\n            : evt;\n        if (!timeBaseline) {\n            timeBaseline = nowTimestamp();\n        }\n        positions.push({\n            x: clientX,\n            y: clientY,\n            id: mirror.getId(target),\n            timeOffset: nowTimestamp() - timeBaseline,\n        });\n        wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent\n            ? IncrementalSource.Drag\n            : evt instanceof MouseEvent\n                ? IncrementalSource.MouseMove\n                : IncrementalSource.TouchMove);\n    }), threshold, {\n        trailing: false,\n    }));\n    const handlers = [\n        on('mousemove', updatePosition, doc),\n        on('touchmove', updatePosition, doc),\n        on('drag', updatePosition, doc),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initMouseInteractionObserver({ mouseInteractionCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    if (sampling.mouseInteraction === false) {\n        return () => {\n        };\n    }\n    const disableMap = sampling.mouseInteraction === true ||\n        sampling.mouseInteraction === undefined\n        ? {}\n        : sampling.mouseInteraction;\n    const handlers = [];\n    let currentPointerType = null;\n    const getHandler = (eventKey) => {\n        return (event) => {\n            const target = getEventTarget(event);\n            if (isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n                return;\n            }\n            let pointerType = null;\n            let thisEventKey = eventKey;\n            if ('pointerType' in event) {\n                switch (event.pointerType) {\n                    case 'mouse':\n                        pointerType = PointerTypes.Mouse;\n                        break;\n                    case 'touch':\n                        pointerType = PointerTypes.Touch;\n                        break;\n                    case 'pen':\n                        pointerType = PointerTypes.Pen;\n                        break;\n                }\n                if (pointerType === PointerTypes.Touch) {\n                    if (MouseInteractions[eventKey] === MouseInteractions.MouseDown) {\n                        thisEventKey = 'TouchStart';\n                    }\n                    else if (MouseInteractions[eventKey] === MouseInteractions.MouseUp) {\n                        thisEventKey = 'TouchEnd';\n                    }\n                }\n                else if (pointerType === PointerTypes.Pen) ;\n            }\n            else if (legacy_isTouchEvent(event)) {\n                pointerType = PointerTypes.Touch;\n            }\n            if (pointerType !== null) {\n                currentPointerType = pointerType;\n                if ((thisEventKey.startsWith('Touch') &&\n                    pointerType === PointerTypes.Touch) ||\n                    (thisEventKey.startsWith('Mouse') &&\n                        pointerType === PointerTypes.Mouse)) {\n                    pointerType = null;\n                }\n            }\n            else if (MouseInteractions[eventKey] === MouseInteractions.Click) {\n                pointerType = currentPointerType;\n                currentPointerType = null;\n            }\n            const e = legacy_isTouchEvent(event) ? event.changedTouches[0] : event;\n            if (!e) {\n                return;\n            }\n            const id = mirror.getId(target);\n            const { clientX, clientY } = e;\n            callbackWrapper(mouseInteractionCb)({\n                type: MouseInteractions[thisEventKey],\n                id,\n                x: clientX,\n                y: clientY,\n                ...(pointerType !== null && { pointerType }),\n            });\n        };\n    };\n    Object.keys(MouseInteractions)\n        .filter((key) => Number.isNaN(Number(key)) &&\n        !key.endsWith('_Departed') &&\n        disableMap[key] !== false)\n        .forEach((eventKey) => {\n        let eventName = toLowerCase(eventKey);\n        const handler = getHandler(eventKey);\n        if (window.PointerEvent) {\n            switch (MouseInteractions[eventKey]) {\n                case MouseInteractions.MouseDown:\n                case MouseInteractions.MouseUp:\n                    eventName = eventName.replace('mouse', 'pointer');\n                    break;\n                case MouseInteractions.TouchStart:\n                case MouseInteractions.TouchEnd:\n                    return;\n            }\n        }\n        handlers.push(on(eventName, handler, doc));\n    });\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initScrollObserver({ scrollCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    const updatePosition = callbackWrapper(throttle$1(callbackWrapper((evt) => {\n        const target = getEventTarget(evt);\n        if (!target ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const id = mirror.getId(target);\n        if (target === doc && doc.defaultView) {\n            const scrollLeftTop = getWindowScroll(doc.defaultView);\n            scrollCb({\n                id,\n                x: scrollLeftTop.left,\n                y: scrollLeftTop.top,\n            });\n        }\n        else {\n            scrollCb({\n                id,\n                x: target.scrollLeft,\n                y: target.scrollTop,\n            });\n        }\n    }), sampling.scroll || 100));\n    return on('scroll', updatePosition, doc);\n}\nfunction initViewportResizeObserver({ viewportResizeCb }, { win }) {\n    let lastH = -1;\n    let lastW = -1;\n    const updateDimension = callbackWrapper(throttle$1(callbackWrapper(() => {\n        const height = getWindowHeight();\n        const width = getWindowWidth();\n        if (lastH !== height || lastW !== width) {\n            viewportResizeCb({\n                width: Number(width),\n                height: Number(height),\n            });\n            lastH = height;\n            lastW = width;\n        }\n    }), 200));\n    return on('resize', updateDimension, win);\n}\nconst INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\nconst lastInputValueMap = new WeakMap();\nfunction initInputObserver({ inputCb, doc, mirror, blockClass, blockSelector, unblockSelector, ignoreClass, ignoreSelector, maskInputOptions, maskInputFn, sampling, userTriggeredOnInput, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, }) {\n    function eventHandler(event) {\n        let target = getEventTarget(event);\n        const userTriggered = event.isTrusted;\n        const tagName = target && toUpperCase(target.tagName);\n        if (tagName === 'OPTION')\n            target = target.parentElement;\n        if (!target ||\n            !tagName ||\n            INPUT_TAGS.indexOf(tagName) < 0 ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const el = target;\n        if (el.classList.contains(ignoreClass) ||\n            (ignoreSelector && el.matches(ignoreSelector))) {\n            return;\n        }\n        const type = getInputType(target);\n        let text = getInputValue(el, tagName, type);\n        let isChecked = false;\n        const isInputMasked = shouldMaskInput({\n            maskInputOptions,\n            tagName,\n            type,\n        });\n        const forceMask = needMaskingText(target, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked);\n        if (type === 'radio' || type === 'checkbox') {\n            isChecked = target.checked;\n        }\n        text = maskInputValue({\n            isMasked: forceMask,\n            element: target,\n            value: text,\n            maskInputFn,\n        });\n        cbWithDedup(target, userTriggeredOnInput\n            ? { text, isChecked, userTriggered }\n            : { text, isChecked });\n        const name = target.name;\n        if (type === 'radio' && name && isChecked) {\n            doc\n                .querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`)\n                .forEach((el) => {\n                if (el !== target) {\n                    const text = maskInputValue({\n                        isMasked: forceMask,\n                        element: el,\n                        value: getInputValue(el, tagName, type),\n                        maskInputFn,\n                    });\n                    cbWithDedup(el, userTriggeredOnInput\n                        ? { text, isChecked: !isChecked, userTriggered: false }\n                        : { text, isChecked: !isChecked });\n                }\n            });\n        }\n    }\n    function cbWithDedup(target, v) {\n        const lastInputValue = lastInputValueMap.get(target);\n        if (!lastInputValue ||\n            lastInputValue.text !== v.text ||\n            lastInputValue.isChecked !== v.isChecked) {\n            lastInputValueMap.set(target, v);\n            const id = mirror.getId(target);\n            callbackWrapper(inputCb)({\n                ...v,\n                id,\n            });\n        }\n    }\n    const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n    const handlers = events.map((eventName) => on(eventName, callbackWrapper(eventHandler), doc));\n    const currentWindow = doc.defaultView;\n    if (!currentWindow) {\n        return () => {\n            handlers.forEach((h) => h());\n        };\n    }\n    const propertyDescriptor = currentWindow.Object.getOwnPropertyDescriptor(currentWindow.HTMLInputElement.prototype, 'value');\n    const hookProperties = [\n        [currentWindow.HTMLInputElement.prototype, 'value'],\n        [currentWindow.HTMLInputElement.prototype, 'checked'],\n        [currentWindow.HTMLSelectElement.prototype, 'value'],\n        [currentWindow.HTMLTextAreaElement.prototype, 'value'],\n        [currentWindow.HTMLSelectElement.prototype, 'selectedIndex'],\n        [currentWindow.HTMLOptionElement.prototype, 'selected'],\n    ];\n    if (propertyDescriptor && propertyDescriptor.set) {\n        handlers.push(...hookProperties.map((p) => hookSetter(p[0], p[1], {\n            set() {\n                callbackWrapper(eventHandler)({\n                    target: this,\n                    isTrusted: false,\n                });\n            },\n        }, false, currentWindow)));\n    }\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction getNestedCSSRulePositions(rule) {\n    const positions = [];\n    function recurse(childRule, pos) {\n        if ((hasNestedCSSRule('CSSGroupingRule') &&\n            childRule.parentRule instanceof CSSGroupingRule) ||\n            (hasNestedCSSRule('CSSMediaRule') &&\n                childRule.parentRule instanceof CSSMediaRule) ||\n            (hasNestedCSSRule('CSSSupportsRule') &&\n                childRule.parentRule instanceof CSSSupportsRule) ||\n            (hasNestedCSSRule('CSSConditionRule') &&\n                childRule.parentRule instanceof CSSConditionRule)) {\n            const rules = Array.from(childRule.parentRule.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        else if (childRule.parentStyleSheet) {\n            const rules = Array.from(childRule.parentStyleSheet.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        return pos;\n    }\n    return recurse(rule, positions);\n}\nfunction getIdAndStyleId(sheet, mirror, styleMirror) {\n    let id, styleId;\n    if (!sheet)\n        return {};\n    if (sheet.ownerNode)\n        id = mirror.getId(sheet.ownerNode);\n    else\n        styleId = styleMirror.getId(sheet);\n    return {\n        styleId,\n        id,\n    };\n}\nfunction initStyleSheetObserver({ styleSheetRuleCb, mirror, stylesheetManager }, { win }) {\n    if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n        return () => {\n        };\n    }\n    const insertRule = win.CSSStyleSheet.prototype.insertRule;\n    win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [rule, index] = argumentsList;\n            const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleSheetRuleCb({\n                    id,\n                    styleId,\n                    adds: [{ rule, index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n    win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [index] = argumentsList;\n            const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleSheetRuleCb({\n                    id,\n                    styleId,\n                    removes: [{ index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    let replace;\n    if (win.CSSStyleSheet.prototype.replace) {\n        replace = win.CSSStyleSheet.prototype.replace;\n        win.CSSStyleSheet.prototype.replace = new Proxy(replace, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [text] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        replace: text,\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    }\n    let replaceSync;\n    if (win.CSSStyleSheet.prototype.replaceSync) {\n        replaceSync = win.CSSStyleSheet.prototype.replaceSync;\n        win.CSSStyleSheet.prototype.replaceSync = new Proxy(replaceSync, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [text] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        replaceSync: text,\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    }\n    const supportedNestedCSSRuleTypes = {};\n    if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n        supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n    }\n    else {\n        if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n            supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n            supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n            supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n        }\n    }\n    const unmodifiedFunctions = {};\n    Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n        unmodifiedFunctions[typeKey] = {\n            insertRule: type.prototype.insertRule,\n            deleteRule: type.prototype.deleteRule,\n        };\n        type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [rule, index] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        adds: [\n                            {\n                                rule,\n                                index: [\n                                    ...getNestedCSSRulePositions(thisArg),\n                                    index || 0,\n                                ],\n                            },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n        type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [index] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        removes: [\n                            { index: [...getNestedCSSRulePositions(thisArg), index] },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleSheet.prototype.insertRule = insertRule;\n        win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n        replace && (win.CSSStyleSheet.prototype.replace = replace);\n        replaceSync && (win.CSSStyleSheet.prototype.replaceSync = replaceSync);\n        Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n            type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n            type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n        });\n    });\n}\nfunction initAdoptedStyleSheetObserver({ mirror, stylesheetManager, }, host) {\n    let hostId = null;\n    if (host.nodeName === '#document')\n        hostId = mirror.getId(host);\n    else\n        hostId = mirror.getId(host.host);\n    const patchTarget = host.nodeName === '#document'\n        ? _optionalChain$2([host, 'access', _4 => _4.defaultView, 'optionalAccess', _5 => _5.Document])\n        : _optionalChain$2([host, 'access', _6 => _6.ownerDocument, 'optionalAccess', _7 => _7.defaultView, 'optionalAccess', _8 => _8.ShadowRoot]);\n    const originalPropertyDescriptor = _optionalChain$2([patchTarget, 'optionalAccess', _9 => _9.prototype])\n        ? Object.getOwnPropertyDescriptor(_optionalChain$2([patchTarget, 'optionalAccess', _10 => _10.prototype]), 'adoptedStyleSheets')\n        : undefined;\n    if (hostId === null ||\n        hostId === -1 ||\n        !patchTarget ||\n        !originalPropertyDescriptor)\n        return () => {\n        };\n    Object.defineProperty(host, 'adoptedStyleSheets', {\n        configurable: originalPropertyDescriptor.configurable,\n        enumerable: originalPropertyDescriptor.enumerable,\n        get() {\n            return _optionalChain$2([originalPropertyDescriptor, 'access', _11 => _11.get, 'optionalAccess', _12 => _12.call, 'call', _13 => _13(this)]);\n        },\n        set(sheets) {\n            const result = _optionalChain$2([originalPropertyDescriptor, 'access', _14 => _14.set, 'optionalAccess', _15 => _15.call, 'call', _16 => _16(this, sheets)]);\n            if (hostId !== null && hostId !== -1) {\n                try {\n                    stylesheetManager.adoptStyleSheets(sheets, hostId);\n                }\n                catch (e) {\n                }\n            }\n            return result;\n        },\n    });\n    return callbackWrapper(() => {\n        Object.defineProperty(host, 'adoptedStyleSheets', {\n            configurable: originalPropertyDescriptor.configurable,\n            enumerable: originalPropertyDescriptor.enumerable,\n            get: originalPropertyDescriptor.get,\n            set: originalPropertyDescriptor.set,\n        });\n    });\n}\nfunction initStyleDeclarationObserver({ styleDeclarationCb, mirror, ignoreCSSAttributes, stylesheetManager, }, { win }) {\n    const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n    win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [property, value, priority] = argumentsList;\n            if (ignoreCSSAttributes.has(property)) {\n                return setProperty.apply(thisArg, [property, value, priority]);\n            }\n            const { id, styleId } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _17 => _17.parentRule, 'optionalAccess', _18 => _18.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleDeclarationCb({\n                    id,\n                    styleId,\n                    set: {\n                        property,\n                        value,\n                        priority,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [property] = argumentsList;\n            if (ignoreCSSAttributes.has(property)) {\n                return removeProperty.apply(thisArg, [property]);\n            }\n            const { id, styleId } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _19 => _19.parentRule, 'optionalAccess', _20 => _20.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleDeclarationCb({\n                    id,\n                    styleId,\n                    remove: {\n                        property,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n        win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n    });\n}\nfunction initMediaInteractionObserver({ mediaInteractionCb, blockClass, blockSelector, unblockSelector, mirror, sampling, doc, }) {\n    const handler = callbackWrapper((type) => throttle$1(callbackWrapper((event) => {\n        const target = getEventTarget(event);\n        if (!target ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const { currentTime, volume, muted, playbackRate } = target;\n        mediaInteractionCb({\n            type,\n            id: mirror.getId(target),\n            currentTime,\n            volume,\n            muted,\n            playbackRate,\n        });\n    }), sampling.media || 500));\n    const handlers = [\n        on('play', handler(0), doc),\n        on('pause', handler(1), doc),\n        on('seeked', handler(2), doc),\n        on('volumechange', handler(3), doc),\n        on('ratechange', handler(4), doc),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initFontObserver({ fontCb, doc }) {\n    const win = doc.defaultView;\n    if (!win) {\n        return () => {\n        };\n    }\n    const handlers = [];\n    const fontMap = new WeakMap();\n    const originalFontFace = win.FontFace;\n    win.FontFace = function FontFace(family, source, descriptors) {\n        const fontFace = new originalFontFace(family, source, descriptors);\n        fontMap.set(fontFace, {\n            family,\n            buffer: typeof source !== 'string',\n            descriptors,\n            fontSource: typeof source === 'string'\n                ? source\n                : JSON.stringify(Array.from(new Uint8Array(source))),\n        });\n        return fontFace;\n    };\n    const restoreHandler = patch(doc.fonts, 'add', function (original) {\n        return function (fontFace) {\n            setTimeout$1(callbackWrapper(() => {\n                const p = fontMap.get(fontFace);\n                if (p) {\n                    fontCb(p);\n                    fontMap.delete(fontFace);\n                }\n            }), 0);\n            return original.apply(this, [fontFace]);\n        };\n    });\n    handlers.push(() => {\n        win.FontFace = originalFontFace;\n    });\n    handlers.push(restoreHandler);\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initSelectionObserver(param) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, selectionCb, } = param;\n    let collapsed = true;\n    const updateSelection = callbackWrapper(() => {\n        const selection = doc.getSelection();\n        if (!selection || (collapsed && _optionalChain$2([selection, 'optionalAccess', _21 => _21.isCollapsed])))\n            return;\n        collapsed = selection.isCollapsed || false;\n        const ranges = [];\n        const count = selection.rangeCount || 0;\n        for (let i = 0; i < count; i++) {\n            const range = selection.getRangeAt(i);\n            const { startContainer, startOffset, endContainer, endOffset } = range;\n            const blocked = isBlocked(startContainer, blockClass, blockSelector, unblockSelector, true) ||\n                isBlocked(endContainer, blockClass, blockSelector, unblockSelector, true);\n            if (blocked)\n                continue;\n            ranges.push({\n                start: mirror.getId(startContainer),\n                startOffset,\n                end: mirror.getId(endContainer),\n                endOffset,\n            });\n        }\n        selectionCb({ ranges });\n    });\n    updateSelection();\n    return on('selectionchange', updateSelection);\n}\nfunction initCustomElementObserver({ doc, customElementCb, }) {\n    const win = doc.defaultView;\n    if (!win || !win.customElements)\n        return () => { };\n    const restoreHandler = patch(win.customElements, 'define', function (original) {\n        return function (name, constructor, options) {\n            try {\n                customElementCb({\n                    define: {\n                        name,\n                    },\n                });\n            }\n            catch (e) {\n            }\n            return original.apply(this, [name, constructor, options]);\n        };\n    });\n    return restoreHandler;\n}\nfunction initObservers(o, _hooks = {}) {\n    const currentWindow = o.doc.defaultView;\n    if (!currentWindow) {\n        return () => {\n        };\n    }\n    let mutationObserver;\n    if (o.recordDOM) {\n        mutationObserver = initMutationObserver(o, o.doc);\n    }\n    const mousemoveHandler = initMoveObserver(o);\n    const mouseInteractionHandler = initMouseInteractionObserver(o);\n    const scrollHandler = initScrollObserver(o);\n    const viewportResizeHandler = initViewportResizeObserver(o, {\n        win: currentWindow,\n    });\n    const inputHandler = initInputObserver(o);\n    const mediaInteractionHandler = initMediaInteractionObserver(o);\n    let styleSheetObserver = () => { };\n    let adoptedStyleSheetObserver = () => { };\n    let styleDeclarationObserver = () => { };\n    let fontObserver = () => { };\n    if (o.recordDOM) {\n        styleSheetObserver = initStyleSheetObserver(o, { win: currentWindow });\n        adoptedStyleSheetObserver = initAdoptedStyleSheetObserver(o, o.doc);\n        styleDeclarationObserver = initStyleDeclarationObserver(o, {\n            win: currentWindow,\n        });\n        if (o.collectFonts) {\n            fontObserver = initFontObserver(o);\n        }\n    }\n    const selectionObserver = initSelectionObserver(o);\n    const customElementObserver = initCustomElementObserver(o);\n    const pluginHandlers = [];\n    for (const plugin of o.plugins) {\n        pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n    }\n    return callbackWrapper(() => {\n        mutationBuffers.forEach((b) => b.reset());\n        _optionalChain$2([mutationObserver, 'optionalAccess', _22 => _22.disconnect, 'call', _23 => _23()]);\n        mousemoveHandler();\n        mouseInteractionHandler();\n        scrollHandler();\n        viewportResizeHandler();\n        inputHandler();\n        mediaInteractionHandler();\n        styleSheetObserver();\n        adoptedStyleSheetObserver();\n        styleDeclarationObserver();\n        fontObserver();\n        selectionObserver();\n        customElementObserver();\n        pluginHandlers.forEach((h) => h());\n    });\n}\nfunction hasNestedCSSRule(prop) {\n    return typeof window[prop] !== 'undefined';\n}\nfunction canMonkeyPatchNestedCSSRule(prop) {\n    return Boolean(typeof window[prop] !== 'undefined' &&\n        window[prop].prototype &&\n        'insertRule' in window[prop].prototype &&\n        'deleteRule' in window[prop].prototype);\n}\n\nclass CrossOriginIframeMirror {\n    constructor(generateIdFn) {\n        this.generateIdFn = generateIdFn;\n        this.iframeIdToRemoteIdMap = new WeakMap();\n        this.iframeRemoteIdToIdMap = new WeakMap();\n    }\n    getId(iframe, remoteId, idToRemoteMap, remoteToIdMap) {\n        const idToRemoteIdMap = idToRemoteMap || this.getIdToRemoteIdMap(iframe);\n        const remoteIdToIdMap = remoteToIdMap || this.getRemoteIdToIdMap(iframe);\n        let id = idToRemoteIdMap.get(remoteId);\n        if (!id) {\n            id = this.generateIdFn();\n            idToRemoteIdMap.set(remoteId, id);\n            remoteIdToIdMap.set(id, remoteId);\n        }\n        return id;\n    }\n    getIds(iframe, remoteId) {\n        const idToRemoteIdMap = this.getIdToRemoteIdMap(iframe);\n        const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n        return remoteId.map((id) => this.getId(iframe, id, idToRemoteIdMap, remoteIdToIdMap));\n    }\n    getRemoteId(iframe, id, map) {\n        const remoteIdToIdMap = map || this.getRemoteIdToIdMap(iframe);\n        if (typeof id !== 'number')\n            return id;\n        const remoteId = remoteIdToIdMap.get(id);\n        if (!remoteId)\n            return -1;\n        return remoteId;\n    }\n    getRemoteIds(iframe, ids) {\n        const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n        return ids.map((id) => this.getRemoteId(iframe, id, remoteIdToIdMap));\n    }\n    reset(iframe) {\n        if (!iframe) {\n            this.iframeIdToRemoteIdMap = new WeakMap();\n            this.iframeRemoteIdToIdMap = new WeakMap();\n            return;\n        }\n        this.iframeIdToRemoteIdMap.delete(iframe);\n        this.iframeRemoteIdToIdMap.delete(iframe);\n    }\n    getIdToRemoteIdMap(iframe) {\n        let idToRemoteIdMap = this.iframeIdToRemoteIdMap.get(iframe);\n        if (!idToRemoteIdMap) {\n            idToRemoteIdMap = new Map();\n            this.iframeIdToRemoteIdMap.set(iframe, idToRemoteIdMap);\n        }\n        return idToRemoteIdMap;\n    }\n    getRemoteIdToIdMap(iframe) {\n        let remoteIdToIdMap = this.iframeRemoteIdToIdMap.get(iframe);\n        if (!remoteIdToIdMap) {\n            remoteIdToIdMap = new Map();\n            this.iframeRemoteIdToIdMap.set(iframe, remoteIdToIdMap);\n        }\n        return remoteIdToIdMap;\n    }\n}\n\nfunction _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nclass IframeManagerNoop {\n    constructor() {\n        this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n        this.crossOriginIframeRootIdMap = new WeakMap();\n    }\n    addIframe() {\n    }\n    addLoadListener() {\n    }\n    attachIframe() {\n    }\n}\nclass IframeManager {\n    constructor(options) {\n        this.iframes = new WeakMap();\n        this.crossOriginIframeMap = new WeakMap();\n        this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n        this.crossOriginIframeRootIdMap = new WeakMap();\n        this.mutationCb = options.mutationCb;\n        this.wrappedEmit = options.wrappedEmit;\n        this.stylesheetManager = options.stylesheetManager;\n        this.recordCrossOriginIframes = options.recordCrossOriginIframes;\n        this.crossOriginIframeStyleMirror = new CrossOriginIframeMirror(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror));\n        this.mirror = options.mirror;\n        if (this.recordCrossOriginIframes) {\n            window.addEventListener('message', this.handleMessage.bind(this));\n        }\n    }\n    addIframe(iframeEl) {\n        this.iframes.set(iframeEl, true);\n        if (iframeEl.contentWindow)\n            this.crossOriginIframeMap.set(iframeEl.contentWindow, iframeEl);\n    }\n    addLoadListener(cb) {\n        this.loadListener = cb;\n    }\n    attachIframe(iframeEl, childSn) {\n        this.mutationCb({\n            adds: [\n                {\n                    parentId: this.mirror.getId(iframeEl),\n                    nextId: null,\n                    node: childSn,\n                },\n            ],\n            removes: [],\n            texts: [],\n            attributes: [],\n            isAttachIframe: true,\n        });\n        _optionalChain$1([this, 'access', _ => _.loadListener, 'optionalCall', _2 => _2(iframeEl)]);\n        const iframeDoc = getIFrameContentDocument(iframeEl);\n        if (iframeDoc &&\n            iframeDoc.adoptedStyleSheets &&\n            iframeDoc.adoptedStyleSheets.length > 0)\n            this.stylesheetManager.adoptStyleSheets(iframeDoc.adoptedStyleSheets, this.mirror.getId(iframeDoc));\n    }\n    handleMessage(message) {\n        const crossOriginMessageEvent = message;\n        if (crossOriginMessageEvent.data.type !== 'rrweb' ||\n            crossOriginMessageEvent.origin !== crossOriginMessageEvent.data.origin)\n            return;\n        const iframeSourceWindow = message.source;\n        if (!iframeSourceWindow)\n            return;\n        const iframeEl = this.crossOriginIframeMap.get(message.source);\n        if (!iframeEl)\n            return;\n        const transformedEvent = this.transformCrossOriginEvent(iframeEl, crossOriginMessageEvent.data.event);\n        if (transformedEvent)\n            this.wrappedEmit(transformedEvent, crossOriginMessageEvent.data.isCheckout);\n    }\n    transformCrossOriginEvent(iframeEl, e) {\n        switch (e.type) {\n            case EventType.FullSnapshot: {\n                this.crossOriginIframeMirror.reset(iframeEl);\n                this.crossOriginIframeStyleMirror.reset(iframeEl);\n                this.replaceIdOnNode(e.data.node, iframeEl);\n                const rootId = e.data.node.id;\n                this.crossOriginIframeRootIdMap.set(iframeEl, rootId);\n                this.patchRootIdOnNode(e.data.node, rootId);\n                return {\n                    timestamp: e.timestamp,\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Mutation,\n                        adds: [\n                            {\n                                parentId: this.mirror.getId(iframeEl),\n                                nextId: null,\n                                node: e.data.node,\n                            },\n                        ],\n                        removes: [],\n                        texts: [],\n                        attributes: [],\n                        isAttachIframe: true,\n                    },\n                };\n            }\n            case EventType.Meta:\n            case EventType.Load:\n            case EventType.DomContentLoaded: {\n                return false;\n            }\n            case EventType.Plugin: {\n                return e;\n            }\n            case EventType.Custom: {\n                this.replaceIds(e.data.payload, iframeEl, ['id', 'parentId', 'previousId', 'nextId']);\n                return e;\n            }\n            case EventType.IncrementalSnapshot: {\n                switch (e.data.source) {\n                    case IncrementalSource.Mutation: {\n                        e.data.adds.forEach((n) => {\n                            this.replaceIds(n, iframeEl, [\n                                'parentId',\n                                'nextId',\n                                'previousId',\n                            ]);\n                            this.replaceIdOnNode(n.node, iframeEl);\n                            const rootId = this.crossOriginIframeRootIdMap.get(iframeEl);\n                            rootId && this.patchRootIdOnNode(n.node, rootId);\n                        });\n                        e.data.removes.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['parentId', 'id']);\n                        });\n                        e.data.attributes.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['id']);\n                        });\n                        e.data.texts.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['id']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.Drag:\n                    case IncrementalSource.TouchMove:\n                    case IncrementalSource.MouseMove: {\n                        e.data.positions.forEach((p) => {\n                            this.replaceIds(p, iframeEl, ['id']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.ViewportResize: {\n                        return false;\n                    }\n                    case IncrementalSource.MediaInteraction:\n                    case IncrementalSource.MouseInteraction:\n                    case IncrementalSource.Scroll:\n                    case IncrementalSource.CanvasMutation:\n                    case IncrementalSource.Input: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        return e;\n                    }\n                    case IncrementalSource.StyleSheetRule:\n                    case IncrementalSource.StyleDeclaration: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        this.replaceStyleIds(e.data, iframeEl, ['styleId']);\n                        return e;\n                    }\n                    case IncrementalSource.Font: {\n                        return e;\n                    }\n                    case IncrementalSource.Selection: {\n                        e.data.ranges.forEach((range) => {\n                            this.replaceIds(range, iframeEl, ['start', 'end']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.AdoptedStyleSheet: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        this.replaceStyleIds(e.data, iframeEl, ['styleIds']);\n                        _optionalChain$1([e, 'access', _3 => _3.data, 'access', _4 => _4.styles, 'optionalAccess', _5 => _5.forEach, 'call', _6 => _6((style) => {\n                            this.replaceStyleIds(style, iframeEl, ['styleId']);\n                        })]);\n                        return e;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    replace(iframeMirror, obj, iframeEl, keys) {\n        for (const key of keys) {\n            if (!Array.isArray(obj[key]) && typeof obj[key] !== 'number')\n                continue;\n            if (Array.isArray(obj[key])) {\n                obj[key] = iframeMirror.getIds(iframeEl, obj[key]);\n            }\n            else {\n                obj[key] = iframeMirror.getId(iframeEl, obj[key]);\n            }\n        }\n        return obj;\n    }\n    replaceIds(obj, iframeEl, keys) {\n        return this.replace(this.crossOriginIframeMirror, obj, iframeEl, keys);\n    }\n    replaceStyleIds(obj, iframeEl, keys) {\n        return this.replace(this.crossOriginIframeStyleMirror, obj, iframeEl, keys);\n    }\n    replaceIdOnNode(node, iframeEl) {\n        this.replaceIds(node, iframeEl, ['id', 'rootId']);\n        if ('childNodes' in node) {\n            node.childNodes.forEach((child) => {\n                this.replaceIdOnNode(child, iframeEl);\n            });\n        }\n    }\n    patchRootIdOnNode(node, rootId) {\n        if (node.type !== NodeType$3.Document && !node.rootId)\n            node.rootId = rootId;\n        if ('childNodes' in node) {\n            node.childNodes.forEach((child) => {\n                this.patchRootIdOnNode(child, rootId);\n            });\n        }\n    }\n}\n\nclass ShadowDomManagerNoop {\n    init() {\n    }\n    addShadowRoot() {\n    }\n    observeAttachShadow() {\n    }\n    reset() {\n    }\n}\nclass ShadowDomManager {\n    constructor(options) {\n        this.shadowDoms = new WeakSet();\n        this.restoreHandlers = [];\n        this.mutationCb = options.mutationCb;\n        this.scrollCb = options.scrollCb;\n        this.bypassOptions = options.bypassOptions;\n        this.mirror = options.mirror;\n        this.init();\n    }\n    init() {\n        this.reset();\n        this.patchAttachShadow(Element, document);\n    }\n    addShadowRoot(shadowRoot, doc) {\n        if (!isNativeShadowDom(shadowRoot))\n            return;\n        if (this.shadowDoms.has(shadowRoot))\n            return;\n        this.shadowDoms.add(shadowRoot);\n        this.bypassOptions.canvasManager.addShadowRoot(shadowRoot);\n        const observer = initMutationObserver({\n            ...this.bypassOptions,\n            doc,\n            mutationCb: this.mutationCb,\n            mirror: this.mirror,\n            shadowDomManager: this,\n        }, shadowRoot);\n        this.restoreHandlers.push(() => observer.disconnect());\n        this.restoreHandlers.push(initScrollObserver({\n            ...this.bypassOptions,\n            scrollCb: this.scrollCb,\n            doc: shadowRoot,\n            mirror: this.mirror,\n        }));\n        setTimeout$1(() => {\n            if (shadowRoot.adoptedStyleSheets &&\n                shadowRoot.adoptedStyleSheets.length > 0)\n                this.bypassOptions.stylesheetManager.adoptStyleSheets(shadowRoot.adoptedStyleSheets, this.mirror.getId(shadowRoot.host));\n            this.restoreHandlers.push(initAdoptedStyleSheetObserver({\n                mirror: this.mirror,\n                stylesheetManager: this.bypassOptions.stylesheetManager,\n            }, shadowRoot));\n        }, 0);\n    }\n    observeAttachShadow(iframeElement) {\n        const iframeDoc = getIFrameContentDocument(iframeElement);\n        const iframeWindow = getIFrameContentWindow(iframeElement);\n        if (!iframeDoc || !iframeWindow)\n            return;\n        this.patchAttachShadow(iframeWindow.Element, iframeDoc);\n    }\n    patchAttachShadow(element, doc) {\n        const manager = this;\n        this.restoreHandlers.push(patch(element.prototype, 'attachShadow', function (original) {\n            return function (option) {\n                const shadowRoot = original.call(this, option);\n                if (this.shadowRoot && inDom(this))\n                    manager.addShadowRoot(this.shadowRoot, doc);\n                return shadowRoot;\n            };\n        }));\n    }\n    reset() {\n        this.restoreHandlers.forEach((handler) => {\n            try {\n                handler();\n            }\n            catch (e) {\n            }\n        });\n        this.restoreHandlers = [];\n        this.shadowDoms = new WeakSet();\n        this.bypassOptions.canvasManager.resetShadowRoots();\n    }\n}\n\nclass CanvasManagerNoop {\n    reset() {\n    }\n    freeze() {\n    }\n    unfreeze() {\n    }\n    lock() {\n    }\n    unlock() {\n    }\n    snapshot() {\n    }\n    addWindow() {\n    }\n    addShadowRoot() {\n    }\n    resetShadowRoots() {\n    }\n}\n\nclass StylesheetManager {\n    constructor(options) {\n        this.trackedLinkElements = new WeakSet();\n        this.styleMirror = new StyleSheetMirror();\n        this.mutationCb = options.mutationCb;\n        this.adoptedStyleSheetCb = options.adoptedStyleSheetCb;\n    }\n    attachLinkElement(linkEl, childSn) {\n        if ('_cssText' in childSn.attributes)\n            this.mutationCb({\n                adds: [],\n                removes: [],\n                texts: [],\n                attributes: [\n                    {\n                        id: childSn.id,\n                        attributes: childSn\n                            .attributes,\n                    },\n                ],\n            });\n        this.trackLinkElement(linkEl);\n    }\n    trackLinkElement(linkEl) {\n        if (this.trackedLinkElements.has(linkEl))\n            return;\n        this.trackedLinkElements.add(linkEl);\n        this.trackStylesheetInLinkElement(linkEl);\n    }\n    adoptStyleSheets(sheets, hostId) {\n        if (sheets.length === 0)\n            return;\n        const adoptedStyleSheetData = {\n            id: hostId,\n            styleIds: [],\n        };\n        const styles = [];\n        for (const sheet of sheets) {\n            let styleId;\n            if (!this.styleMirror.has(sheet)) {\n                styleId = this.styleMirror.add(sheet);\n                styles.push({\n                    styleId,\n                    rules: Array.from(sheet.rules || CSSRule, (r, index) => ({\n                        rule: stringifyRule(r),\n                        index,\n                    })),\n                });\n            }\n            else\n                styleId = this.styleMirror.getId(sheet);\n            adoptedStyleSheetData.styleIds.push(styleId);\n        }\n        if (styles.length > 0)\n            adoptedStyleSheetData.styles = styles;\n        this.adoptedStyleSheetCb(adoptedStyleSheetData);\n    }\n    reset() {\n        this.styleMirror.reset();\n        this.trackedLinkElements = new WeakSet();\n    }\n    trackStylesheetInLinkElement(linkEl) {\n    }\n}\n\nclass ProcessedNodeManager {\n    constructor() {\n        this.nodeMap = new WeakMap();\n        this.active = false;\n    }\n    inOtherBuffer(node, thisBuffer) {\n        const buffers = this.nodeMap.get(node);\n        return (buffers && Array.from(buffers).some((buffer) => buffer !== thisBuffer));\n    }\n    add(node, buffer) {\n        if (!this.active) {\n            this.active = true;\n            onRequestAnimationFrame(() => {\n                this.nodeMap = new WeakMap();\n                this.active = false;\n            });\n        }\n        this.nodeMap.set(node, (this.nodeMap.get(node) || new Set()).add(buffer));\n    }\n    destroy() {\n    }\n}\n\nlet wrappedEmit;\nlet _takeFullSnapshot;\ntry {\n    if (Array.from([1], (x) => x * 2)[0] !== 2) {\n        const cleanFrame = document.createElement('iframe');\n        document.body.appendChild(cleanFrame);\n        Array.from = _optionalChain([cleanFrame, 'access', _ => _.contentWindow, 'optionalAccess', _2 => _2.Array, 'access', _3 => _3.from]) || Array.from;\n        document.body.removeChild(cleanFrame);\n    }\n}\ncatch (err) {\n    console.debug('Unable to override Array.from', err);\n}\nconst mirror = createMirror();\nfunction record(options = {}) {\n    const { emit, checkoutEveryNms, checkoutEveryNth, blockClass = 'rr-block', blockSelector = null, unblockSelector = null, ignoreClass = 'rr-ignore', ignoreSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, maskAllInputs, maskInputOptions: _maskInputOptions, slimDOMOptions: _slimDOMOptions, maskAttributeFn, maskInputFn, maskTextFn, maxCanvasSize = null, packFn, sampling = {}, dataURLOptions = {}, mousemoveWait, recordDOM = true, recordCanvas = false, recordCrossOriginIframes = false, recordAfter = options.recordAfter === 'DOMContentLoaded'\n        ? options.recordAfter\n        : 'load', userTriggeredOnInput = false, collectFonts = false, inlineImages = false, plugins, keepIframeSrcFn = () => false, ignoreCSSAttributes = new Set([]), errorHandler, onMutation, getCanvasManager, } = options;\n    registerErrorHandler(errorHandler);\n    const inEmittingFrame = recordCrossOriginIframes\n        ? window.parent === window\n        : true;\n    let passEmitsToParent = false;\n    if (!inEmittingFrame) {\n        try {\n            if (window.parent.document) {\n                passEmitsToParent = false;\n            }\n        }\n        catch (e) {\n            passEmitsToParent = true;\n        }\n    }\n    if (inEmittingFrame && !emit) {\n        throw new Error('emit function is required');\n    }\n    if (!inEmittingFrame && !passEmitsToParent) {\n        return () => {\n        };\n    }\n    if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n        sampling.mousemove = mousemoveWait;\n    }\n    mirror.reset();\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n            radio: true,\n            checkbox: true,\n        }\n        : _maskInputOptions !== undefined\n            ? _maskInputOptions\n            : {};\n    const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all'\n        ? {\n            script: true,\n            comment: true,\n            headFavicon: true,\n            headWhitespace: true,\n            headMetaSocial: true,\n            headMetaRobots: true,\n            headMetaHttpEquiv: true,\n            headMetaVerification: true,\n            headMetaAuthorship: _slimDOMOptions === 'all',\n            headMetaDescKeywords: _slimDOMOptions === 'all',\n        }\n        : _slimDOMOptions\n            ? _slimDOMOptions\n            : {};\n    polyfill();\n    let lastFullSnapshotEvent;\n    let incrementalSnapshotCount = 0;\n    const eventProcessor = (e) => {\n        for (const plugin of plugins || []) {\n            if (plugin.eventProcessor) {\n                e = plugin.eventProcessor(e);\n            }\n        }\n        if (packFn &&\n            !passEmitsToParent) {\n            e = packFn(e);\n        }\n        return e;\n    };\n    wrappedEmit = (r, isCheckout) => {\n        const e = r;\n        e.timestamp = nowTimestamp();\n        if (_optionalChain([mutationBuffers, 'access', _4 => _4[0], 'optionalAccess', _5 => _5.isFrozen, 'call', _6 => _6()]) &&\n            e.type !== EventType.FullSnapshot &&\n            !(e.type === EventType.IncrementalSnapshot &&\n                e.data.source === IncrementalSource.Mutation)) {\n            mutationBuffers.forEach((buf) => buf.unfreeze());\n        }\n        if (inEmittingFrame) {\n            _optionalChain([emit, 'optionalCall', _7 => _7(eventProcessor(e), isCheckout)]);\n        }\n        else if (passEmitsToParent) {\n            const message = {\n                type: 'rrweb',\n                event: eventProcessor(e),\n                origin: window.location.origin,\n                isCheckout,\n            };\n            window.parent.postMessage(message, '*');\n        }\n        if (e.type === EventType.FullSnapshot) {\n            lastFullSnapshotEvent = e;\n            incrementalSnapshotCount = 0;\n        }\n        else if (e.type === EventType.IncrementalSnapshot) {\n            if (e.data.source === IncrementalSource.Mutation &&\n                e.data.isAttachIframe) {\n                return;\n            }\n            incrementalSnapshotCount++;\n            const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n            const exceedTime = checkoutEveryNms &&\n                lastFullSnapshotEvent &&\n                e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n            if (exceedCount || exceedTime) {\n                takeFullSnapshot(true);\n            }\n        }\n    };\n    const wrappedMutationEmit = (m) => {\n        wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n                source: IncrementalSource.Mutation,\n                ...m,\n            },\n        });\n    };\n    const wrappedScrollEmit = (p) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.Scroll,\n            ...p,\n        },\n    });\n    const wrappedCanvasMutationEmit = (p) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.CanvasMutation,\n            ...p,\n        },\n    });\n    const wrappedAdoptedStyleSheetEmit = (a) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.AdoptedStyleSheet,\n            ...a,\n        },\n    });\n    const stylesheetManager = new StylesheetManager({\n        mutationCb: wrappedMutationEmit,\n        adoptedStyleSheetCb: wrappedAdoptedStyleSheetEmit,\n    });\n    const iframeManager = typeof __RRWEB_EXCLUDE_IFRAME__ === 'boolean' && __RRWEB_EXCLUDE_IFRAME__\n        ? new IframeManagerNoop()\n        : new IframeManager({\n            mirror,\n            mutationCb: wrappedMutationEmit,\n            stylesheetManager: stylesheetManager,\n            recordCrossOriginIframes,\n            wrappedEmit,\n        });\n    for (const plugin of plugins || []) {\n        if (plugin.getMirror)\n            plugin.getMirror({\n                nodeMirror: mirror,\n                crossOriginIframeMirror: iframeManager.crossOriginIframeMirror,\n                crossOriginIframeStyleMirror: iframeManager.crossOriginIframeStyleMirror,\n            });\n    }\n    const processedNodeManager = new ProcessedNodeManager();\n    const canvasManager = _getCanvasManager(getCanvasManager, {\n        mirror,\n        win: window,\n        mutationCb: (p) => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n                source: IncrementalSource.CanvasMutation,\n                ...p,\n            },\n        }),\n        recordCanvas,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maxCanvasSize,\n        sampling: sampling['canvas'],\n        dataURLOptions,\n        errorHandler,\n    });\n    const shadowDomManager = typeof __RRWEB_EXCLUDE_SHADOW_DOM__ === 'boolean' &&\n        __RRWEB_EXCLUDE_SHADOW_DOM__\n        ? new ShadowDomManagerNoop()\n        : new ShadowDomManager({\n            mutationCb: wrappedMutationEmit,\n            scrollCb: wrappedScrollEmit,\n            bypassOptions: {\n                onMutation,\n                blockClass,\n                blockSelector,\n                unblockSelector,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                inlineStylesheet,\n                maskInputOptions,\n                dataURLOptions,\n                maskAttributeFn,\n                maskTextFn,\n                maskInputFn,\n                recordCanvas,\n                inlineImages,\n                sampling,\n                slimDOMOptions,\n                iframeManager,\n                stylesheetManager,\n                canvasManager,\n                keepIframeSrcFn,\n                processedNodeManager,\n            },\n            mirror,\n        });\n    const takeFullSnapshot = (isCheckout = false) => {\n        if (!recordDOM) {\n            return;\n        }\n        wrappedEmit({\n            type: EventType.Meta,\n            data: {\n                href: window.location.href,\n                width: getWindowWidth(),\n                height: getWindowHeight(),\n            },\n        }, isCheckout);\n        stylesheetManager.reset();\n        shadowDomManager.init();\n        mutationBuffers.forEach((buf) => buf.lock());\n        const node = snapshot(document, {\n            mirror,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskAllText,\n            maskTextClass,\n            unmaskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            inlineStylesheet,\n            maskAllInputs: maskInputOptions,\n            maskAttributeFn,\n            maskInputFn,\n            maskTextFn,\n            slimDOM: slimDOMOptions,\n            dataURLOptions,\n            recordCanvas,\n            inlineImages,\n            onSerialize: (n) => {\n                if (isSerializedIframe(n, mirror)) {\n                    iframeManager.addIframe(n);\n                }\n                if (isSerializedStylesheet(n, mirror)) {\n                    stylesheetManager.trackLinkElement(n);\n                }\n                if (hasShadowRoot(n)) {\n                    shadowDomManager.addShadowRoot(n.shadowRoot, document);\n                }\n            },\n            onIframeLoad: (iframe, childSn) => {\n                iframeManager.attachIframe(iframe, childSn);\n                if (iframe.contentWindow) {\n                    canvasManager.addWindow(iframe.contentWindow);\n                }\n                shadowDomManager.observeAttachShadow(iframe);\n            },\n            onStylesheetLoad: (linkEl, childSn) => {\n                stylesheetManager.attachLinkElement(linkEl, childSn);\n            },\n            keepIframeSrcFn,\n        });\n        if (!node) {\n            return console.warn('Failed to snapshot the document');\n        }\n        wrappedEmit({\n            type: EventType.FullSnapshot,\n            data: {\n                node,\n                initialOffset: getWindowScroll(window),\n            },\n        });\n        mutationBuffers.forEach((buf) => buf.unlock());\n        if (document.adoptedStyleSheets && document.adoptedStyleSheets.length > 0)\n            stylesheetManager.adoptStyleSheets(document.adoptedStyleSheets, mirror.getId(document));\n    };\n    _takeFullSnapshot = takeFullSnapshot;\n    try {\n        const handlers = [];\n        const observe = (doc) => {\n            return callbackWrapper(initObservers)({\n                onMutation,\n                mutationCb: wrappedMutationEmit,\n                mousemoveCb: (positions, source) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source,\n                        positions,\n                    },\n                }),\n                mouseInteractionCb: (d) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.MouseInteraction,\n                        ...d,\n                    },\n                }),\n                scrollCb: wrappedScrollEmit,\n                viewportResizeCb: (d) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.ViewportResize,\n                        ...d,\n                    },\n                }),\n                inputCb: (v) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Input,\n                        ...v,\n                    },\n                }),\n                mediaInteractionCb: (p) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.MediaInteraction,\n                        ...p,\n                    },\n                }),\n                styleSheetRuleCb: (r) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.StyleSheetRule,\n                        ...r,\n                    },\n                }),\n                styleDeclarationCb: (r) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.StyleDeclaration,\n                        ...r,\n                    },\n                }),\n                canvasMutationCb: wrappedCanvasMutationEmit,\n                fontCb: (p) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Font,\n                        ...p,\n                    },\n                }),\n                selectionCb: (p) => {\n                    wrappedEmit({\n                        type: EventType.IncrementalSnapshot,\n                        data: {\n                            source: IncrementalSource.Selection,\n                            ...p,\n                        },\n                    });\n                },\n                customElementCb: (c) => {\n                    wrappedEmit({\n                        type: EventType.IncrementalSnapshot,\n                        data: {\n                            source: IncrementalSource.CustomElement,\n                            ...c,\n                        },\n                    });\n                },\n                blockClass,\n                ignoreClass,\n                ignoreSelector,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                maskInputOptions,\n                inlineStylesheet,\n                sampling,\n                recordDOM,\n                recordCanvas,\n                inlineImages,\n                userTriggeredOnInput,\n                collectFonts,\n                doc,\n                maskAttributeFn,\n                maskInputFn,\n                maskTextFn,\n                keepIframeSrcFn,\n                blockSelector,\n                unblockSelector,\n                slimDOMOptions,\n                dataURLOptions,\n                mirror,\n                iframeManager,\n                stylesheetManager,\n                shadowDomManager,\n                processedNodeManager,\n                canvasManager,\n                ignoreCSSAttributes,\n                plugins: _optionalChain([plugins\n, 'optionalAccess', _8 => _8.filter, 'call', _9 => _9((p) => p.observer)\n, 'optionalAccess', _10 => _10.map, 'call', _11 => _11((p) => ({\n                    observer: p.observer,\n                    options: p.options,\n                    callback: (payload) => wrappedEmit({\n                        type: EventType.Plugin,\n                        data: {\n                            plugin: p.name,\n                            payload,\n                        },\n                    }),\n                }))]) || [],\n            }, {});\n        };\n        iframeManager.addLoadListener((iframeEl) => {\n            try {\n                handlers.push(observe(iframeEl.contentDocument));\n            }\n            catch (error) {\n                console.warn(error);\n            }\n        });\n        const init = () => {\n            takeFullSnapshot();\n            handlers.push(observe(document));\n        };\n        if (document.readyState === 'interactive' ||\n            document.readyState === 'complete') {\n            init();\n        }\n        else {\n            handlers.push(on('DOMContentLoaded', () => {\n                wrappedEmit({\n                    type: EventType.DomContentLoaded,\n                    data: {},\n                });\n                if (recordAfter === 'DOMContentLoaded')\n                    init();\n            }));\n            handlers.push(on('load', () => {\n                wrappedEmit({\n                    type: EventType.Load,\n                    data: {},\n                });\n                if (recordAfter === 'load')\n                    init();\n            }, window));\n        }\n        return () => {\n            handlers.forEach((h) => h());\n            processedNodeManager.destroy();\n            _takeFullSnapshot = undefined;\n            unregisterErrorHandler();\n        };\n    }\n    catch (error) {\n        console.warn(error);\n    }\n}\nfunction takeFullSnapshot(isCheckout) {\n    if (!_takeFullSnapshot) {\n        throw new Error('please take full snapshot after start recording');\n    }\n    _takeFullSnapshot(isCheckout);\n}\nrecord.mirror = mirror;\nrecord.takeFullSnapshot = takeFullSnapshot;\nfunction _getCanvasManager(getCanvasManagerFn, options) {\n    try {\n        return getCanvasManagerFn\n            ? getCanvasManagerFn(options)\n            : new CanvasManagerNoop();\n    }\n    catch (e2) {\n        console.warn('Unable to initialize CanvasManager');\n        return new CanvasManagerNoop();\n    }\n}\n\nconst ReplayEventTypeIncrementalSnapshot = 3;\nconst ReplayEventTypeCustom = 5;\n\n/**\n * Converts a timestamp to ms, if it was in s, or keeps it as ms.\n */\nfunction timestampToMs(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp : timestamp * 1000;\n}\n\n/**\n * Converts a timestamp to s, if it was in ms, or keeps it as s.\n */\nfunction timestampToS(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Add a breadcrumb event to replay.\n */\nfunction addBreadcrumbEvent(replay, breadcrumb) {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n\n  if (['ui.click', 'ui.input'].includes(breadcrumb.category )) {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n\n  replay.addUpdate(() => {\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        // normalize to max. 10 depth and 1_000 properties per object\n        payload: normalize(breadcrumb, 10, 1000),\n      },\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\n\nconst INTERACTIVE_SELECTOR = 'button,a';\n\n/** Get the closest interactive parent element, or else return the given element. */\nfunction getClosestInteractive(element) {\n  const closestInteractive = element.closest(INTERACTIVE_SELECTOR);\n  return closestInteractive || element;\n}\n\n/**\n * For clicks, we check if the target is inside of a button or link\n * If so, we use this as the target instead\n * This is useful because if you click on the image in <button><img></button>,\n * The target will be the image, not the button, which we don't want here\n */\nfunction getClickTargetNode(event) {\n  const target = getTargetNode(event);\n\n  if (!target || !(target instanceof Element)) {\n    return target;\n  }\n\n  return getClosestInteractive(target);\n}\n\n/** Get the event target node. */\nfunction getTargetNode(event) {\n  if (isEventWithTarget(event)) {\n    return event.target ;\n  }\n\n  return event;\n}\n\nfunction isEventWithTarget(event) {\n  return typeof event === 'object' && !!event && 'target' in event;\n}\n\nlet handlers;\n\n/**\n * Register a handler to be called when `window.open()` is called.\n * Returns a cleanup function.\n */\nfunction onWindowOpen(cb) {\n  // Ensure to only register this once\n  if (!handlers) {\n    handlers = [];\n    monkeyPatchWindowOpen();\n  }\n\n  handlers.push(cb);\n\n  return () => {\n    const pos = handlers ? handlers.indexOf(cb) : -1;\n    if (pos > -1) {\n      (handlers ).splice(pos, 1);\n    }\n  };\n}\n\nfunction monkeyPatchWindowOpen() {\n  fill(WINDOW, 'open', function (originalWindowOpen) {\n    return function (...args) {\n      if (handlers) {\n        try {\n          handlers.forEach(handler => handler());\n        } catch (e) {\n          // ignore errors in here\n        }\n      }\n\n      return originalWindowOpen.apply(WINDOW, args);\n    };\n  });\n}\n\n/** Any IncrementalSource for rrweb that we interpret as a kind of mutation. */\nconst IncrementalMutationSources = new Set([\n  IncrementalSource.Mutation,\n  IncrementalSource.StyleSheetRule,\n  IncrementalSource.StyleDeclaration,\n  IncrementalSource.AdoptedStyleSheet,\n  IncrementalSource.CanvasMutation,\n  IncrementalSource.Selection,\n  IncrementalSource.MediaInteraction,\n]);\n\n/** Handle a click. */\nfunction handleClick(clickDetector, clickBreadcrumb, node) {\n  clickDetector.handleClick(clickBreadcrumb, node);\n}\n\n/** A click detector class that can be used to detect slow or rage clicks on elements. */\nclass ClickDetector  {\n  // protected for testing\n\n   constructor(\n    replay,\n    slowClickConfig,\n    // Just for easier testing\n    _addBreadcrumbEvent = addBreadcrumbEvent,\n  ) {\n    this._lastMutation = 0;\n    this._lastScroll = 0;\n    this._clicks = [];\n\n    // We want everything in s, but options are in ms\n    this._timeout = slowClickConfig.timeout / 1000;\n    this._threshold = slowClickConfig.threshold / 1000;\n    this._scrollTimeout = slowClickConfig.scrollTimeout / 1000;\n    this._replay = replay;\n    this._ignoreSelector = slowClickConfig.ignoreSelector;\n    this._addBreadcrumbEvent = _addBreadcrumbEvent;\n  }\n\n  /** Register click detection handlers on mutation or scroll. */\n   addListeners() {\n    const cleanupWindowOpen = onWindowOpen(() => {\n      // Treat window.open as mutation\n      this._lastMutation = nowInSeconds();\n    });\n\n    this._teardown = () => {\n      cleanupWindowOpen();\n\n      this._clicks = [];\n      this._lastMutation = 0;\n      this._lastScroll = 0;\n    };\n  }\n\n  /** Clean up listeners. */\n   removeListeners() {\n    if (this._teardown) {\n      this._teardown();\n    }\n\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n  }\n\n  /** @inheritDoc */\n   handleClick(breadcrumb, node) {\n    if (ignoreElement(node, this._ignoreSelector) || !isClickBreadcrumb(breadcrumb)) {\n      return;\n    }\n\n    const newClick = {\n      timestamp: timestampToS(breadcrumb.timestamp),\n      clickBreadcrumb: breadcrumb,\n      // Set this to 0 so we know it originates from the click breadcrumb\n      clickCount: 0,\n      node,\n    };\n\n    // If there was a click in the last 1s on the same element, ignore it - only keep a single reference per second\n    if (\n      this._clicks.some(click => click.node === newClick.node && Math.abs(click.timestamp - newClick.timestamp) < 1)\n    ) {\n      return;\n    }\n\n    this._clicks.push(newClick);\n\n    // If this is the first new click, set a timeout to check for multi clicks\n    if (this._clicks.length === 1) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** @inheritDoc */\n   registerMutation(timestamp = Date.now()) {\n    this._lastMutation = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n   registerScroll(timestamp = Date.now()) {\n    this._lastScroll = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n   registerClick(element) {\n    const node = getClosestInteractive(element);\n    this._handleMultiClick(node );\n  }\n\n  /** Count multiple clicks on elements. */\n   _handleMultiClick(node) {\n    this._getClicks(node).forEach(click => {\n      click.clickCount++;\n    });\n  }\n\n  /** Get all pending clicks for a given node. */\n   _getClicks(node) {\n    return this._clicks.filter(click => click.node === node);\n  }\n\n  /** Check the clicks that happened. */\n   _checkClicks() {\n    const timedOutClicks = [];\n\n    const now = nowInSeconds();\n\n    this._clicks.forEach(click => {\n      if (!click.mutationAfter && this._lastMutation) {\n        click.mutationAfter = click.timestamp <= this._lastMutation ? this._lastMutation - click.timestamp : undefined;\n      }\n      if (!click.scrollAfter && this._lastScroll) {\n        click.scrollAfter = click.timestamp <= this._lastScroll ? this._lastScroll - click.timestamp : undefined;\n      }\n\n      // All of these are in seconds!\n      if (click.timestamp + this._timeout <= now) {\n        timedOutClicks.push(click);\n      }\n    });\n\n    // Remove \"old\" clicks\n    for (const click of timedOutClicks) {\n      const pos = this._clicks.indexOf(click);\n\n      if (pos > -1) {\n        this._generateBreadcrumbs(click);\n        this._clicks.splice(pos, 1);\n      }\n    }\n\n    // Trigger new check, unless no clicks left\n    if (this._clicks.length) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** Generate matching breadcrumb(s) for the click. */\n   _generateBreadcrumbs(click) {\n    const replay = this._replay;\n    const hadScroll = click.scrollAfter && click.scrollAfter <= this._scrollTimeout;\n    const hadMutation = click.mutationAfter && click.mutationAfter <= this._threshold;\n\n    const isSlowClick = !hadScroll && !hadMutation;\n    const { clickCount, clickBreadcrumb } = click;\n\n    // Slow click\n    if (isSlowClick) {\n      // If `mutationAfter` is set, it means a mutation happened after the threshold, but before the timeout\n      // If not, it means we just timed out without scroll & mutation\n      const timeAfterClickMs = Math.min(click.mutationAfter || this._timeout, this._timeout) * 1000;\n      const endReason = timeAfterClickMs < this._timeout * 1000 ? 'mutation' : 'timeout';\n\n      const breadcrumb = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.slowClickDetected',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          timeAfterClickMs,\n          endReason,\n          // If clickCount === 0, it means multiClick was not correctly captured here\n          // - we still want to send 1 in this case\n          clickCount: clickCount || 1,\n        },\n      };\n\n      this._addBreadcrumbEvent(replay, breadcrumb);\n      return;\n    }\n\n    // Multi click\n    if (clickCount > 1) {\n      const breadcrumb = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.multiClick',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          clickCount,\n          metric: true,\n        },\n      };\n\n      this._addBreadcrumbEvent(replay, breadcrumb);\n    }\n  }\n\n  /** Schedule to check current clicks. */\n   _scheduleCheckClicks() {\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n\n    this._checkClickTimeout = setTimeout$3(() => this._checkClicks(), 1000);\n  }\n}\n\nconst SLOW_CLICK_TAGS = ['A', 'BUTTON', 'INPUT'];\n\n/** exported for tests only */\nfunction ignoreElement(node, ignoreSelector) {\n  if (!SLOW_CLICK_TAGS.includes(node.tagName)) {\n    return true;\n  }\n\n  // If <input> tag, we only want to consider input[type='submit'] & input[type='button']\n  if (node.tagName === 'INPUT' && !['submit', 'button'].includes(node.getAttribute('type') || '')) {\n    return true;\n  }\n\n  // If <a> tag, detect special variants that may not lead to an action\n  // If target !== _self, we may open the link somewhere else, which would lead to no action\n  // Also, when downloading a file, we may not leave the page, but still not trigger an action\n  if (\n    node.tagName === 'A' &&\n    (node.hasAttribute('download') || (node.hasAttribute('target') && node.getAttribute('target') !== '_self'))\n  ) {\n    return true;\n  }\n\n  if (ignoreSelector && node.matches(ignoreSelector)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isClickBreadcrumb(breadcrumb) {\n  return !!(breadcrumb.data && typeof breadcrumb.data.nodeId === 'number' && breadcrumb.timestamp);\n}\n\n// This is good enough for us, and is easier to test/mock than `timestampInSeconds`\nfunction nowInSeconds() {\n  return Date.now() / 1000;\n}\n\n/** Update the click detector based on a recording event of rrweb. */\nfunction updateClickDetectorForRecordingEvent(clickDetector, event) {\n  try {\n    // note: We only consider incremental snapshots here\n    // This means that any full snapshot is ignored for mutation detection - the reason is that we simply cannot know if a mutation happened here.\n    // E.g. think that we are buffering, an error happens and we take a full snapshot because we switched to session mode -\n    // in this scenario, we would not know if a dead click happened because of the error, which is a key dead click scenario.\n    // Instead, by ignoring full snapshots, we have the risk that we generate a false positive\n    // (if a mutation _did_ happen but was \"swallowed\" by the full snapshot)\n    // But this should be more unlikely as we'd generally capture the incremental snapshot right away\n\n    if (!isIncrementalEvent(event)) {\n      return;\n    }\n\n    const { source } = event.data;\n    if (IncrementalMutationSources.has(source)) {\n      clickDetector.registerMutation(event.timestamp);\n    }\n\n    if (source === IncrementalSource.Scroll) {\n      clickDetector.registerScroll(event.timestamp);\n    }\n\n    if (isIncrementalMouseInteraction(event)) {\n      const { type, id } = event.data;\n      const node = record.mirror.getNode(id);\n\n      if (node instanceof HTMLElement && type === MouseInteractions.Click) {\n        clickDetector.registerClick(node);\n      }\n    }\n  } catch (e) {\n    // ignore errors here, e.g. if accessing something that does not exist\n  }\n}\n\nfunction isIncrementalEvent(event) {\n  return event.type === ReplayEventTypeIncrementalSnapshot;\n}\n\nfunction isIncrementalMouseInteraction(\n  event,\n) {\n  return event.data.source === IncrementalSource.MouseInteraction;\n}\n\n/**\n * Create a breadcrumb for a replay.\n */\nfunction createBreadcrumb(\n  breadcrumb,\n) {\n  return {\n    timestamp: Date.now() / 1000,\n    type: 'default',\n    ...breadcrumb,\n  };\n}\n\nvar NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\n// Note that these are the serialized attributes and not attributes directly on\n// the DOM Node. Attributes we are interested in:\nconst ATTRIBUTES_TO_RECORD = new Set([\n  'id',\n  'class',\n  'aria-label',\n  'role',\n  'name',\n  'alt',\n  'title',\n  'data-test-id',\n  'data-testid',\n  'disabled',\n  'aria-disabled',\n  'data-sentry-component',\n]);\n\n/**\n * Inclusion list of attributes that we want to record from the DOM element\n */\nfunction getAttributesToRecord(attributes) {\n  const obj = {};\n  if (!attributes['data-sentry-component'] && attributes['data-sentry-element']) {\n    attributes['data-sentry-component'] = attributes['data-sentry-element'];\n  }\n  for (const key in attributes) {\n    if (ATTRIBUTES_TO_RECORD.has(key)) {\n      let normalizedKey = key;\n\n      if (key === 'data-testid' || key === 'data-test-id') {\n        normalizedKey = 'testId';\n      }\n\n      obj[normalizedKey] = attributes[key];\n    }\n  }\n\n  return obj;\n}\n\nconst handleDomListener = (\n  replay,\n) => {\n  return (handlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleDom(handlerData);\n\n    if (!result) {\n      return;\n    }\n\n    const isClick = handlerData.name === 'click';\n    const event = isClick ? (handlerData.event ) : undefined;\n    // Ignore clicks if ctrl/alt/meta/shift keys are held down as they alter behavior of clicks (e.g. open in new tab)\n    if (\n      isClick &&\n      replay.clickDetector &&\n      event &&\n      event.target &&\n      !event.altKey &&\n      !event.metaKey &&\n      !event.ctrlKey &&\n      !event.shiftKey\n    ) {\n      handleClick(\n        replay.clickDetector,\n        result ,\n        getClickTargetNode(handlerData.event ) ,\n      );\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n};\n\n/** Get the base DOM breadcrumb. */\nfunction getBaseDomBreadcrumb(target, message) {\n  const nodeId = record.mirror.getId(target);\n  const node = nodeId && record.mirror.getNode(nodeId);\n  const meta = node && record.mirror.getMeta(node);\n  const element = meta && isElement(meta) ? meta : null;\n\n  return {\n    message,\n    data: element\n      ? {\n          nodeId,\n          node: {\n            id: nodeId,\n            tagName: element.tagName,\n            textContent: Array.from(element.childNodes)\n              .map((node) => node.type === NodeType.Text && node.textContent)\n              .filter(Boolean) // filter out empty values\n              .map(text => (text ).trim())\n              .join(''),\n            attributes: getAttributesToRecord(element.attributes),\n          },\n        }\n      : {},\n  };\n}\n\n/**\n * An event handler to react to DOM events.\n * Exported for tests.\n */\nfunction handleDom(handlerData) {\n  const { target, message } = getDomTarget(handlerData);\n\n  return createBreadcrumb({\n    category: `ui.${handlerData.name}`,\n    ...getBaseDomBreadcrumb(target, message),\n  });\n}\n\nfunction getDomTarget(handlerData) {\n  const isClick = handlerData.name === 'click';\n\n  let message;\n  let target = null;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    target = isClick ? getClickTargetNode(handlerData.event ) : getTargetNode(handlerData.event );\n    message = htmlTreeAsString(target, { maxStringLength: 200 }) || '<unknown>';\n  } catch (e) {\n    message = '<unknown>';\n  }\n\n  return { target, message };\n}\n\nfunction isElement(node) {\n  return node.type === NodeType.Element;\n}\n\n/** Handle keyboard events & create breadcrumbs. */\nfunction handleKeyboardEvent(replay, event) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  // Update user activity, but do not restart recording as it can create\n  // noisy/low-value replays (e.g. user comes back from idle, hits alt-tab, new\n  // session with a single \"keydown\" breadcrumb is created)\n  replay.updateUserActivity();\n\n  const breadcrumb = getKeyboardBreadcrumb(event);\n\n  if (!breadcrumb) {\n    return;\n  }\n\n  addBreadcrumbEvent(replay, breadcrumb);\n}\n\n/** exported only for tests */\nfunction getKeyboardBreadcrumb(event) {\n  const { metaKey, shiftKey, ctrlKey, altKey, key, target } = event;\n\n  // never capture for input fields\n  if (!target || isInputElement(target ) || !key) {\n    return null;\n  }\n\n  // Note: We do not consider shift here, as that means \"uppercase\"\n  const hasModifierKey = metaKey || ctrlKey || altKey;\n  const isCharacterKey = key.length === 1; // other keys like Escape, Tab, etc have a longer length\n\n  // Do not capture breadcrumb if only a word key is pressed\n  // This could leak e.g. user input\n  if (!hasModifierKey && isCharacterKey) {\n    return null;\n  }\n\n  const message = htmlTreeAsString(target, { maxStringLength: 200 }) || '<unknown>';\n  const baseBreadcrumb = getBaseDomBreadcrumb(target , message);\n\n  return createBreadcrumb({\n    category: 'ui.keyDown',\n    message,\n    data: {\n      ...baseBreadcrumb.data,\n      metaKey,\n      shiftKey,\n      ctrlKey,\n      altKey,\n      key,\n    },\n  });\n}\n\nfunction isInputElement(target) {\n  return target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;\n}\n\n// Map entryType -> function to normalize data for event\nconst ENTRY_TYPES\n\n = {\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry,\n};\n\n/**\n * Handler creater for web vitals\n */\nfunction webVitalHandler(\n  getter,\n  replay,\n) {\n  return ({ metric }) => void replay.replayPerformanceEntries.push(getter(metric));\n}\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nfunction createPerformanceEntries(\n  entries,\n) {\n  return entries.map(createPerformanceEntry).filter(Boolean) ;\n}\n\nfunction createPerformanceEntry(entry) {\n  const entryType = ENTRY_TYPES[entry.entryType];\n  if (!entryType) {\n    return null;\n  }\n\n  return entryType(entry);\n}\n\nfunction getAbsoluteTime(time) {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\n\nfunction createPaintEntry(entry) {\n  const { duration, entryType, name, startTime } = entry;\n\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration,\n    data: undefined,\n  };\n}\n\nfunction createNavigationEntry(entry) {\n  const {\n    entryType,\n    name,\n    decodedBodySize,\n    duration,\n    domComplete,\n    encodedBodySize,\n    domContentLoadedEventStart,\n    domContentLoadedEventEnd,\n    domInteractive,\n    loadEventStart,\n    loadEventEnd,\n    redirectCount,\n    startTime,\n    transferSize,\n    type,\n  } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      decodedBodySize,\n      encodedBodySize,\n      duration,\n      domInteractive,\n      domContentLoadedEventStart,\n      domContentLoadedEventEnd,\n      loadEventStart,\n      loadEventEnd,\n      domComplete,\n      redirectCount,\n    },\n  };\n}\n\nfunction createResourceEntry(\n  entry,\n) {\n  const {\n    entryType,\n    initiatorType,\n    name,\n    responseEnd,\n    startTime,\n    decodedBodySize,\n    encodedBodySize,\n    responseStatus,\n    transferSize,\n  } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      statusCode: responseStatus,\n      decodedBodySize,\n      encodedBodySize,\n    },\n  };\n}\n\n/**\n * Add a LCP event to the replay based on a LCP metric.\n */\nfunction getLargestContentfulPaint(metric) {\n  const lastEntry = metric.entries[metric.entries.length - 1] ;\n  const node = lastEntry && lastEntry.element ? [lastEntry.element] : undefined;\n  return getWebVital(metric, 'largest-contentful-paint', node);\n}\n\nfunction isLayoutShift(entry) {\n  return (entry ).sources !== undefined;\n}\n\n/**\n * Add a CLS event to the replay based on a CLS metric.\n */\nfunction getCumulativeLayoutShift(metric) {\n  const layoutShifts = [];\n  const nodes = [];\n  for (const entry of metric.entries) {\n    if (isLayoutShift(entry)) {\n      const nodeIds = [];\n      for (const source of entry.sources) {\n        if (source.node) {\n          nodes.push(source.node);\n          const nodeId = record.mirror.getId(source.node);\n          if (nodeId) {\n            nodeIds.push(nodeId);\n          }\n        }\n      }\n      layoutShifts.push({ value: entry.value, nodeIds: nodeIds.length ? nodeIds : undefined });\n    }\n  }\n\n  return getWebVital(metric, 'cumulative-layout-shift', nodes, layoutShifts);\n}\n\n/**\n * Add a FID event to the replay based on a FID metric.\n */\nfunction getFirstInputDelay(metric) {\n  const lastEntry = metric.entries[metric.entries.length - 1] ;\n  const node = lastEntry && lastEntry.target ? [lastEntry.target] : undefined;\n  return getWebVital(metric, 'first-input-delay', node);\n}\n\n/**\n * Add an INP event to the replay based on an INP metric.\n */\nfunction getInteractionToNextPaint(metric) {\n  const lastEntry = metric.entries[metric.entries.length - 1] ;\n  const node = lastEntry && lastEntry.target ? [lastEntry.target] : undefined;\n  return getWebVital(metric, 'interaction-to-next-paint', node);\n}\n\n/**\n * Add an web vital event to the replay based on the web vital metric.\n */\nfunction getWebVital(\n  metric,\n  name,\n  nodes,\n  attributions,\n) {\n  const value = metric.value;\n  const rating = metric.rating;\n\n  const end = getAbsoluteTime(value);\n\n  return {\n    type: 'web-vital',\n    name,\n    start: end,\n    end,\n    data: {\n      value,\n      size: value,\n      rating,\n      nodeIds: nodes ? nodes.map(node => record.mirror.getId(node)) : undefined,\n      attributions,\n    },\n  };\n}\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n * Returns a callback to stop observing.\n */\nfunction setupPerformanceObserver(replay) {\n  function addPerformanceEntry(entry) {\n    // It is possible for entries to come up multiple times\n    if (!replay.performanceEntries.includes(entry)) {\n      replay.performanceEntries.push(entry);\n    }\n  }\n\n  function onEntries({ entries }) {\n    entries.forEach(addPerformanceEntry);\n  }\n\n  const clearCallbacks = [];\n\n  (['navigation', 'paint', 'resource'] ).forEach(type => {\n    clearCallbacks.push(addPerformanceInstrumentationHandler(type, onEntries));\n  });\n\n  clearCallbacks.push(\n    addLcpInstrumentationHandler(webVitalHandler(getLargestContentfulPaint, replay)),\n    addClsInstrumentationHandler(webVitalHandler(getCumulativeLayoutShift, replay)),\n    addFidInstrumentationHandler(webVitalHandler(getFirstInputDelay, replay)),\n    addInpInstrumentationHandler(webVitalHandler(getInteractionToNextPaint, replay)),\n  );\n\n  // A callback to cleanup all handlers\n  return () => {\n    clearCallbacks.forEach(clearCallback => clearCallback());\n  };\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nconst r = `var t=Uint8Array,n=Uint16Array,r=Int32Array,e=new t([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),i=new t([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),a=new t([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=function(t,e){for(var i=new n(31),a=0;a<31;++a)i[a]=e+=1<<t[a-1];var s=new r(i[30]);for(a=1;a<30;++a)for(var o=i[a];o<i[a+1];++o)s[o]=o-i[a]<<5|a;return{b:i,r:s}},o=s(e,2),f=o.b,h=o.r;f[28]=258,h[258]=28;for(var l=s(i,0).r,u=new n(32768),c=0;c<32768;++c){var v=(43690&c)>>1|(21845&c)<<1;v=(61680&(v=(52428&v)>>2|(13107&v)<<2))>>4|(3855&v)<<4,u[c]=((65280&v)>>8|(255&v)<<8)>>1}var d=function(t,r,e){for(var i=t.length,a=0,s=new n(r);a<i;++a)t[a]&&++s[t[a]-1];var o,f=new n(r);for(a=1;a<r;++a)f[a]=f[a-1]+s[a-1]<<1;if(e){o=new n(1<<r);var h=15-r;for(a=0;a<i;++a)if(t[a])for(var l=a<<4|t[a],c=r-t[a],v=f[t[a]-1]++<<c,d=v|(1<<c)-1;v<=d;++v)o[u[v]>>h]=l}else for(o=new n(i),a=0;a<i;++a)t[a]&&(o[a]=u[f[t[a]-1]++]>>15-t[a]);return o},g=new t(288);for(c=0;c<144;++c)g[c]=8;for(c=144;c<256;++c)g[c]=9;for(c=256;c<280;++c)g[c]=7;for(c=280;c<288;++c)g[c]=8;var w=new t(32);for(c=0;c<32;++c)w[c]=5;var p=d(g,9,0),y=d(w,5,0),m=function(t){return(t+7)/8|0},b=function(n,r,e){return(null==e||e>n.length)&&(e=n.length),new t(n.subarray(r,e))},M=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],E=function(t,n,r){var e=new Error(n||M[t]);if(e.code=t,Error.captureStackTrace&&Error.captureStackTrace(e,E),!r)throw e;return e},z=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8},_=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8,t[e+2]|=r>>16},x=function(r,e){for(var i=[],a=0;a<r.length;++a)r[a]&&i.push({s:a,f:r[a]});var s=i.length,o=i.slice();if(!s)return{t:F,l:0};if(1==s){var f=new t(i[0].s+1);return f[i[0].s]=1,{t:f,l:1}}i.sort((function(t,n){return t.f-n.f})),i.push({s:-1,f:25001});var h=i[0],l=i[1],u=0,c=1,v=2;for(i[0]={s:-1,f:h.f+l.f,l:h,r:l};c!=s-1;)h=i[i[u].f<i[v].f?u++:v++],l=i[u!=c&&i[u].f<i[v].f?u++:v++],i[c++]={s:-1,f:h.f+l.f,l:h,r:l};var d=o[0].s;for(a=1;a<s;++a)o[a].s>d&&(d=o[a].s);var g=new n(d+1),w=A(i[c-1],g,0);if(w>e){a=0;var p=0,y=w-e,m=1<<y;for(o.sort((function(t,n){return g[n.s]-g[t.s]||t.f-n.f}));a<s;++a){var b=o[a].s;if(!(g[b]>e))break;p+=m-(1<<w-g[b]),g[b]=e}for(p>>=y;p>0;){var M=o[a].s;g[M]<e?p-=1<<e-g[M]++-1:++a}for(;a>=0&&p;--a){var E=o[a].s;g[E]==e&&(--g[E],++p)}w=e}return{t:new t(g),l:w}},A=function(t,n,r){return-1==t.s?Math.max(A(t.l,n,r+1),A(t.r,n,r+1)):n[t.s]=r},D=function(t){for(var r=t.length;r&&!t[--r];);for(var e=new n(++r),i=0,a=t[0],s=1,o=function(t){e[i++]=t},f=1;f<=r;++f)if(t[f]==a&&f!=r)++s;else{if(!a&&s>2){for(;s>138;s-=138)o(32754);s>2&&(o(s>10?s-11<<5|28690:s-3<<5|12305),s=0)}else if(s>3){for(o(a),--s;s>6;s-=6)o(8304);s>2&&(o(s-3<<5|8208),s=0)}for(;s--;)o(a);s=1,a=t[f]}return{c:e.subarray(0,i),n:r}},T=function(t,n){for(var r=0,e=0;e<n.length;++e)r+=t[e]*n[e];return r},k=function(t,n,r){var e=r.length,i=m(n+2);t[i]=255&e,t[i+1]=e>>8,t[i+2]=255^t[i],t[i+3]=255^t[i+1];for(var a=0;a<e;++a)t[i+a+4]=r[a];return 8*(i+4+e)},U=function(t,r,s,o,f,h,l,u,c,v,m){z(r,m++,s),++f[256];for(var b=x(f,15),M=b.t,E=b.l,A=x(h,15),U=A.t,C=A.l,F=D(M),I=F.c,S=F.n,L=D(U),O=L.c,j=L.n,q=new n(19),B=0;B<I.length;++B)++q[31&I[B]];for(B=0;B<O.length;++B)++q[31&O[B]];for(var G=x(q,7),H=G.t,J=G.l,K=19;K>4&&!H[a[K-1]];--K);var N,P,Q,R,V=v+5<<3,W=T(f,g)+T(h,w)+l,X=T(f,M)+T(h,U)+l+14+3*K+T(q,H)+2*q[16]+3*q[17]+7*q[18];if(c>=0&&V<=W&&V<=X)return k(r,m,t.subarray(c,c+v));if(z(r,m,1+(X<W)),m+=2,X<W){N=d(M,E,0),P=M,Q=d(U,C,0),R=U;var Y=d(H,J,0);z(r,m,S-257),z(r,m+5,j-1),z(r,m+10,K-4),m+=14;for(B=0;B<K;++B)z(r,m+3*B,H[a[B]]);m+=3*K;for(var Z=[I,O],$=0;$<2;++$){var tt=Z[$];for(B=0;B<tt.length;++B){var nt=31&tt[B];z(r,m,Y[nt]),m+=H[nt],nt>15&&(z(r,m,tt[B]>>5&127),m+=tt[B]>>12)}}}else N=p,P=g,Q=y,R=w;for(B=0;B<u;++B){var rt=o[B];if(rt>255){_(r,m,N[(nt=rt>>18&31)+257]),m+=P[nt+257],nt>7&&(z(r,m,rt>>23&31),m+=e[nt]);var et=31&rt;_(r,m,Q[et]),m+=R[et],et>3&&(_(r,m,rt>>5&8191),m+=i[et])}else _(r,m,N[rt]),m+=P[rt]}return _(r,m,N[256]),m+P[256]},C=new r([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),F=new t(0),I=function(){for(var t=new Int32Array(256),n=0;n<256;++n){for(var r=n,e=9;--e;)r=(1&r&&-306674912)^r>>>1;t[n]=r}return t}(),S=function(){var t=-1;return{p:function(n){for(var r=t,e=0;e<n.length;++e)r=I[255&r^n[e]]^r>>>8;t=r},d:function(){return~t}}},L=function(){var t=1,n=0;return{p:function(r){for(var e=t,i=n,a=0|r.length,s=0;s!=a;){for(var o=Math.min(s+2655,a);s<o;++s)i+=e+=r[s];e=(65535&e)+15*(e>>16),i=(65535&i)+15*(i>>16)}t=e,n=i},d:function(){return(255&(t%=65521))<<24|(65280&t)<<8|(255&(n%=65521))<<8|n>>8}}},O=function(a,s,o,f,u){if(!u&&(u={l:1},s.dictionary)){var c=s.dictionary.subarray(-32768),v=new t(c.length+a.length);v.set(c),v.set(a,c.length),a=v,u.w=c.length}return function(a,s,o,f,u,c){var v=c.z||a.length,d=new t(f+v+5*(1+Math.ceil(v/7e3))+u),g=d.subarray(f,d.length-u),w=c.l,p=7&(c.r||0);if(s){p&&(g[0]=c.r>>3);for(var y=C[s-1],M=y>>13,E=8191&y,z=(1<<o)-1,_=c.p||new n(32768),x=c.h||new n(z+1),A=Math.ceil(o/3),D=2*A,T=function(t){return(a[t]^a[t+1]<<A^a[t+2]<<D)&z},F=new r(25e3),I=new n(288),S=new n(32),L=0,O=0,j=c.i||0,q=0,B=c.w||0,G=0;j+2<v;++j){var H=T(j),J=32767&j,K=x[H];if(_[J]=K,x[H]=J,B<=j){var N=v-j;if((L>7e3||q>24576)&&(N>423||!w)){p=U(a,g,0,F,I,S,O,q,G,j-G,p),q=L=O=0,G=j;for(var P=0;P<286;++P)I[P]=0;for(P=0;P<30;++P)S[P]=0}var Q=2,R=0,V=E,W=J-K&32767;if(N>2&&H==T(j-W))for(var X=Math.min(M,N)-1,Y=Math.min(32767,j),Z=Math.min(258,N);W<=Y&&--V&&J!=K;){if(a[j+Q]==a[j+Q-W]){for(var $=0;$<Z&&a[j+$]==a[j+$-W];++$);if($>Q){if(Q=$,R=W,$>X)break;var tt=Math.min(W,$-2),nt=0;for(P=0;P<tt;++P){var rt=j-W+P&32767,et=rt-_[rt]&32767;et>nt&&(nt=et,K=rt)}}}W+=(J=K)-(K=_[J])&32767}if(R){F[q++]=268435456|h[Q]<<18|l[R];var it=31&h[Q],at=31&l[R];O+=e[it]+i[at],++I[257+it],++S[at],B=j+Q,++L}else F[q++]=a[j],++I[a[j]]}}for(j=Math.max(j,B);j<v;++j)F[q++]=a[j],++I[a[j]];p=U(a,g,w,F,I,S,O,q,G,j-G,p),w||(c.r=7&p|g[p/8|0]<<3,p-=7,c.h=x,c.p=_,c.i=j,c.w=B)}else{for(j=c.w||0;j<v+w;j+=65535){var st=j+65535;st>=v&&(g[p/8|0]=w,st=v),p=k(g,p+1,a.subarray(j,st))}c.i=v}return b(d,0,f+m(p)+u)}(a,null==s.level?6:s.level,null==s.mem?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(a.length)))):12+s.mem,o,f,u)},j=function(t,n,r){for(;r;++n)t[n]=r,r>>>=8},q=function(t,n){var r=n.filename;if(t[0]=31,t[1]=139,t[2]=8,t[8]=n.level<2?4:9==n.level?2:0,t[9]=3,0!=n.mtime&&j(t,4,Math.floor(new Date(n.mtime||Date.now())/1e3)),r){t[3]=8;for(var e=0;e<=r.length;++e)t[e+10]=r.charCodeAt(e)}},B=function(t){return 10+(t.filename?t.filename.length+1:0)},G=function(){function n(n,r){if(\"function\"==typeof n&&(r=n,n={}),this.ondata=r,this.o=n||{},this.s={l:0,i:32768,w:32768,z:32768},this.b=new t(98304),this.o.dictionary){var e=this.o.dictionary.subarray(-32768);this.b.set(e,32768-e.length),this.s.i=32768-e.length}}return n.prototype.p=function(t,n){this.ondata(O(t,this.o,0,0,this.s),n)},n.prototype.push=function(n,r){this.ondata||E(5),this.s.l&&E(4);var e=n.length+this.s.z;if(e>this.b.length){if(e>2*this.b.length-32768){var i=new t(-32768&e);i.set(this.b.subarray(0,this.s.z)),this.b=i}var a=this.b.length-this.s.z;a&&(this.b.set(n.subarray(0,a),this.s.z),this.s.z=this.b.length,this.p(this.b,!1)),this.b.set(this.b.subarray(-32768)),this.b.set(n.subarray(a),32768),this.s.z=n.length-a+32768,this.s.i=32766,this.s.w=32768}else this.b.set(n,this.s.z),this.s.z+=n.length;this.s.l=1&r,(this.s.z>this.s.w+8191||r)&&(this.p(this.b,r||!1),this.s.w=this.s.i,this.s.i-=2)},n}();var H=function(){function t(t,n){this.c=L(),this.v=1,G.call(this,t,n)}return t.prototype.push=function(t,n){this.c.p(t),G.prototype.push.call(this,t,n)},t.prototype.p=function(t,n){var r=O(t,this.o,this.v&&(this.o.dictionary?6:2),n&&4,this.s);this.v&&(function(t,n){var r=n.level,e=0==r?0:r<6?1:9==r?3:2;if(t[0]=120,t[1]=e<<6|(n.dictionary&&32),t[1]|=31-(t[0]<<8|t[1])%31,n.dictionary){var i=L();i.p(n.dictionary),j(t,2,i.d())}}(r,this.o),this.v=0),n&&j(r,r.length-4,this.c.d()),this.ondata(r,n)},t}(),J=\"undefined\"!=typeof TextEncoder&&new TextEncoder,K=\"undefined\"!=typeof TextDecoder&&new TextDecoder;try{K.decode(F,{stream:!0})}catch(t){}var N=function(){function t(t){this.ondata=t}return t.prototype.push=function(t,n){this.ondata||E(5),this.d&&E(4),this.ondata(P(t),this.d=n||!1)},t}();function P(n,r){if(J)return J.encode(n);for(var e=n.length,i=new t(n.length+(n.length>>1)),a=0,s=function(t){i[a++]=t},o=0;o<e;++o){if(a+5>i.length){var f=new t(a+8+(e-o<<1));f.set(i),i=f}var h=n.charCodeAt(o);h<128||r?s(h):h<2048?(s(192|h>>6),s(128|63&h)):h>55295&&h<57344?(s(240|(h=65536+(1047552&h)|1023&n.charCodeAt(++o))>>18),s(128|h>>12&63),s(128|h>>6&63),s(128|63&h)):(s(224|h>>12),s(128|h>>6&63),s(128|63&h))}return b(i,0,a)}function Q(t){return function(t,n){n||(n={});var r=S(),e=t.length;r.p(t);var i=O(t,n,B(n),8),a=i.length;return q(i,n),j(i,a-8,r.d()),j(i,a-4,e),i}(P(t))}const R=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const n=this._hasEvents?\",\":\"\";this.stream.push(n+t),this._hasEvents=!0}finish(){this.stream.push(\"]\",!0);const t=function(t){let n=0;for(const r of t)n+=r.length;const r=new Uint8Array(n);for(let n=0,e=0,i=t.length;n<i;n++){const i=t[n];r.set(i,e),e+=i.length}return r}(this._deflatedData);return this._init(),t}_init(){this._hasEvents=!1,this._deflatedData=[],this.deflate=new H,this.deflate.ondata=(t,n)=>{this._deflatedData.push(t)},this.stream=new N(((t,n)=>{this.deflate.push(t,n)})),this.stream.push(\"[\")}},V={clear:()=>{R.clear()},addEvent:t=>R.addEvent(t),finish:()=>R.finish(),compress:t=>Q(t)};addEventListener(\"message\",(function(t){const n=t.data.method,r=t.data.id,e=t.data.arg;if(n in V&&\"function\"==typeof V[n])try{const t=V[n](e);postMessage({id:r,method:n,success:!0,response:t})}catch(t){postMessage({id:r,method:n,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\n\nfunction e(){const e=new Blob([r]);return URL.createObjectURL(e)}\n\nconst CONSOLE_LEVELS = ['info', 'warn', 'error', 'log'] ;\nconst PREFIX = '[Replay] ';\n\nfunction _addBreadcrumb(message, level = 'info') {\n  addBreadcrumb(\n    {\n      category: 'console',\n      data: {\n        logger: 'replay',\n      },\n      level,\n      message: `${PREFIX}${message}`,\n    },\n    { level },\n  );\n}\n\nfunction makeReplayLogger() {\n  let _capture = false;\n  let _trace = false;\n\n  const _logger = {\n    exception: () => undefined,\n    infoTick: () => undefined,\n    setConfig: (opts) => {\n      _capture = opts.captureExceptions;\n      _trace = opts.traceInternals;\n    },\n  };\n\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      _logger[name] = (...args) => {\n        logger$1[name](PREFIX, ...args);\n        if (_trace) {\n          _addBreadcrumb(args.join(''), severityLevelFromString(name));\n        }\n      };\n    });\n\n    _logger.exception = (error, ...message) => {\n      if (message.length && _logger.error) {\n        _logger.error(...message);\n      }\n\n      logger$1.error(PREFIX, error);\n\n      if (_capture) {\n        captureException(error);\n      } else if (_trace) {\n        // No need for a breadcrumb if `_capture` is enabled since it should be\n        // captured as an exception\n        _addBreadcrumb(error, 'error');\n      }\n    };\n\n    _logger.infoTick = (...args) => {\n      logger$1.info(PREFIX, ...args);\n      if (_trace) {\n        // Wait a tick here to avoid race conditions for some initial logs\n        // which may be added before replay is initialized\n        setTimeout(() => _addBreadcrumb(args[0]), 0);\n      }\n    };\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      _logger[name] = () => undefined;\n    });\n  }\n\n  return _logger ;\n}\n\nconst logger = makeReplayLogger();\n\n/** This error indicates that the event buffer size exceeded the limit.. */\nclass EventBufferSizeExceededError extends Error {\n   constructor() {\n    super(`Event buffer exceeded maximum size of ${REPLAY_MAX_EVENT_BUFFER_SIZE}.`);\n  }\n}\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nclass EventBufferArray  {\n  /** All the events that are buffered to be sent. */\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n\n   constructor() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n    this.waitForCheckout = false;\n  }\n\n  /** @inheritdoc */\n   get hasEvents() {\n    return this.events.length > 0;\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return 'sync';\n  }\n\n  /** @inheritdoc */\n   destroy() {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n   async addEvent(event) {\n    const eventSize = JSON.stringify(event).length;\n    this._totalSize += eventSize;\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      throw new EventBufferSizeExceededError();\n    }\n\n    this.events.push(event);\n  }\n\n  /** @inheritdoc */\n   finish() {\n    return new Promise(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this.events;\n      this.clear();\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n\n  /** @inheritdoc */\n   clear() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    const timestamp = this.events.map(event => event.timestamp).sort()[0];\n\n    if (!timestamp) {\n      return null;\n    }\n\n    return timestampToMs(timestamp);\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass WorkerHandler {\n\n   constructor(worker) {\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occurred.\n   */\n   ensureReady() {\n    // Ensure we only check once\n    if (this._ensureReadyPromise) {\n      return this._ensureReadyPromise;\n    }\n\n    this._ensureReadyPromise = new Promise((resolve, reject) => {\n      this._worker.addEventListener(\n        'message',\n        ({ data }) => {\n          if ((data ).success) {\n            resolve();\n          } else {\n            reject();\n          }\n        },\n        { once: true },\n      );\n\n      this._worker.addEventListener(\n        'error',\n        error => {\n          reject(error);\n        },\n        { once: true },\n      );\n    });\n\n    return this._ensureReadyPromise;\n  }\n\n  /**\n   * Destroy the worker.\n   */\n   destroy() {\n    DEBUG_BUILD && logger.info('Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n   postMessage(method, arg) {\n    const id = this._getAndIncrementId();\n\n    return new Promise((resolve, reject) => {\n      const listener = ({ data }) => {\n        const response = data ;\n        if (response.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (response.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n\n        if (!response.success) {\n          // TODO: Do some error handling, not sure what\n          DEBUG_BUILD && logger.error('Error in compression worker: ', response.response);\n\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n\n        resolve(response.response );\n      };\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({ id, method, arg });\n    });\n  }\n\n  /** Get the current ID and increment it for the next call. */\n   _getAndIncrementId() {\n    return this._id++;\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass EventBufferCompressionWorker  {\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n\n   constructor(worker) {\n    this._worker = new WorkerHandler(worker);\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n    this.waitForCheckout = false;\n  }\n\n  /** @inheritdoc */\n   get hasEvents() {\n    return !!this._earliestTimestamp;\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return 'worker';\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occurred.\n   */\n   ensureReady() {\n    return this._worker.ensureReady();\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n   destroy() {\n    this._worker.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully received and processed by worker.\n   */\n   addEvent(event) {\n    const timestamp = timestampToMs(event.timestamp);\n    if (!this._earliestTimestamp || timestamp < this._earliestTimestamp) {\n      this._earliestTimestamp = timestamp;\n    }\n\n    const data = JSON.stringify(event);\n    this._totalSize += data.length;\n\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      return Promise.reject(new EventBufferSizeExceededError());\n    }\n\n    return this._sendEventToWorker(data);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n   finish() {\n    return this._finishRequest();\n  }\n\n  /** @inheritdoc */\n   clear() {\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n\n    // We do not wait on this, as we assume the order of messages is consistent for the worker\n    this._worker.postMessage('clear').then(null, e => {\n      DEBUG_BUILD && logger.exception(e, 'Sending \"clear\" message to worker failed', e);\n    });\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    return this._earliestTimestamp;\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n   _sendEventToWorker(data) {\n    return this._worker.postMessage('addEvent', data);\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n   async _finishRequest() {\n    const response = await this._worker.postMessage('finish');\n\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n\n    return response;\n  }\n}\n\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nclass EventBufferProxy  {\n\n   constructor(worker) {\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritdoc */\n   get waitForCheckout() {\n    return this._used.waitForCheckout;\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return this._used.type;\n  }\n\n  /** @inheritDoc */\n   get hasEvents() {\n    return this._used.hasEvents;\n  }\n\n  /** @inheritdoc */\n   get hasCheckout() {\n    return this._used.hasCheckout;\n  }\n  /** @inheritdoc */\n   set hasCheckout(value) {\n    this._used.hasCheckout = value;\n  }\n\n  /** @inheritdoc */\n  // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures\n   set waitForCheckout(value) {\n    this._used.waitForCheckout = value;\n  }\n\n  /** @inheritDoc */\n   destroy() {\n    this._fallback.destroy();\n    this._compression.destroy();\n  }\n\n  /** @inheritdoc */\n   clear() {\n    return this._used.clear();\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    return this._used.getEarliestTimestamp();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully added.\n   */\n   addEvent(event) {\n    return this._used.addEvent(event);\n  }\n\n  /** @inheritDoc */\n   async finish() {\n    // Ensure the worker is loaded, so the sent event is compressed\n    await this.ensureWorkerIsLoaded();\n\n    return this._used.finish();\n  }\n\n  /** Ensure the worker has loaded. */\n   ensureWorkerIsLoaded() {\n    return this._ensureWorkerIsLoadedPromise;\n  }\n\n  /** Actually check if the worker has been loaded. */\n   async _ensureWorkerIsLoaded() {\n    try {\n      await this._compression.ensureReady();\n    } catch (error) {\n      // If the worker fails to load, we fall back to the simple buffer.\n      // Nothing more to do from our side here\n      DEBUG_BUILD && logger.exception(error, 'Failed to load the compression worker, falling back to simple buffer');\n      return;\n    }\n\n    // Now we need to switch over the array buffer to the compression worker\n    await this._switchToCompressionWorker();\n  }\n\n  /** Switch the used buffer to the compression worker. */\n   async _switchToCompressionWorker() {\n    const { events, hasCheckout, waitForCheckout } = this._fallback;\n\n    const addEventPromises = [];\n    for (const event of events) {\n      addEventPromises.push(this._compression.addEvent(event));\n    }\n\n    this._compression.hasCheckout = hasCheckout;\n    this._compression.waitForCheckout = waitForCheckout;\n\n    // We switch over to the new buffer immediately - any further events will be added\n    // after the previously buffered ones\n    this._used = this._compression;\n\n    // Wait for original events to be re-added before resolving\n    try {\n      await Promise.all(addEventPromises);\n\n      // Can now clear fallback buffer as it's no longer necessary\n      this._fallback.clear();\n    } catch (error) {\n      DEBUG_BUILD && logger.exception(error, 'Failed to add events when switching buffers.');\n    }\n  }\n}\n\n/**\n * Create an event buffer for replays.\n */\nfunction createEventBuffer({\n  useCompression,\n  workerUrl: customWorkerUrl,\n}) {\n  if (\n    useCompression &&\n    // eslint-disable-next-line no-restricted-globals\n    window.Worker\n  ) {\n    const worker = _loadWorker(customWorkerUrl);\n\n    if (worker) {\n      return worker;\n    }\n  }\n\n  DEBUG_BUILD && logger.info('Using simple buffer');\n  return new EventBufferArray();\n}\n\nfunction _loadWorker(customWorkerUrl) {\n  try {\n    const workerUrl = customWorkerUrl || _getWorkerUrl();\n\n    if (!workerUrl) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.info(`Using compression worker${customWorkerUrl ? ` from ${customWorkerUrl}` : ''}`);\n    const worker = new Worker(workerUrl);\n    return new EventBufferProxy(worker);\n  } catch (error) {\n    DEBUG_BUILD && logger.exception(error, 'Failed to create compression worker');\n    // Fall back to use simple event buffer array\n  }\n}\n\nfunction _getWorkerUrl() {\n  if (typeof __SENTRY_EXCLUDE_REPLAY_WORKER__ === 'undefined' || !__SENTRY_EXCLUDE_REPLAY_WORKER__) {\n    return e();\n  }\n\n  return '';\n}\n\n/** If sessionStorage is available. */\nfunction hasSessionStorage() {\n  try {\n    // This can throw, e.g. when being accessed in a sandboxed iframe\n    return 'sessionStorage' in WINDOW && !!WINDOW.sessionStorage;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Removes the session from Session Storage and unsets session in replay instance\n */\nfunction clearSession(replay) {\n  deleteSession();\n  replay.session = undefined;\n}\n\n/**\n * Deletes a session from storage\n */\nfunction deleteSession() {\n  if (!hasSessionStorage()) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.removeItem(REPLAY_SESSION_KEY);\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nfunction isSampled(sampleRate) {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n\n/**\n * Get a session with defaults & applied sampling.\n */\nfunction makeSession(session) {\n  const now = Date.now();\n  const id = session.id || uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  const started = session.started || now;\n  const lastActivity = session.lastActivity || now;\n  const segmentId = session.segmentId || 0;\n  const sampled = session.sampled;\n  const previousSessionId = session.previousSessionId;\n\n  return {\n    id,\n    started,\n    lastActivity,\n    segmentId,\n    sampled,\n    previousSessionId,\n  };\n}\n\n/**\n * Save a session to session storage.\n */\nfunction saveSession(session) {\n  if (!hasSessionStorage()) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nfunction getSessionSampleType(sessionSampleRate, allowBuffering) {\n  return isSampled(sessionSampleRate) ? 'session' : allowBuffering ? 'buffer' : false;\n}\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nfunction createSession(\n  { sessionSampleRate, allowBuffering, stickySession = false },\n  { previousSessionId } = {},\n) {\n  const sampled = getSessionSampleType(sessionSampleRate, allowBuffering);\n  const session = makeSession({\n    sampled,\n    previousSessionId,\n  });\n\n  if (stickySession) {\n    saveSession(session);\n  }\n\n  return session;\n}\n\n/**\n * Fetches a session from storage\n */\nfunction fetchSession() {\n  if (!hasSessionStorage()) {\n    return null;\n  }\n\n  try {\n    // This can throw if cookies are disabled\n    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n\n    const sessionObj = JSON.parse(sessionStringFromStorage) ;\n\n    DEBUG_BUILD && logger.infoTick('Loading existing session');\n\n    return makeSession(sessionObj);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nfunction isExpired(\n  initialTime,\n  expiry,\n  targetTime = +new Date(),\n) {\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n\n  return initialTime + expiry <= targetTime;\n}\n\n/**\n * Checks to see if session is expired\n */\nfunction isSessionExpired(\n  session,\n  {\n    maxReplayDuration,\n    sessionIdleExpire,\n    targetTime = Date.now(),\n  },\n) {\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, maxReplayDuration, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `sessionIdleExpire` ms)\n    isExpired(session.lastActivity, sessionIdleExpire, targetTime)\n  );\n}\n\n/** If the session should be refreshed or not. */\nfunction shouldRefreshSession(\n  session,\n  { sessionIdleExpire, maxReplayDuration },\n) {\n  // If not expired, all good, just keep the session\n  if (!isSessionExpired(session, { sessionIdleExpire, maxReplayDuration })) {\n    return false;\n  }\n\n  // If we are buffering & haven't ever flushed yet, always continue\n  if (session.sampled === 'buffer' && session.segmentId === 0) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Get or create a session, when initializing the replay.\n * Returns a session that may be unsampled.\n */\nfunction loadOrCreateSession(\n  {\n    sessionIdleExpire,\n    maxReplayDuration,\n    previousSessionId,\n  }\n\n,\n  sessionOptions,\n) {\n  const existingSession = sessionOptions.stickySession && fetchSession();\n\n  // No session exists yet, just create a new one\n  if (!existingSession) {\n    DEBUG_BUILD && logger.infoTick('Creating new session');\n    return createSession(sessionOptions, { previousSessionId });\n  }\n\n  if (!shouldRefreshSession(existingSession, { sessionIdleExpire, maxReplayDuration })) {\n    return existingSession;\n  }\n\n  DEBUG_BUILD && logger.infoTick('Session in sessionStorage is expired, creating new one...');\n  return createSession(sessionOptions, { previousSessionId: existingSession.id });\n}\n\nfunction isCustomEvent(event) {\n  return event.type === EventType.Custom;\n}\n\n/**\n * Add an event to the event buffer.\n * In contrast to `addEvent`, this does not return a promise & does not wait for the adding of the event to succeed/fail.\n * Instead this returns `true` if we tried to add the event, else false.\n * It returns `false` e.g. if we are paused, disabled, or out of the max replay duration.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEventSync(replay, event, isCheckout) {\n  if (!shouldAddEvent(replay, event)) {\n    return false;\n  }\n\n  // This should never reject\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  _addEvent(replay, event, isCheckout);\n\n  return true;\n}\n\n/**\n * Add an event to the event buffer.\n * Resolves to `null` if no event was added, else to `void`.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEvent(\n  replay,\n  event,\n  isCheckout,\n) {\n  if (!shouldAddEvent(replay, event)) {\n    return Promise.resolve(null);\n  }\n\n  return _addEvent(replay, event, isCheckout);\n}\n\nasync function _addEvent(\n  replay,\n  event,\n  isCheckout,\n) {\n  const { eventBuffer } = replay;\n\n  if (!eventBuffer || (eventBuffer.waitForCheckout && !isCheckout)) {\n    return null;\n  }\n\n  const isBufferMode = replay.recordingMode === 'buffer';\n\n  try {\n    if (isCheckout && isBufferMode) {\n      eventBuffer.clear();\n    }\n\n    if (isCheckout) {\n      eventBuffer.hasCheckout = true;\n      eventBuffer.waitForCheckout = false;\n    }\n\n    const replayOptions = replay.getOptions();\n\n    const eventAfterPossibleCallback = maybeApplyCallback(event, replayOptions.beforeAddRecordingEvent);\n\n    if (!eventAfterPossibleCallback) {\n      return;\n    }\n\n    return await eventBuffer.addEvent(eventAfterPossibleCallback);\n  } catch (error) {\n    const isExceeded = error && error instanceof EventBufferSizeExceededError;\n    const reason = isExceeded ? 'addEventSizeExceeded' : 'addEvent';\n\n    if (isExceeded && isBufferMode) {\n      // Clear buffer and wait for next checkout\n      eventBuffer.clear();\n      eventBuffer.waitForCheckout = true;\n\n      return null;\n    }\n\n    replay.handleException(error);\n\n    await replay.stop({ reason });\n\n    const client = getClient();\n\n    if (client) {\n      client.recordDroppedEvent('internal_sdk_error', 'replay');\n    }\n  }\n}\n\n/** Exported only for tests. */\nfunction shouldAddEvent(replay, event) {\n  if (!replay.eventBuffer || replay.isPaused() || !replay.isEnabled()) {\n    return false;\n  }\n\n  const timestampInMs = timestampToMs(event.timestamp);\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + replay.timeouts.sessionIdlePause < Date.now()) {\n    return false;\n  }\n\n  // Throw out events that are +60min from the initial timestamp\n  if (timestampInMs > replay.getContext().initialTimestamp + replay.getOptions().maxReplayDuration) {\n    DEBUG_BUILD &&\n      logger.infoTick(`Skipping event with timestamp ${timestampInMs} because it is after maxReplayDuration`);\n    return false;\n  }\n\n  return true;\n}\n\nfunction maybeApplyCallback(\n  event,\n  callback,\n) {\n  try {\n    if (typeof callback === 'function' && isCustomEvent(event)) {\n      return callback(event);\n    }\n  } catch (error) {\n    DEBUG_BUILD &&\n      logger.exception(error, 'An error occurred in the `beforeAddRecordingEvent` callback, skipping the event...');\n    return null;\n  }\n\n  return event;\n}\n\n/** If the event is an error event */\nfunction isErrorEvent(event) {\n  return !event.type;\n}\n\n/** If the event is a transaction event */\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\n/** If the event is an replay event */\nfunction isReplayEvent(event) {\n  return event.type === 'replay_event';\n}\n\n/** If the event is a feedback event */\nfunction isFeedbackEvent(event) {\n  return event.type === 'feedback';\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleAfterSendEvent(replay) {\n  return (event, sendResponse) => {\n    if (!replay.isEnabled() || (!isErrorEvent(event) && !isTransactionEvent(event))) {\n      return;\n    }\n\n    const statusCode = sendResponse && sendResponse.statusCode;\n\n    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n    // If we do use the base transport, we skip if we encountered an non-OK status code\n    if (!statusCode || statusCode < 200 || statusCode >= 300) {\n      return;\n    }\n\n    if (isTransactionEvent(event)) {\n      handleTransactionEvent(replay, event);\n      return;\n    }\n\n    handleErrorEvent(replay, event);\n  };\n}\n\nfunction handleTransactionEvent(replay, event) {\n  const replayContext = replay.getContext();\n\n  // Collect traceIds in _context regardless of `recordingMode`\n  // In error mode, _context gets cleared on every checkout\n  // We limit to max. 100 transactions linked\n  if (event.contexts && event.contexts.trace && event.contexts.trace.trace_id && replayContext.traceIds.size < 100) {\n    replayContext.traceIds.add(event.contexts.trace.trace_id );\n  }\n}\n\nfunction handleErrorEvent(replay, event) {\n  const replayContext = replay.getContext();\n\n  // Add error to list of errorIds of replay. This is ok to do even if not\n  // sampled because context will get reset at next checkout.\n  // XXX: There is also a race condition where it's possible to capture an\n  // error to Sentry before Replay SDK has loaded, but response returns after\n  // it was loaded, and this gets called.\n  // We limit to max. 100 errors linked\n  if (event.event_id && replayContext.errorIds.size < 100) {\n    replayContext.errorIds.add(event.event_id);\n  }\n\n  // If error event is tagged with replay id it means it was sampled (when in buffer mode)\n  // Need to be very careful that this does not cause an infinite loop\n  if (replay.recordingMode !== 'buffer' || !event.tags || !event.tags.replayId) {\n    return;\n  }\n\n  const { beforeErrorSampling } = replay.getOptions();\n  if (typeof beforeErrorSampling === 'function' && !beforeErrorSampling(event)) {\n    return;\n  }\n\n  setTimeout$3(async () => {\n    try {\n      // Capture current event buffer as new replay\n      await replay.sendBufferedReplayOrFlush();\n    } catch (err) {\n      replay.handleException(err);\n    }\n  });\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleBeforeSendEvent(replay) {\n  return (event) => {\n    if (!replay.isEnabled() || !isErrorEvent(event)) {\n      return;\n    }\n\n    handleHydrationError(replay, event);\n  };\n}\n\nfunction handleHydrationError(replay, event) {\n  const exceptionValue =\n    event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].value;\n  if (typeof exceptionValue !== 'string') {\n    return;\n  }\n\n  if (\n    // Only matches errors in production builds of react-dom\n    // Example https://reactjs.org/docs/error-decoder.html?invariant=423\n    // With newer React versions, the messages changed to a different website https://react.dev/errors/418\n    exceptionValue.match(\n      /(reactjs\\.org\\/docs\\/error-decoder\\.html\\?invariant=|react\\.dev\\/errors\\/)(418|419|422|423|425)/,\n    ) ||\n    // Development builds of react-dom\n    // Error 1: Hydration failed because the initial UI does not match what was rendered on the server.\n    // Error 2: Text content does not match server-rendered HTML. Warning: Text content did not match.\n    exceptionValue.match(/(does not match server-rendered HTML|Hydration failed because)/i)\n  ) {\n    const breadcrumb = createBreadcrumb({\n      category: 'replay.hydrate-error',\n      data: {\n        url: getLocationHref(),\n      },\n    });\n    addBreadcrumbEvent(replay, breadcrumb);\n  }\n}\n\n/**\n * Handle breadcrumbs that Sentry captures, and make sure to capture relevant breadcrumbs to Replay as well.\n */\nfunction handleBreadcrumbs(replay) {\n  const client = getClient();\n\n  if (!client) {\n    return;\n  }\n\n  client.on('beforeAddBreadcrumb', breadcrumb => beforeAddBreadcrumb(replay, breadcrumb));\n}\n\nfunction beforeAddBreadcrumb(replay, breadcrumb) {\n  if (!replay.isEnabled() || !isBreadcrumbWithCategory(breadcrumb)) {\n    return;\n  }\n\n  const result = normalizeBreadcrumb(breadcrumb);\n  if (result) {\n    addBreadcrumbEvent(replay, result);\n  }\n}\n\n/** Exported only for tests. */\nfunction normalizeBreadcrumb(breadcrumb) {\n  if (\n    !isBreadcrumbWithCategory(breadcrumb) ||\n    [\n      // fetch & xhr are handled separately,in handleNetworkBreadcrumbs\n      'fetch',\n      'xhr',\n      // These two are breadcrumbs for emitted sentry events, we don't care about them\n      'sentry.event',\n      'sentry.transaction',\n    ].includes(breadcrumb.category) ||\n    // We capture UI breadcrumbs separately\n    breadcrumb.category.startsWith('ui.')\n  ) {\n    return null;\n  }\n\n  if (breadcrumb.category === 'console') {\n    return normalizeConsoleBreadcrumb(breadcrumb);\n  }\n\n  return createBreadcrumb(breadcrumb);\n}\n\n/** exported for tests only */\nfunction normalizeConsoleBreadcrumb(\n  breadcrumb,\n) {\n  const args = breadcrumb.data && breadcrumb.data.arguments;\n\n  if (!Array.isArray(args) || args.length === 0) {\n    return createBreadcrumb(breadcrumb);\n  }\n\n  let isTruncated = false;\n\n  // Avoid giant args captures\n  const normalizedArgs = args.map(arg => {\n    if (!arg) {\n      return arg;\n    }\n    if (typeof arg === 'string') {\n      if (arg.length > CONSOLE_ARG_MAX_SIZE) {\n        isTruncated = true;\n        return `${arg.slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n      }\n\n      return arg;\n    }\n    if (typeof arg === 'object') {\n      try {\n        const normalizedArg = normalize(arg, 7);\n        const stringified = JSON.stringify(normalizedArg);\n        if (stringified.length > CONSOLE_ARG_MAX_SIZE) {\n          isTruncated = true;\n          // We use the pretty printed JSON string here as a base\n          return `${JSON.stringify(normalizedArg, null, 2).slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n        }\n        return normalizedArg;\n      } catch (e) {\n        // fall back to default\n      }\n    }\n\n    return arg;\n  });\n\n  return createBreadcrumb({\n    ...breadcrumb,\n    data: {\n      ...breadcrumb.data,\n      arguments: normalizedArgs,\n      ...(isTruncated ? { _meta: { warnings: ['CONSOLE_ARG_TRUNCATED'] } } : {}),\n    },\n  });\n}\n\nfunction isBreadcrumbWithCategory(breadcrumb) {\n  return !!breadcrumb.category;\n}\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nfunction isRrwebError(event, hint) {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-expect-error this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Reset the `replay_id` field on the DSC.\n */\nfunction resetReplayIdOnDynamicSamplingContext() {\n  // Reset DSC on the current scope, if there is one\n  const dsc = getCurrentScope().getPropagationContext().dsc;\n  if (dsc) {\n    delete dsc.replay_id;\n  }\n\n  // Clear it from frozen DSC on the active span\n  const activeSpan = getActiveSpan();\n  if (activeSpan) {\n    const dsc = getDynamicSamplingContextFromSpan(activeSpan);\n    delete (dsc ).replay_id;\n  }\n}\n\n/**\n * Add a feedback breadcrumb event to replay.\n */\nfunction addFeedbackBreadcrumb(replay, event) {\n  replay.triggerUserActivity();\n  replay.addUpdate(() => {\n    if (!event.timestamp) {\n      // Ignore events that don't have timestamps (this shouldn't happen, more of a typing issue)\n      // Return true here so that we don't flush\n      return true;\n    }\n\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: event.timestamp * 1000,\n      data: {\n        tag: 'breadcrumb',\n        payload: {\n          timestamp: event.timestamp,\n          type: 'default',\n          category: 'sentry.feedback',\n          data: {\n            feedbackId: event.event_id,\n          },\n        },\n      },\n    } );\n\n    return false;\n  });\n}\n\n/**\n * Determine if event should be sampled (only applies in buffer mode).\n * When an event is captured by `handleGlobalEvent`, when in buffer mode\n * we determine if we want to sample the error or not.\n */\nfunction shouldSampleForBufferEvent(replay, event) {\n  if (replay.recordingMode !== 'buffer') {\n    return false;\n  }\n\n  // ignore this error because otherwise we could loop indefinitely with\n  // trying to capture replay and failing\n  if (event.message === UNABLE_TO_SEND_REPLAY) {\n    return false;\n  }\n\n  // Require the event to be an error event & to have an exception\n  if (!event.exception || event.type) {\n    return false;\n  }\n\n  return isSampled(replay.getOptions().errorSampleRate);\n}\n\n/**\n * Returns a listener to be added to `addEventProcessor(listener)`.\n */\nfunction handleGlobalEventListener(replay) {\n  return Object.assign(\n    (event, hint) => {\n      // Do nothing if replay has been disabled or paused\n      if (!replay.isEnabled() || replay.isPaused()) {\n        return event;\n      }\n\n      if (isReplayEvent(event)) {\n        // Replays have separate set of breadcrumbs, do not include breadcrumbs\n        // from core SDK\n        delete event.breadcrumbs;\n        return event;\n      }\n\n      // We only want to handle errors, transactions, and feedbacks, nothing else\n      if (!isErrorEvent(event) && !isTransactionEvent(event) && !isFeedbackEvent(event)) {\n        return event;\n      }\n\n      // Ensure we do not add replay_id if the session is expired\n      const isSessionActive = replay.checkAndHandleExpiredSession();\n      if (!isSessionActive) {\n        // prevent exceeding replay durations by removing the expired replayId from the DSC\n        resetReplayIdOnDynamicSamplingContext();\n        return event;\n      }\n\n      if (isFeedbackEvent(event)) {\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        replay.flush();\n        event.contexts.feedback.replay_id = replay.getSessionId();\n        // Add a replay breadcrumb for this piece of feedback\n        addFeedbackBreadcrumb(replay, event);\n        return event;\n      }\n\n      // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n      // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n      if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n        DEBUG_BUILD && logger.log('Ignoring error from rrweb internals', event);\n        return null;\n      }\n\n      // When in buffer mode, we decide to sample here.\n      // Later, in `handleAfterSendEvent`, if the replayId is set, we know that we sampled\n      // And convert the buffer session to a full session\n      const isErrorEventSampled = shouldSampleForBufferEvent(replay, event);\n\n      // Tag errors if it has been sampled in buffer mode, or if it is session mode\n      // Only tag transactions if in session mode\n      const shouldTagReplayId = isErrorEventSampled || replay.recordingMode === 'session';\n\n      if (shouldTagReplayId) {\n        event.tags = { ...event.tags, replayId: replay.getSessionId() };\n      }\n\n      return event;\n    },\n    { id: 'Replay' },\n  );\n}\n\n/**\n * Create a \"span\" for each performance entry.\n */\nfunction createPerformanceSpans(\n  replay,\n  entries,\n) {\n  return entries.map(({ type, start, end, name, data }) => {\n    const response = replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data,\n        },\n      },\n    });\n\n    // If response is a string, it means its either THROTTLED or SKIPPED\n    return typeof response === 'string' ? Promise.resolve(null) : response;\n  });\n}\n\nfunction handleHistory(handlerData) {\n  const { from, to } = handlerData;\n\n  const now = Date.now() / 1000;\n\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addHistoryInstrumentationHandler(listener)`.\n */\nfunction handleHistorySpanListener(replay) {\n  return (handlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleHistory(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nfunction shouldFilterRequest(replay, url) {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if (DEBUG_BUILD && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n\n  return isSentryRequestUrl(url, getClient());\n}\n\n/** Add a performance entry breadcrumb */\nfunction addNetworkBreadcrumb(\n  replay,\n  result,\n) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  if (result === null) {\n    return;\n  }\n\n  if (shouldFilterRequest(replay, result.name)) {\n    return;\n  }\n\n  replay.addUpdate(() => {\n    createPerformanceSpans(replay, [result]);\n    // Returning true will cause `addUpdate` to not flush\n    // We do not want network requests to cause a flush. This will prevent\n    // recurring/polling requests from keeping the replay session alive.\n    return true;\n  });\n}\n\n/** Get the size of a body. */\nfunction getBodySize(body) {\n  if (!body) {\n    return undefined;\n  }\n\n  const textEncoder = new TextEncoder();\n\n  try {\n    if (typeof body === 'string') {\n      return textEncoder.encode(body).length;\n    }\n\n    if (body instanceof URLSearchParams) {\n      return textEncoder.encode(body.toString()).length;\n    }\n\n    if (body instanceof FormData) {\n      const formDataStr = _serializeFormData(body);\n      return textEncoder.encode(formDataStr).length;\n    }\n\n    if (body instanceof Blob) {\n      return body.size;\n    }\n\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    // Currently unhandled types: ArrayBufferView, ReadableStream\n  } catch (e) {\n    // just return undefined\n  }\n\n  return undefined;\n}\n\n/** Convert a Content-Length header to number/undefined.  */\nfunction parseContentLengthHeader(header) {\n  if (!header) {\n    return undefined;\n  }\n\n  const size = parseInt(header, 10);\n  return isNaN(size) ? undefined : size;\n}\n\n/** Get the string representation of a body. */\nfunction getBodyString(body) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof URLSearchParams) {\n      return [body.toString()];\n    }\n\n    if (body instanceof FormData) {\n      return [_serializeFormData(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch (error) {\n    DEBUG_BUILD && logger.exception(error, 'Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && logger.info('Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\n/** Merge a warning into an existing network request/response. */\nfunction mergeWarning(\n  info,\n  warning,\n) {\n  if (!info) {\n    return {\n      headers: {},\n      size: undefined,\n      _meta: {\n        warnings: [warning],\n      },\n    };\n  }\n\n  const newMeta = { ...info._meta };\n  const existingWarnings = newMeta.warnings || [];\n  newMeta.warnings = [...existingWarnings, warning];\n\n  info._meta = newMeta;\n  return info;\n}\n\n/** Convert ReplayNetworkRequestData to a PerformanceEntry. */\nfunction makeNetworkReplayBreadcrumb(\n  type,\n  data,\n) {\n  if (!data) {\n    return null;\n  }\n\n  const { startTimestamp, endTimestamp, url, method, statusCode, request, response } = data;\n\n  const result = {\n    type,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: dropUndefinedKeys({\n      method,\n      statusCode,\n      request,\n      response,\n    }),\n  };\n\n  return result;\n}\n\n/** Build the request or response part of a replay network breadcrumb that was skipped. */\nfunction buildSkippedNetworkRequestOrResponse(bodySize) {\n  return {\n    headers: {},\n    size: bodySize,\n    _meta: {\n      warnings: ['URL_SKIPPED'],\n    },\n  };\n}\n\n/** Build the request or response part of a replay network breadcrumb. */\nfunction buildNetworkRequestOrResponse(\n  headers,\n  bodySize,\n  body,\n) {\n  if (!bodySize && Object.keys(headers).length === 0) {\n    return undefined;\n  }\n\n  if (!bodySize) {\n    return {\n      headers,\n    };\n  }\n\n  if (!body) {\n    return {\n      headers,\n      size: bodySize,\n    };\n  }\n\n  const info = {\n    headers,\n    size: bodySize,\n  };\n\n  const { body: normalizedBody, warnings } = normalizeNetworkBody(body);\n  info.body = normalizedBody;\n  if (warnings && warnings.length > 0) {\n    info._meta = {\n      warnings,\n    };\n  }\n\n  return info;\n}\n\n/** Filter a set of headers */\nfunction getAllowedHeaders(headers, allowedHeaders) {\n  return Object.entries(headers).reduce((filteredHeaders, [key, value]) => {\n    const normalizedKey = key.toLowerCase();\n    // Avoid putting empty strings into the headers\n    if (allowedHeaders.includes(normalizedKey) && headers[key]) {\n      filteredHeaders[normalizedKey] = value;\n    }\n    return filteredHeaders;\n  }, {});\n}\n\nfunction _serializeFormData(formData) {\n  // This is a bit simplified, but gives us a decent estimate\n  // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n  // @ts-expect-error passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\n\nfunction normalizeNetworkBody(body)\n\n {\n  if (!body || typeof body !== 'string') {\n    return {\n      body,\n    };\n  }\n\n  const exceedsSizeLimit = body.length > NETWORK_BODY_MAX_SIZE;\n  const isProbablyJson = _strIsProbablyJson(body);\n\n  if (exceedsSizeLimit) {\n    const truncatedBody = body.slice(0, NETWORK_BODY_MAX_SIZE);\n\n    if (isProbablyJson) {\n      return {\n        body: truncatedBody,\n        warnings: ['MAYBE_JSON_TRUNCATED'],\n      };\n    }\n\n    return {\n      body: `${truncatedBody}…`,\n      warnings: ['TEXT_TRUNCATED'],\n    };\n  }\n\n  if (isProbablyJson) {\n    try {\n      const jsonBody = JSON.parse(body);\n      return {\n        body: jsonBody,\n      };\n    } catch (e2) {\n      // fall back to just send the body as string\n    }\n  }\n\n  return {\n    body,\n  };\n}\n\nfunction _strIsProbablyJson(str) {\n  const first = str[0];\n  const last = str[str.length - 1];\n\n  // Simple check: If this does not start & end with {} or [], it's not JSON\n  return (first === '[' && last === ']') || (first === '{' && last === '}');\n}\n\n/** Match an URL against a list of strings/Regex. */\nfunction urlMatches(url, urls) {\n  const fullUrl = getFullUrl(url);\n\n  return stringMatchesSomePattern(fullUrl, urls);\n}\n\n/** exported for tests */\nfunction getFullUrl(url, baseURI = WINDOW.document.baseURI) {\n  // Short circuit for common cases:\n  if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith(WINDOW.location.origin)) {\n    return url;\n  }\n  const fixedUrl = new URL(url, baseURI);\n\n  // If these do not match, we are not dealing with a relative URL, so just return it\n  if (fixedUrl.origin !== new URL(baseURI).origin) {\n    return url;\n  }\n\n  const fullUrl = fixedUrl.href;\n\n  // Remove trailing slashes, if they don't match the original URL\n  if (!url.endsWith('/') && fullUrl.endsWith('/')) {\n    return fullUrl.slice(0, -1);\n  }\n\n  return fullUrl;\n}\n\n/**\n * Capture a fetch breadcrumb to a replay.\n * This adds additional data (where appropriate).\n */\nasync function captureFetchBreadcrumbToReplay(\n  breadcrumb,\n  hint,\n  options\n\n,\n) {\n  try {\n    const data = await _prepareFetchData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.fetch', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.exception(error, 'Failed to capture fetch breadcrumb');\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction enrichFetchBreadcrumb(\n  breadcrumb,\n  hint,\n) {\n  const { input, response } = hint;\n\n  const body = input ? _getFetchRequestArgBody(input) : undefined;\n  const reqSize = getBodySize(body);\n\n  const resSize = response ? parseContentLengthHeader(response.headers.get('content-length')) : undefined;\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nasync function _prepareFetchData(\n  breadcrumb,\n  hint,\n  options,\n) {\n  const now = Date.now();\n  const { startTimestamp = now, endTimestamp = now } = hint;\n\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  const captureDetails =\n    urlMatches(url, options.networkDetailAllowUrls) && !urlMatches(url, options.networkDetailDenyUrls);\n\n  const request = captureDetails\n    ? _getRequestInfo(options, hint.input, requestBodySize)\n    : buildSkippedNetworkRequestOrResponse(requestBodySize);\n  const response = await _getResponseInfo(captureDetails, options, hint.response, responseBodySize);\n\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request,\n    response,\n  };\n}\n\nfunction _getRequestInfo(\n  { networkCaptureBodies, networkRequestHeaders },\n  input,\n  requestBodySize,\n) {\n  const headers = input ? getRequestHeaders(input, networkRequestHeaders) : {};\n\n  if (!networkCaptureBodies) {\n    return buildNetworkRequestOrResponse(headers, requestBodySize, undefined);\n  }\n\n  // We only want to transmit string or string-like bodies\n  const requestBody = _getFetchRequestArgBody(input);\n  const [bodyStr, warning] = getBodyString(requestBody);\n  const data = buildNetworkRequestOrResponse(headers, requestBodySize, bodyStr);\n\n  if (warning) {\n    return mergeWarning(data, warning);\n  }\n\n  return data;\n}\n\n/** Exported only for tests. */\nasync function _getResponseInfo(\n  captureDetails,\n  {\n    networkCaptureBodies,\n    networkResponseHeaders,\n  },\n  response,\n  responseBodySize,\n) {\n  if (!captureDetails && responseBodySize !== undefined) {\n    return buildSkippedNetworkRequestOrResponse(responseBodySize);\n  }\n\n  const headers = response ? getAllHeaders(response.headers, networkResponseHeaders) : {};\n\n  if (!response || (!networkCaptureBodies && responseBodySize !== undefined)) {\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n\n  const [bodyText, warning] = await _parseFetchResponseBody(response);\n  const result = getResponseData(bodyText, {\n    networkCaptureBodies,\n\n    responseBodySize,\n    captureDetails,\n    headers,\n  });\n\n  if (warning) {\n    return mergeWarning(result, warning);\n  }\n\n  return result;\n}\n\nfunction getResponseData(\n  bodyText,\n  {\n    networkCaptureBodies,\n    responseBodySize,\n    captureDetails,\n    headers,\n  }\n\n,\n) {\n  try {\n    const size =\n      bodyText && bodyText.length && responseBodySize === undefined ? getBodySize(bodyText) : responseBodySize;\n\n    if (!captureDetails) {\n      return buildSkippedNetworkRequestOrResponse(size);\n    }\n\n    if (networkCaptureBodies) {\n      return buildNetworkRequestOrResponse(headers, size, bodyText);\n    }\n\n    return buildNetworkRequestOrResponse(headers, size, undefined);\n  } catch (error) {\n    DEBUG_BUILD && logger.exception(error, 'Failed to serialize response body');\n    // fallback\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n}\n\nasync function _parseFetchResponseBody(response) {\n  const res = _tryCloneResponse(response);\n\n  if (!res) {\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  try {\n    const text = await _tryGetResponseText(res);\n    return [text];\n  } catch (error) {\n    if (error instanceof Error && error.message.indexOf('Timeout') > -1) {\n      DEBUG_BUILD && logger.warn('Parsing text body from response timed out');\n      return [undefined, 'BODY_PARSE_TIMEOUT'];\n    }\n\n    DEBUG_BUILD && logger.exception(error, 'Failed to get text body from response');\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n}\n\nfunction _getFetchRequestArgBody(fetchArgs = []) {\n  // We only support getting the body from the fetch options\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n\n  return (fetchArgs[1] ).body;\n}\n\nfunction getAllHeaders(headers, allowedHeaders) {\n  const allHeaders = {};\n\n  allowedHeaders.forEach(header => {\n    if (headers.get(header)) {\n      allHeaders[header] = headers.get(header) ;\n    }\n  });\n\n  return allHeaders;\n}\n\nfunction getRequestHeaders(fetchArgs, allowedHeaders) {\n  if (fetchArgs.length === 1 && typeof fetchArgs[0] !== 'string') {\n    return getHeadersFromOptions(fetchArgs[0] , allowedHeaders);\n  }\n\n  if (fetchArgs.length === 2) {\n    return getHeadersFromOptions(fetchArgs[1] , allowedHeaders);\n  }\n\n  return {};\n}\n\nfunction getHeadersFromOptions(\n  input,\n  allowedHeaders,\n) {\n  if (!input) {\n    return {};\n  }\n\n  const headers = input.headers;\n\n  if (!headers) {\n    return {};\n  }\n\n  if (headers instanceof Headers) {\n    return getAllHeaders(headers, allowedHeaders);\n  }\n\n  // We do not support this, as it is not really documented (anymore?)\n  if (Array.isArray(headers)) {\n    return {};\n  }\n\n  return getAllowedHeaders(headers, allowedHeaders);\n}\n\nfunction _tryCloneResponse(response) {\n  try {\n    // We have to clone this, as the body can only be read once\n    return response.clone();\n  } catch (error) {\n    // this can throw if the response was already consumed before\n    DEBUG_BUILD && logger.exception(error, 'Failed to clone response body');\n  }\n}\n\n/**\n * Get the response body of a fetch request, or timeout after 500ms.\n * Fetch can return a streaming body, that may not resolve (or not for a long time).\n * If that happens, we rather abort after a short time than keep waiting for this.\n */\nfunction _tryGetResponseText(response) {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout$3(() => reject(new Error('Timeout while trying to read response body')), 500);\n\n    _getResponseText(response)\n      .then(\n        txt => resolve(txt),\n        reason => reject(reason),\n      )\n      .finally(() => clearTimeout(timeout));\n  });\n}\n\nasync function _getResponseText(response) {\n  // Force this to be a promise, just to be safe\n  // eslint-disable-next-line no-return-await\n  return await response.text();\n}\n\n/**\n * Capture an XHR breadcrumb to a replay.\n * This adds additional data (where appropriate).\n */\nasync function captureXhrBreadcrumbToReplay(\n  breadcrumb,\n  hint,\n  options,\n) {\n  try {\n    const data = _prepareXhrData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.xhr', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.exception(error, 'Failed to capture xhr breadcrumb');\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction enrichXhrBreadcrumb(\n  breadcrumb,\n  hint,\n) {\n  const { xhr, input } = hint;\n\n  if (!xhr) {\n    return;\n  }\n\n  const reqSize = getBodySize(input);\n  const resSize = xhr.getResponseHeader('content-length')\n    ? parseContentLengthHeader(xhr.getResponseHeader('content-length'))\n    : _getBodySize(xhr.response, xhr.responseType);\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nfunction _prepareXhrData(\n  breadcrumb,\n  hint,\n  options,\n) {\n  const now = Date.now();\n  const { startTimestamp = now, endTimestamp = now, input, xhr } = hint;\n\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  if (!url) {\n    return null;\n  }\n\n  if (!xhr || !urlMatches(url, options.networkDetailAllowUrls) || urlMatches(url, options.networkDetailDenyUrls)) {\n    const request = buildSkippedNetworkRequestOrResponse(requestBodySize);\n    const response = buildSkippedNetworkRequestOrResponse(responseBodySize);\n    return {\n      startTimestamp,\n      endTimestamp,\n      url,\n      method,\n      statusCode,\n      request,\n      response,\n    };\n  }\n\n  const xhrInfo = xhr[SENTRY_XHR_DATA_KEY];\n  const networkRequestHeaders = xhrInfo\n    ? getAllowedHeaders(xhrInfo.request_headers, options.networkRequestHeaders)\n    : {};\n  const networkResponseHeaders = getAllowedHeaders(getResponseHeaders(xhr), options.networkResponseHeaders);\n\n  const [requestBody, requestWarning] = options.networkCaptureBodies ? getBodyString(input) : [undefined];\n  const [responseBody, responseWarning] = options.networkCaptureBodies ? _getXhrResponseBody(xhr) : [undefined];\n\n  const request = buildNetworkRequestOrResponse(networkRequestHeaders, requestBodySize, requestBody);\n  const response = buildNetworkRequestOrResponse(networkResponseHeaders, responseBodySize, responseBody);\n\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request: requestWarning ? mergeWarning(request, requestWarning) : request,\n    response: responseWarning ? mergeWarning(response, responseWarning) : response,\n  };\n}\n\nfunction getResponseHeaders(xhr) {\n  const headers = xhr.getAllResponseHeaders();\n\n  if (!headers) {\n    return {};\n  }\n\n  return headers.split('\\r\\n').reduce((acc, line) => {\n    const [key, value] = line.split(': ') ;\n    if (value) {\n      acc[key.toLowerCase()] = value;\n    }\n    return acc;\n  }, {});\n}\n\nfunction _getXhrResponseBody(xhr) {\n  // We collect errors that happen, but only log them if we can't get any response body\n  const errors = [];\n\n  try {\n    return [xhr.responseText];\n  } catch (e) {\n    errors.push(e);\n  }\n\n  // Try to manually parse the response body, if responseText fails\n  try {\n    return _parseXhrResponse(xhr.response, xhr.responseType);\n  } catch (e) {\n    errors.push(e);\n  }\n\n  DEBUG_BUILD && logger.warn('Failed to get xhr response body', ...errors);\n\n  return [undefined];\n}\n\n/**\n * Get the string representation of the XHR response.\n * Based on MDN, these are the possible types of the response:\n * string\n * ArrayBuffer\n * Blob\n * Document\n * POJO\n *\n * Exported only for tests.\n */\nfunction _parseXhrResponse(\n  body,\n  responseType,\n) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof Document) {\n      return [body.body.outerHTML];\n    }\n\n    if (responseType === 'json' && body && typeof body === 'object') {\n      return [JSON.stringify(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch (error) {\n    DEBUG_BUILD && logger.exception(error, 'Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && logger.info('Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\nfunction _getBodySize(\n  body,\n  responseType,\n) {\n  try {\n    const bodyStr = responseType === 'json' && body && typeof body === 'object' ? JSON.stringify(body) : body;\n    return getBodySize(bodyStr);\n  } catch (e2) {\n    return undefined;\n  }\n}\n\n/**\n * This method does two things:\n * - It enriches the regular XHR/fetch breadcrumbs with request/response size data\n * - It captures the XHR/fetch breadcrumbs to the replay\n *   (enriching it with further data that is _not_ added to the regular breadcrumbs)\n */\nfunction handleNetworkBreadcrumbs(replay) {\n  const client = getClient();\n\n  try {\n    const {\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders,\n    } = replay.getOptions();\n\n    const options = {\n      replay,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders,\n    };\n\n    if (client) {\n      client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));\n    }\n  } catch (e2) {\n    // Do nothing\n  }\n}\n\n/** just exported for tests */\nfunction beforeAddNetworkBreadcrumb(\n  options,\n  breadcrumb,\n  hint,\n) {\n  if (!breadcrumb.data) {\n    return;\n  }\n\n  try {\n    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichXhrBreadcrumb(breadcrumb, hint);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureXhrBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n\n    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichFetchBreadcrumb(breadcrumb, hint);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureFetchBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n  } catch (e) {\n    DEBUG_BUILD && logger.exception(e, 'Error when enriching network breadcrumb');\n  }\n}\n\nfunction _isXhrBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'xhr';\n}\n\nfunction _isFetchBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'fetch';\n}\n\nfunction _isXhrHint(hint) {\n  return hint && hint.xhr;\n}\n\nfunction _isFetchHint(hint) {\n  return hint && hint.response;\n}\n\n/**\n * Add global listeners that cannot be removed.\n */\nfunction addGlobalListeners(replay) {\n  // Listeners from core SDK //\n  const client = getClient();\n\n  addClickKeypressInstrumentationHandler(handleDomListener(replay));\n  addHistoryInstrumentationHandler(handleHistorySpanListener(replay));\n  handleBreadcrumbs(replay);\n  handleNetworkBreadcrumbs(replay);\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  const eventProcessor = handleGlobalEventListener(replay);\n  addEventProcessor(eventProcessor);\n\n  // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n  if (client) {\n    client.on('beforeSendEvent', handleBeforeSendEvent(replay));\n    client.on('afterSendEvent', handleAfterSendEvent(replay));\n    client.on('createDsc', (dsc) => {\n      const replayId = replay.getSessionId();\n      // We do not want to set the DSC when in buffer mode, as that means the replay has not been sent (yet)\n      if (replayId && replay.isEnabled() && replay.recordingMode === 'session') {\n        // Ensure to check that the session is still active - it could have expired in the meanwhile\n        const isSessionActive = replay.checkAndHandleExpiredSession();\n        if (isSessionActive) {\n          dsc.replay_id = replayId;\n        }\n      }\n    });\n\n    client.on('spanStart', span => {\n      replay.lastActiveSpan = span;\n    });\n\n    // We may be missing the initial spanStart due to timing issues,\n    // so we capture it on finish again.\n    client.on('spanEnd', span => {\n      replay.lastActiveSpan = span;\n    });\n\n    // We want to flush replay\n    client.on('beforeSendFeedback', (feedbackEvent, options) => {\n      const replayId = replay.getSessionId();\n      if (options && options.includeReplay && replay.isEnabled() && replayId) {\n        // This should never reject\n        if (feedbackEvent.contexts && feedbackEvent.contexts.feedback) {\n          feedbackEvent.contexts.feedback.replay_id = replayId;\n        }\n      }\n    });\n  }\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nasync function addMemoryEntry(replay) {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    return Promise.all(\n      createPerformanceSpans(replay, [\n        // @ts-expect-error memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n        createMemoryEntry(WINDOW.performance.memory),\n      ]),\n    );\n  } catch (error) {\n    // Do nothing\n    return [];\n  }\n}\n\nfunction createMemoryEntry(memoryEntry) {\n  const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = Date.now() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize,\n      },\n    },\n  };\n}\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nfunction debounce(func, wait, options) {\n  let callbackReturnValue;\n\n  let timerId;\n  let maxTimerId;\n\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n\n  function invokeFunc() {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers() {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush() {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced() {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout$3(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout$3(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n\nconst NAVIGATOR = GLOBAL_OBJ.navigator;\n\n/**\n *  Disable sampling mousemove events on iOS browsers as this can cause blocking the main thread\n *  https://github.com/getsentry/sentry-javascript/issues/14534\n */\nfunction getRecordingSamplingOptions() {\n  if (\n    /iPhone|iPad|iPod/i.test((NAVIGATOR && NAVIGATOR.userAgent) || '') ||\n    (/Macintosh/i.test((NAVIGATOR && NAVIGATOR.userAgent) || '') &&\n      NAVIGATOR &&\n      NAVIGATOR.maxTouchPoints &&\n      NAVIGATOR.maxTouchPoints > 1)\n  ) {\n    return {\n      sampling: {\n        mousemove: false,\n      },\n    };\n  }\n\n  return {};\n}\n\n/**\n * Handler for recording events.\n *\n * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n */\nfunction getHandleRecordingEmit(replay) {\n  let hadFirstEvent = false;\n\n  return (event, _isCheckout) => {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!replay.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.warn('Received replay event after session expired.');\n\n      return;\n    }\n\n    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n    // We also want to treat the first event as a checkout, so we handle this specifically here\n    const isCheckout = _isCheckout || !hadFirstEvent;\n    hadFirstEvent = true;\n\n    if (replay.clickDetector) {\n      updateClickDetectorForRecordingEvent(replay.clickDetector, event);\n    }\n\n    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n    replay.addUpdate(() => {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (replay.recordingMode === 'buffer' && isCheckout) {\n        replay.setInitialState();\n      }\n\n      // If the event is not added (e.g. due to being paused, disabled, or out of the max replay duration),\n      // Skip all further steps\n      if (!addEventSync(replay, event, isCheckout)) {\n        // Return true to skip scheduling a debounced flush\n        return true;\n      }\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (!isCheckout) {\n        return false;\n      }\n\n      const session = replay.session;\n\n      // Additionally, create a meta event that will capture certain SDK settings.\n      // In order to handle buffer mode, this needs to either be done when we\n      // receive checkout events or at flush time. We have an experimental mode\n      // to perform multiple checkouts a session (the idea is to improve\n      // seeking during playback), so also only include if segmentId is 0\n      // (handled in `addSettingsEvent`).\n      //\n      // `isCheckout` is always true, but want to be explicit that it should\n      // only be added for checkouts\n      addSettingsEvent(replay, isCheckout);\n\n      // When in buffer mode, make sure we adjust the session started date to the current earliest event of the buffer\n      // this should usually be the timestamp of the checkout event, but to be safe...\n      if (replay.recordingMode === 'buffer' && session && replay.eventBuffer) {\n        const earliestEvent = replay.eventBuffer.getEarliestTimestamp();\n        if (earliestEvent) {\n          DEBUG_BUILD &&\n            logger.info(`Updating session start time to earliest event in buffer to ${new Date(earliestEvent)}`);\n\n          session.started = earliestEvent;\n\n          if (replay.getOptions().stickySession) {\n            saveSession(session);\n          }\n        }\n      }\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (session && session.previousSessionId) {\n        return true;\n      }\n\n      if (replay.recordingMode === 'session') {\n        // If the full snapshot is due to an initial load, we will not have\n        // a previous session ID. In this case, we want to buffer events\n        // for a set amount of time before flushing. This can help avoid\n        // capturing replays of users that immediately close the window.\n\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        void replay.flush();\n      }\n\n      return true;\n    });\n  };\n}\n\n/**\n * Exported for tests\n */\nfunction createOptionsEvent(replay) {\n  const options = replay.getOptions();\n  return {\n    type: EventType.Custom,\n    timestamp: Date.now(),\n    data: {\n      tag: 'options',\n      payload: {\n        shouldRecordCanvas: replay.isRecordingCanvas(),\n        sessionSampleRate: options.sessionSampleRate,\n        errorSampleRate: options.errorSampleRate,\n        useCompressionOption: options.useCompression,\n        blockAllMedia: options.blockAllMedia,\n        maskAllText: options.maskAllText,\n        maskAllInputs: options.maskAllInputs,\n        useCompression: replay.eventBuffer ? replay.eventBuffer.type === 'worker' : false,\n        networkDetailHasUrls: options.networkDetailAllowUrls.length > 0,\n        networkCaptureBodies: options.networkCaptureBodies,\n        networkRequestHasHeaders: options.networkRequestHeaders.length > 0,\n        networkResponseHasHeaders: options.networkResponseHeaders.length > 0,\n      },\n    },\n  };\n}\n\n/**\n * Add a \"meta\" event that contains a simplified view on current configuration\n * options. This should only be included on the first segment of a recording.\n */\nfunction addSettingsEvent(replay, isCheckout) {\n  // Only need to add this event when sending the first segment\n  if (!isCheckout || !replay.session || replay.session.segmentId !== 0) {\n    return;\n  }\n\n  addEventSync(replay, createOptionsEvent(replay), false);\n}\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nfunction createReplayEnvelope(\n  replayEvent,\n  recordingData,\n  dsn,\n  tunnel,\n) {\n  return createEnvelope(\n    createEventEnvelopeHeaders(replayEvent, getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn),\n    [\n      [{ type: 'replay_event' }, replayEvent],\n      [\n        {\n          type: 'replay_recording',\n          // If string then we need to encode to UTF8, otherwise will have\n          // wrong size. TextEncoder has similar browser support to\n          // MutationObserver, although it does not accept IE11.\n          length:\n            typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length,\n        },\n        recordingData,\n      ],\n    ],\n  );\n}\n\n/**\n * Prepare the recording data ready to be sent.\n */\nfunction prepareRecordingData({\n  recordingData,\n  headers,\n}\n\n) {\n  let payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  const replayHeaders = `${JSON.stringify(headers)}\n`;\n\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = `${replayHeaders}${recordingData}`;\n  } else {\n    const enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    const sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n\n  return payloadWithSequence;\n}\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nasync function prepareReplayEvent({\n  client,\n  scope,\n  replayId: event_id,\n  event,\n}\n\n) {\n  const integrations =\n    typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations)\n      ? Object.keys(client._integrations)\n      : undefined;\n\n  const eventHint = { event_id, integrations };\n\n  client.emit('preprocessEvent', event, eventHint);\n\n  const preparedEvent = (await prepareEvent(\n    client.getOptions(),\n    event,\n    eventHint,\n    scope,\n    client,\n    getIsolationScope(),\n  )) ;\n\n  // If e.g. a global event processor returned null\n  if (!preparedEvent) {\n    return null;\n  }\n\n  // This normally happens in browser client \"_prepareEvent\"\n  // but since we do not use this private method from the client, but rather the plain import\n  // we need to do this manually.\n  preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n  // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n  const metadata = client.getSdkMetadata();\n  const { name, version } = (metadata && metadata.sdk) || {};\n\n  preparedEvent.sdk = {\n    ...preparedEvent.sdk,\n    name: name || 'sentry.javascript.unknown',\n    version: version || '0.0.0',\n  };\n\n  return preparedEvent;\n}\n\n/**\n * Send replay attachment using `fetch()`\n */\nasync function sendReplayRequest({\n  recordingData,\n  replayId,\n  segmentId: segment_id,\n  eventContext,\n  timestamp,\n  session,\n}) {\n  const preparedRecordingData = prepareRecordingData({\n    recordingData,\n    headers: {\n      segment_id,\n    },\n  });\n\n  const { urls, errorIds, traceIds, initialTimestamp } = eventContext;\n\n  const client = getClient();\n  const scope = getCurrentScope();\n  const transport = client && client.getTransport();\n  const dsn = client && client.getDsn();\n\n  if (!client || !transport || !dsn || !session.sampled) {\n    return resolvedSyncPromise({});\n  }\n\n  const baseEvent = {\n    type: REPLAY_EVENT_NAME,\n    replay_start_timestamp: initialTimestamp / 1000,\n    timestamp: timestamp / 1000,\n    error_ids: errorIds,\n    trace_ids: traceIds,\n    urls,\n    replay_id: replayId,\n    segment_id,\n    replay_type: session.sampled,\n  };\n\n  const replayEvent = await prepareReplayEvent({ scope, client, replayId, event: baseEvent });\n\n  if (!replayEvent) {\n    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n    client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n    DEBUG_BUILD && logger.info('An event processor returned `null`, will not send event.');\n    return resolvedSyncPromise({});\n  }\n\n  /*\n  For reference, the fully built event looks something like this:\n  {\n      \"type\": \"replay_event\",\n      \"timestamp\": 1670837008.634,\n      \"error_ids\": [\n          \"errorId\"\n      ],\n      \"trace_ids\": [\n          \"traceId\"\n      ],\n      \"urls\": [\n          \"https://example.com\"\n      ],\n      \"replay_id\": \"eventId\",\n      \"segment_id\": 3,\n      \"replay_type\": \"error\",\n      \"platform\": \"javascript\",\n      \"event_id\": \"eventId\",\n      \"environment\": \"production\",\n      \"sdk\": {\n          \"integrations\": [\n              \"BrowserTracing\",\n              \"Replay\"\n          ],\n          \"name\": \"sentry.javascript.browser\",\n          \"version\": \"7.25.0\"\n      },\n      \"sdkProcessingMetadata\": {},\n      \"contexts\": {\n      },\n  }\n  */\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete replayEvent.sdkProcessingMetadata;\n\n  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n\n  let response;\n\n  try {\n    response = await transport.send(envelope);\n  } catch (err) {\n    const error = new Error(UNABLE_TO_SEND_REPLAY);\n\n    try {\n      // In case browsers don't allow this property to be writable\n      // @ts-expect-error This needs lib es2022 and newer\n      error.cause = err;\n    } catch (e) {\n      // nothing to do\n    }\n    throw error;\n  }\n\n  // If the status code is invalid, we want to immediately stop & not retry\n  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n    throw new TransportStatusCodeError(response.statusCode);\n  }\n\n  const rateLimits = updateRateLimits({}, response);\n  if (isRateLimited(rateLimits, 'replay')) {\n    throw new RateLimitError(rateLimits);\n  }\n\n  return response;\n}\n\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nclass TransportStatusCodeError extends Error {\n   constructor(statusCode) {\n    super(`Transport returned status code ${statusCode}`);\n  }\n}\n\n/**\n * This error indicates that we hit a rate limit API error.\n */\nclass RateLimitError extends Error {\n\n   constructor(rateLimits) {\n    super('Rate limit hit');\n    this.rateLimits = rateLimits;\n  }\n}\n\n/**\n * Finalize and send the current replay event to Sentry\n */\nasync function sendReplay(\n  replayData,\n  retryConfig = {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL,\n  },\n) {\n  const { recordingData, onError } = replayData;\n\n  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n  if (!recordingData.length) {\n    return;\n  }\n\n  try {\n    await sendReplayRequest(replayData);\n    return true;\n  } catch (err) {\n    if (err instanceof TransportStatusCodeError || err instanceof RateLimitError) {\n      throw err;\n    }\n\n    // Capture error for every failed replay\n    setContext('Replays', {\n      _retryCount: retryConfig.count,\n    });\n\n    if (onError) {\n      onError(err);\n    }\n\n    // If an error happened here, it's likely that uploading the attachment\n    // failed, we'll can retry with the same events payload\n    if (retryConfig.count >= RETRY_MAX_COUNT) {\n      const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n\n      try {\n        // In case browsers don't allow this property to be writable\n        // @ts-expect-error This needs lib es2022 and newer\n        error.cause = err;\n      } catch (e) {\n        // nothing to do\n      }\n\n      throw error;\n    }\n\n    // will retry in intervals of 5, 10, 30\n    retryConfig.interval *= ++retryConfig.count;\n\n    return new Promise((resolve, reject) => {\n      setTimeout$3(async () => {\n        try {\n          await sendReplay(replayData, retryConfig);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }, retryConfig.interval);\n    });\n  }\n}\n\nconst THROTTLED = '__THROTTLED';\nconst SKIPPED = '__SKIPPED';\n\n/**\n * Create a throttled function off a given function.\n * When calling the throttled function, it will call the original function only\n * if it hasn't been called more than `maxCount` times in the last `durationSeconds`.\n *\n * Returns `THROTTLED` if throttled for the first time, after that `SKIPPED`,\n * or else the return value of the original function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction throttle(\n  fn,\n  maxCount,\n  durationSeconds,\n) {\n  const counter = new Map();\n\n  const _cleanup = (now) => {\n    const threshold = now - durationSeconds;\n    counter.forEach((_value, key) => {\n      if (key < threshold) {\n        counter.delete(key);\n      }\n    });\n  };\n\n  const _getTotalCount = () => {\n    return [...counter.values()].reduce((a, b) => a + b, 0);\n  };\n\n  let isThrottled = false;\n\n  return (...rest) => {\n    // Date in second-precision, which we use as basis for the throttling\n    const now = Math.floor(Date.now() / 1000);\n\n    // First, make sure to delete any old entries\n    _cleanup(now);\n\n    // If already over limit, do nothing\n    if (_getTotalCount() >= maxCount) {\n      const wasThrottled = isThrottled;\n      isThrottled = true;\n      return wasThrottled ? SKIPPED : THROTTLED;\n    }\n\n    isThrottled = false;\n    const count = counter.get(now) || 0;\n    counter.set(now, count + 1);\n\n    return fn(...rest);\n  };\n}\n\n/* eslint-disable max-lines */ // TODO: We might want to split this file up\n\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nclass ReplayContainer  {\n\n  /**\n   * Recording can happen in one of two modes:\n   *   - session: Record the whole session, sending it continuously\n   *   - buffer: Always keep the last 60s of recording, requires:\n   *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n   *     - or calling `flush()` to send the replay\n   */\n\n  /**\n   * The current or last active span.\n   * This is only available when performance is enabled.\n   */\n\n  /**\n   * These are here so we can overwrite them in tests etc.\n   * @hidden\n   */\n\n  /** The replay has to be manually started, because no sample rate (neither session or error) was provided. */\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Timestamp of the last user activity. This lives across sessions.\n   */\n\n  /**\n   * Is the integration currently active?\n   */\n\n  /**\n   * Paused is a state where:\n   * - DOM Recording is not listening at all\n   * - Nothing will be added to event buffer (e.g. core SDK events)\n   */\n\n  /**\n   * Have we attached listeners to the core SDK?\n   * Note we have to track this as there is no way to remove instrumentation handlers.\n   */\n\n  /**\n   * Function to stop recording\n   */\n\n  /**\n   * Internal use for canvas recording options\n   */\n\n   constructor({\n    options,\n    recordingOptions,\n  }\n\n) {ReplayContainer.prototype.__init.call(this);ReplayContainer.prototype.__init2.call(this);ReplayContainer.prototype.__init3.call(this);ReplayContainer.prototype.__init4.call(this);ReplayContainer.prototype.__init5.call(this);ReplayContainer.prototype.__init6.call(this);\n    this.eventBuffer = null;\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n    this.recordingMode = 'session';\n    this.timeouts = {\n      sessionIdlePause: SESSION_IDLE_PAUSE_DURATION,\n      sessionIdleExpire: SESSION_IDLE_EXPIRE_DURATION,\n    } ;\n    this._lastActivity = Date.now();\n    this._isEnabled = false;\n    this._isPaused = false;\n    this._requiresManualStart = false;\n    this._hasInitializedCoreListeners = false;\n    this._context = {\n      errorIds: new Set(),\n      traceIds: new Set(),\n      urls: [],\n      initialTimestamp: Date.now(),\n      initialUrl: '',\n    };\n\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n\n    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay,\n    });\n\n    this._throttledAddEvent = throttle(\n      (event, isCheckout) => addEvent(this, event, isCheckout),\n      // Max 300 events...\n      300,\n      // ... per 5s\n      5,\n    );\n\n    const { slowClickTimeout, slowClickIgnoreSelectors } = this.getOptions();\n\n    const slowClickConfig = slowClickTimeout\n      ? {\n          threshold: Math.min(SLOW_CLICK_THRESHOLD, slowClickTimeout),\n          timeout: slowClickTimeout,\n          scrollTimeout: SLOW_CLICK_SCROLL_TIMEOUT,\n          ignoreSelector: slowClickIgnoreSelectors ? slowClickIgnoreSelectors.join(',') : '',\n        }\n      : undefined;\n\n    if (slowClickConfig) {\n      this.clickDetector = new ClickDetector(this, slowClickConfig);\n    }\n\n    // Configure replay logger w/ experimental options\n    if (DEBUG_BUILD) {\n      const experiments = options._experiments;\n      logger.setConfig({\n        captureExceptions: !!experiments.captureExceptions,\n        traceInternals: !!experiments.traceInternals,\n      });\n    }\n  }\n\n  /** Get the event context. */\n   getContext() {\n    return this._context;\n  }\n\n  /** If recording is currently enabled. */\n   isEnabled() {\n    return this._isEnabled;\n  }\n\n  /** If recording is currently paused. */\n   isPaused() {\n    return this._isPaused;\n  }\n\n  /**\n   * Determine if canvas recording is enabled\n   */\n   isRecordingCanvas() {\n    return Boolean(this._canvas);\n  }\n\n  /** Get the replay integration options. */\n   getOptions() {\n    return this._options;\n  }\n\n  /** A wrapper to conditionally capture exceptions. */\n   handleException(error) {\n    DEBUG_BUILD && logger.exception(error);\n    if (this._options.onError) {\n      this._options.onError(error);\n    }\n  }\n\n  /**\n   * Initializes the plugin based on sampling configuration. Should not be\n   * called outside of constructor.\n   */\n   initializeSampling(previousSessionId) {\n    const { errorSampleRate, sessionSampleRate } = this._options;\n\n    // If neither sample rate is > 0, then do nothing - user will need to call one of\n    // `start()` or `startBuffering` themselves.\n    const requiresManualStart = errorSampleRate <= 0 && sessionSampleRate <= 0;\n\n    this._requiresManualStart = requiresManualStart;\n\n    if (requiresManualStart) {\n      return;\n    }\n\n    // Otherwise if there is _any_ sample rate set, try to load an existing\n    // session, or create a new one.\n    this._initializeSessionForSampling(previousSessionId);\n\n    if (!this.session) {\n      // This should not happen, something wrong has occurred\n      DEBUG_BUILD && logger.exception(new Error('Unable to initialize and create session'));\n      return;\n    }\n\n    if (this.session.sampled === false) {\n      // This should only occur if `errorSampleRate` is 0 and was unsampled for\n      // session-based replay. In this case there is nothing to do.\n      return;\n    }\n\n    // If segmentId > 0, it means we've previously already captured this session\n    // In this case, we still want to continue in `session` recording mode\n    this.recordingMode = this.session.sampled === 'buffer' && this.session.segmentId === 0 ? 'buffer' : 'session';\n\n    DEBUG_BUILD && logger.infoTick(`Starting replay in ${this.recordingMode} mode`);\n\n    this._initializeRecording();\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will log a message if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * _performanceObserver, Recording, Sentry SDK, etc)\n   */\n   start() {\n    if (this._isEnabled && this.recordingMode === 'session') {\n      DEBUG_BUILD && logger.info('Recording is already in progress');\n      return;\n    }\n\n    if (this._isEnabled && this.recordingMode === 'buffer') {\n      DEBUG_BUILD && logger.info('Buffering is in progress, call `flush()` to save the replay');\n      return;\n    }\n\n    DEBUG_BUILD && logger.infoTick('Starting replay in session mode');\n\n    // Required as user activity is initially set in\n    // constructor, so if `start()` is called after\n    // session idle expiration, a replay will not be\n    // created due to an idle timeout.\n    this._updateUserActivity();\n\n    const session = loadOrCreateSession(\n      {\n        maxReplayDuration: this._options.maxReplayDuration,\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n      },\n      {\n        stickySession: this._options.stickySession,\n        // This is intentional: create a new session-based replay when calling `start()`\n        sessionSampleRate: 1,\n        allowBuffering: false,\n      },\n    );\n\n    this.session = session;\n\n    this._initializeRecording();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, an error occurs.\n   */\n   startBuffering() {\n    if (this._isEnabled) {\n      DEBUG_BUILD && logger.info('Buffering is in progress, call `flush()` to save the replay');\n      return;\n    }\n\n    DEBUG_BUILD && logger.infoTick('Starting replay in buffer mode');\n\n    const session = loadOrCreateSession(\n      {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n      },\n      {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: 0,\n        allowBuffering: true,\n      },\n    );\n\n    this.session = session;\n\n    this.recordingMode = 'buffer';\n    this._initializeRecording();\n  }\n\n  /**\n   * Start recording.\n   *\n   * Note that this will cause a new DOM checkout\n   */\n   startRecording() {\n    try {\n      const canvasOptions = this._canvas;\n\n      this._stopRecording = record({\n        ...this._recordingOptions,\n        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n        // Without this, it would record forever, until an error happens, which we don't want\n        // instead, we'll always keep the last 60 seconds of replay before an error happened\n        ...(this.recordingMode === 'buffer'\n          ? { checkoutEveryNms: BUFFER_CHECKOUT_TIME }\n          : // Otherwise, use experimental option w/ min checkout time of 6 minutes\n            // This is to improve playback seeking as there could potentially be\n            // less mutations to process in the worse cases.\n            //\n            // checkout by \"N\" events is probably ideal, but means we have less\n            // control about the number of checkouts we make (which generally\n            // increases replay size)\n            this._options._experiments.continuousCheckout && {\n              // Minimum checkout time is 6 minutes\n              checkoutEveryNms: Math.max(360000, this._options._experiments.continuousCheckout),\n            }),\n        emit: getHandleRecordingEmit(this),\n        ...getRecordingSamplingOptions(),\n        onMutation: this._onMutationHandler,\n        ...(canvasOptions\n          ? {\n              recordCanvas: canvasOptions.recordCanvas,\n              getCanvasManager: canvasOptions.getCanvasManager,\n              sampling: canvasOptions.sampling,\n              dataURLOptions: canvasOptions.dataURLOptions,\n            }\n          : {}),\n      });\n    } catch (err) {\n      this.handleException(err);\n    }\n  }\n\n  /**\n   * Stops the recording, if it was running.\n   *\n   * Returns true if it was previously stopped, or is now stopped,\n   * otherwise false.\n   */\n   stopRecording() {\n    try {\n      if (this._stopRecording) {\n        this._stopRecording();\n        this._stopRecording = undefined;\n      }\n\n      return true;\n    } catch (err) {\n      this.handleException(err);\n      return false;\n    }\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n   async stop({ forceFlush = false, reason } = {}) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    // We can't move `_isEnabled` after awaiting a flush, otherwise we can\n    // enter into an infinite loop when `stop()` is called while flushing.\n    this._isEnabled = false;\n\n    try {\n      DEBUG_BUILD && logger.info(`Stopping Replay${reason ? ` triggered by ${reason}` : ''}`);\n\n      resetReplayIdOnDynamicSamplingContext();\n\n      this._removeListeners();\n      this.stopRecording();\n\n      this._debouncedFlush.cancel();\n      // See comment above re: `_isEnabled`, we \"force\" a flush, ignoring the\n      // `_isEnabled` state of the plugin since it was disabled above.\n      if (forceFlush) {\n        await this._flush({ force: true });\n      }\n\n      // After flush, destroy event buffer\n      this.eventBuffer && this.eventBuffer.destroy();\n      this.eventBuffer = null;\n\n      // Clear session from session storage, note this means if a new session\n      // is started after, it will not have `previousSessionId`\n      clearSession(this);\n    } catch (err) {\n      this.handleException(err);\n    }\n  }\n\n  /**\n   * Pause some replay functionality. See comments for `_isPaused`.\n   * This differs from stop as this only stops DOM recording, it is\n   * not as thorough of a shutdown as `stop()`.\n   */\n   pause() {\n    if (this._isPaused) {\n      return;\n    }\n\n    this._isPaused = true;\n    this.stopRecording();\n\n    DEBUG_BUILD && logger.info('Pausing replay');\n  }\n\n  /**\n   * Resumes recording, see notes for `pause().\n   *\n   * Note that calling `startRecording()` here will cause a\n   * new DOM checkout.`\n   */\n   resume() {\n    if (!this._isPaused || !this._checkSession()) {\n      return;\n    }\n\n    this._isPaused = false;\n    this.startRecording();\n\n    DEBUG_BUILD && logger.info('Resuming replay');\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n   async sendBufferedReplayOrFlush({ continueRecording = true } = {}) {\n    if (this.recordingMode === 'session') {\n      return this.flushImmediate();\n    }\n\n    const activityTime = Date.now();\n\n    DEBUG_BUILD && logger.info('Converting buffer to session');\n\n    // Allow flush to complete before resuming as a session recording, otherwise\n    // the checkout from `startRecording` may be included in the payload.\n    // Prefer to keep the error replay as a separate (and smaller) segment\n    // than the session replay.\n    await this.flushImmediate();\n\n    const hasStoppedRecording = this.stopRecording();\n\n    if (!continueRecording || !hasStoppedRecording) {\n      return;\n    }\n\n    // To avoid race conditions where this is called multiple times, we check here again that we are still buffering\n    if ((this.recordingMode ) === 'session') {\n      return;\n    }\n\n    // Re-start recording in session-mode\n    this.recordingMode = 'session';\n\n    // Once this session ends, we do not want to refresh it\n    if (this.session) {\n      this._updateUserActivity(activityTime);\n      this._updateSessionActivity(activityTime);\n      this._maybeSaveSession();\n    }\n\n    this.startRecording();\n  }\n\n  /**\n   * We want to batch uploads of replay events. Save events only if\n   * `<flushMinDelay>` milliseconds have elapsed since the last event\n   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n   *\n   * Accepts a callback to perform side-effects and returns true to stop batch\n   * processing and hand back control to caller.\n   */\n   addUpdate(cb) {\n    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)\n    const cbResult = cb();\n\n    // If this option is turned on then we will only want to call `flush`\n    // explicitly\n    if (this.recordingMode === 'buffer') {\n      return;\n    }\n\n    // If callback is true, we do not want to continue with flushing -- the\n    // caller will need to handle it.\n    if (cbResult === true) {\n      return;\n    }\n\n    // addUpdate is called quite frequently - use _debouncedFlush so that it\n    // respects the flush delays and does not flush immediately\n    this._debouncedFlush();\n  }\n\n  /**\n   * Updates the user activity timestamp and resumes recording. This should be\n   * called in an event handler for a user action that we consider as the user\n   * being \"active\" (e.g. a mouse click).\n   */\n   triggerUserActivity() {\n    this._updateUserActivity();\n\n    // This case means that recording was once stopped due to inactivity.\n    // Ensure that recording is resumed.\n    if (!this._stopRecording) {\n      // Create a new session, otherwise when the user action is flushed, it\n      // will get rejected due to an expired session.\n      if (!this._checkSession()) {\n        return;\n      }\n\n      // Note: This will cause a new DOM checkout\n      this.resume();\n      return;\n    }\n\n    // Otherwise... recording was never suspended, continue as normalish\n    this.checkAndHandleExpiredSession();\n\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Updates the user activity timestamp *without* resuming\n   * recording. Some user events (e.g. keydown) can be create\n   * low-value replays that only contain the keypress as a\n   * breadcrumb. Instead this would require other events to\n   * create a new replay after a session has expired.\n   */\n   updateUserActivity() {\n    this._updateUserActivity();\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Only flush if `this.recordingMode === 'session'`\n   */\n   conditionalFlush() {\n    if (this.recordingMode === 'buffer') {\n      return Promise.resolve();\n    }\n\n    return this.flushImmediate();\n  }\n\n  /**\n   * Flush using debounce flush\n   */\n   flush() {\n    return this._debouncedFlush() ;\n  }\n\n  /**\n   * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n   * cases of multiple flushes happening closely together.\n   */\n   flushImmediate() {\n    this._debouncedFlush();\n    // `.flush` is provided by the debounced function, analogously to lodash.debounce\n    return this._debouncedFlush.flush() ;\n  }\n\n  /**\n   * Cancels queued up flushes.\n   */\n   cancelFlush() {\n    this._debouncedFlush.cancel();\n  }\n\n  /** Get the current session (=replay) ID */\n   getSessionId() {\n    return this.session && this.session.id;\n  }\n\n  /**\n   * Checks if recording should be stopped due to user inactivity. Otherwise\n   * check if session is expired and create a new session if so. Triggers a new\n   * full snapshot on new session.\n   *\n   * Returns true if session is not expired, false otherwise.\n   * @hidden\n   */\n   checkAndHandleExpiredSession() {\n    // Prevent starting a new session if the last user activity is older than\n    // SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new\n    // session+recording. This creates noisy replays that do not have much\n    // content in them.\n    if (\n      this._lastActivity &&\n      isExpired(this._lastActivity, this.timeouts.sessionIdlePause) &&\n      this.session &&\n      this.session.sampled === 'session'\n    ) {\n      // Pause recording only for session-based replays. Otherwise, resuming\n      // will create a new replay and will conflict with users who only choose\n      // to record error-based replays only. (e.g. the resumed replay will not\n      // contain a reference to an error)\n      this.pause();\n      return;\n    }\n\n    // --- There is recent user activity --- //\n    // This will create a new session if expired, based on expiry length\n    if (!this._checkSession()) {\n      // Check session handles the refreshing itself\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Capture some initial state that can change throughout the lifespan of the\n   * replay. This is required because otherwise they would be captured at the\n   * first flush.\n   */\n   setInitialState() {\n    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n    const url = `${WINDOW.location.origin}${urlPath}`;\n\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    // Reset _context as well\n    this._clearContext();\n\n    this._context.initialUrl = url;\n    this._context.initialTimestamp = Date.now();\n    this._context.urls.push(url);\n  }\n\n  /**\n   * Add a breadcrumb event, that may be throttled.\n   * If it was throttled, we add a custom breadcrumb to indicate that.\n   */\n   throttledAddEvent(\n    event,\n    isCheckout,\n  ) {\n    const res = this._throttledAddEvent(event, isCheckout);\n\n    // If this is THROTTLED, it means we have throttled the event for the first time\n    // In this case, we want to add a breadcrumb indicating that something was skipped\n    if (res === THROTTLED) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.throttled',\n      });\n\n      this.addUpdate(() => {\n        // Return `false` if the event _was_ added, as that means we schedule a flush\n        return !addEventSync(this, {\n          type: ReplayEventTypeCustom,\n          timestamp: breadcrumb.timestamp || 0,\n          data: {\n            tag: 'breadcrumb',\n            payload: breadcrumb,\n            metric: true,\n          },\n        });\n      });\n    }\n\n    return res;\n  }\n\n  /**\n   * This will get the parametrized route name of the current page.\n   * This is only available if performance is enabled, and if an instrumented router is used.\n   */\n   getCurrentRoute() {\n    const lastActiveSpan = this.lastActiveSpan || getActiveSpan();\n    const lastRootSpan = lastActiveSpan && getRootSpan(lastActiveSpan);\n\n    const attributes = (lastRootSpan && spanToJSON(lastRootSpan).data) || {};\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    if (!lastRootSpan || !source || !['route', 'custom'].includes(source)) {\n      return undefined;\n    }\n\n    return spanToJSON(lastRootSpan).description;\n  }\n\n  /**\n   * Initialize and start all listeners to varying events (DOM,\n   * Performance Observer, Recording, Sentry SDK, etc)\n   */\n   _initializeRecording() {\n    this.setInitialState();\n\n    // this method is generally called on page load or manually - in both cases\n    // we should treat it as an activity\n    this._updateSessionActivity();\n\n    this.eventBuffer = createEventBuffer({\n      useCompression: this._options.useCompression,\n      workerUrl: this._options.workerUrl,\n    });\n\n    this._removeListeners();\n    this._addListeners();\n\n    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n    this._isEnabled = true;\n    this._isPaused = false;\n\n    this.startRecording();\n  }\n\n  /**\n   * Loads (or refreshes) the current session.\n   */\n   _initializeSessionForSampling(previousSessionId) {\n    // Whenever there is _any_ error sample rate, we always allow buffering\n    // Because we decide on sampling when an error occurs, we need to buffer at all times if sampling for errors\n    const allowBuffering = this._options.errorSampleRate > 0;\n\n    const session = loadOrCreateSession(\n      {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n        previousSessionId,\n      },\n      {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: this._options.sessionSampleRate,\n        allowBuffering,\n      },\n    );\n\n    this.session = session;\n  }\n\n  /**\n   * Checks and potentially refreshes the current session.\n   * Returns false if session is not recorded.\n   */\n   _checkSession() {\n    // If there is no session yet, we do not want to refresh anything\n    // This should generally not happen, but to be safe....\n    if (!this.session) {\n      return false;\n    }\n\n    const currentSession = this.session;\n\n    if (\n      shouldRefreshSession(currentSession, {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n      })\n    ) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._refreshSession(currentSession);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Refresh a session with a new one.\n   * This stops the current session (without forcing a flush, as that would never work since we are expired),\n   * and then does a new sampling based on the refreshed session.\n   */\n   async _refreshSession(session) {\n    if (!this._isEnabled) {\n      return;\n    }\n    await this.stop({ reason: 'refresh session' });\n    this.initializeSampling(session.id);\n  }\n\n  /**\n   * Adds listeners to record events for the replay\n   */\n   _addListeners() {\n    try {\n      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.addEventListener('blur', this._handleWindowBlur);\n      WINDOW.addEventListener('focus', this._handleWindowFocus);\n      WINDOW.addEventListener('keydown', this._handleKeyboardEvent);\n\n      if (this.clickDetector) {\n        this.clickDetector.addListeners();\n      }\n\n      // There is no way to remove these listeners, so ensure they are only added once\n      if (!this._hasInitializedCoreListeners) {\n        addGlobalListeners(this);\n\n        this._hasInitializedCoreListeners = true;\n      }\n    } catch (err) {\n      this.handleException(err);\n    }\n\n    this._performanceCleanupCallback = setupPerformanceObserver(this);\n  }\n\n  /**\n   * Cleans up listeners that were created in `_addListeners`\n   */\n   _removeListeners() {\n    try {\n      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n\n      WINDOW.removeEventListener('blur', this._handleWindowBlur);\n      WINDOW.removeEventListener('focus', this._handleWindowFocus);\n      WINDOW.removeEventListener('keydown', this._handleKeyboardEvent);\n\n      if (this.clickDetector) {\n        this.clickDetector.removeListeners();\n      }\n\n      if (this._performanceCleanupCallback) {\n        this._performanceCleanupCallback();\n      }\n    } catch (err) {\n      this.handleException(err);\n    }\n  }\n\n  /**\n   * Handle when visibility of the page content changes. Opening a new tab will\n   * cause the state to change to hidden because of content of current page will\n   * be hidden. Likewise, moving a different window to cover the contents of the\n   * page will also trigger a change to a hidden state.\n   */\n   __init() {this._handleVisibilityChange = () => {\n    if (WINDOW.document.visibilityState === 'visible') {\n      this._doChangeToForegroundTasks();\n    } else {\n      this._doChangeToBackgroundTasks();\n    }\n  };}\n\n  /**\n   * Handle when page is blurred\n   */\n   __init2() {this._handleWindowBlur = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.blur',\n    });\n\n    // Do not count blur as a user action -- it's part of the process of them\n    // leaving the page\n    this._doChangeToBackgroundTasks(breadcrumb);\n  };}\n\n  /**\n   * Handle when page is focused\n   */\n   __init3() {this._handleWindowFocus = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.focus',\n    });\n\n    // Do not count focus as a user action -- instead wait until they focus and\n    // interactive with page\n    this._doChangeToForegroundTasks(breadcrumb);\n  };}\n\n  /** Ensure page remains active when a key is pressed. */\n   __init4() {this._handleKeyboardEvent = (event) => {\n    handleKeyboardEvent(this, event);\n  };}\n\n  /**\n   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n   */\n   _doChangeToBackgroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n\n    const expired = isSessionExpired(this.session, {\n      maxReplayDuration: this._options.maxReplayDuration,\n      sessionIdleExpire: this.timeouts.sessionIdleExpire,\n    });\n\n    if (expired) {\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Send replay when the page/tab becomes hidden. There is no reason to send\n    // replay if it becomes visible, since no actions we care about were done\n    // while it was hidden\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    void this.conditionalFlush();\n  }\n\n  /**\n   * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n   */\n   _doChangeToForegroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n\n    const isSessionActive = this.checkAndHandleExpiredSession();\n\n    if (!isSessionActive) {\n      // If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION\n      // ms, we will re-use the existing session, otherwise create a new\n      // session\n      DEBUG_BUILD && logger.info('Document has become active, but session has expired');\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n  }\n\n  /**\n   * Update user activity (across session lifespans)\n   */\n   _updateUserActivity(_lastActivity = Date.now()) {\n    this._lastActivity = _lastActivity;\n  }\n\n  /**\n   * Updates the session's last activity timestamp\n   */\n   _updateSessionActivity(_lastActivity = Date.now()) {\n    if (this.session) {\n      this.session.lastActivity = _lastActivity;\n      this._maybeSaveSession();\n    }\n  }\n\n  /**\n   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n   */\n   _createCustomBreadcrumb(breadcrumb) {\n    this.addUpdate(() => {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.throttledAddEvent({\n        type: EventType.Custom,\n        timestamp: breadcrumb.timestamp || 0,\n        data: {\n          tag: 'breadcrumb',\n          payload: breadcrumb,\n        },\n      });\n    });\n  }\n\n  /**\n   * Observed performance events are added to `this.performanceEntries`. These\n   * are included in the replay event before it is finished and sent to Sentry.\n   */\n   _addPerformanceEntries() {\n    let performanceEntries = createPerformanceEntries(this.performanceEntries).concat(this.replayPerformanceEntries);\n\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    // If we are manually starting, we want to ensure we only include performance entries\n    // that are after the initial timestamp\n    // The reason for this is that we may have performance entries from the page load, but may decide to start\n    // the replay later on, in which case we do not want to include these entries.\n    // without this, manually started replays can have events long before the actual replay recording starts,\n    // which messes with the timeline etc.\n    if (this._requiresManualStart) {\n      const initialTimestampInSeconds = this._context.initialTimestamp / 1000;\n      performanceEntries = performanceEntries.filter(entry => entry.start >= initialTimestampInSeconds);\n    }\n\n    return Promise.all(createPerformanceSpans(this, performanceEntries));\n  }\n\n  /**\n   * Clear _context\n   */\n   _clearContext() {\n    // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n    this._context.errorIds.clear();\n    this._context.traceIds.clear();\n    this._context.urls = [];\n  }\n\n  /** Update the initial timestamp based on the buffer content. */\n   _updateInitialTimestampFromEventBuffer() {\n    const { session, eventBuffer } = this;\n    // If replay was started manually (=no sample rate was given),\n    // We do not want to back-port the initial timestamp\n    if (!session || !eventBuffer || this._requiresManualStart) {\n      return;\n    }\n\n    // we only ever update this on the initial segment\n    if (session.segmentId) {\n      return;\n    }\n\n    const earliestEvent = eventBuffer.getEarliestTimestamp();\n    if (earliestEvent && earliestEvent < this._context.initialTimestamp) {\n      this._context.initialTimestamp = earliestEvent;\n    }\n  }\n\n  /**\n   * Return and clear _context\n   */\n   _popEventContext() {\n    const _context = {\n      initialTimestamp: this._context.initialTimestamp,\n      initialUrl: this._context.initialUrl,\n      errorIds: Array.from(this._context.errorIds),\n      traceIds: Array.from(this._context.traceIds),\n      urls: this._context.urls,\n    };\n\n    this._clearContext();\n\n    return _context;\n  }\n\n  /**\n   * Flushes replay event buffer to Sentry.\n   *\n   * Performance events are only added right before flushing - this is\n   * due to the buffered performance observer events.\n   *\n   * Should never be called directly, only by `flush`\n   */\n   async _runFlush() {\n    const replayId = this.getSessionId();\n\n    if (!this.session || !this.eventBuffer || !replayId) {\n      DEBUG_BUILD && logger.error('No session or eventBuffer found to flush.');\n      return;\n    }\n\n    await this._addPerformanceEntries();\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n      return;\n    }\n\n    // Only attach memory event if eventBuffer is not empty\n    await addMemoryEntry(this);\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer) {\n      return;\n    }\n\n    // if this changed in the meanwhile, e.g. because the session was refreshed or similar, we abort here\n    if (replayId !== this.getSessionId()) {\n      return;\n    }\n\n    try {\n      // This uses the data from the eventBuffer, so we need to call this before `finish()\n      this._updateInitialTimestampFromEventBuffer();\n\n      const timestamp = Date.now();\n\n      // Check total duration again, to avoid sending outdated stuff\n      // We leave 30s wiggle room to accommodate late flushing etc.\n      // This _could_ happen when the browser is suspended during flushing, in which case we just want to stop\n      if (timestamp - this._context.initialTimestamp > this._options.maxReplayDuration + 30000) {\n        throw new Error('Session is too long, not sending replay');\n      }\n\n      const eventContext = this._popEventContext();\n      // Always increment segmentId regardless of outcome of sending replay\n      const segmentId = this.session.segmentId++;\n      this._maybeSaveSession();\n\n      // Note this empties the event buffer regardless of outcome of sending replay\n      const recordingData = await this.eventBuffer.finish();\n\n      await sendReplay({\n        replayId,\n        recordingData,\n        segmentId,\n        eventContext,\n        session: this.session,\n        timestamp,\n        onError: err => this.handleException(err),\n      });\n    } catch (err) {\n      this.handleException(err);\n\n      // This means we retried 3 times and all of them failed,\n      // or we ran into a problem we don't want to retry, like rate limiting.\n      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({ reason: 'sendReplay' });\n\n      const client = getClient();\n\n      if (client) {\n        const dropReason = err instanceof RateLimitError ? 'ratelimit_backoff' : 'send_error';\n        client.recordDroppedEvent(dropReason, 'replay');\n      }\n    }\n  }\n\n  /**\n   * Flush recording data to Sentry. Creates a lock so that only a single flush\n   * can be active at a time. Do not call this directly.\n   */\n   __init5() {this._flush = async ({\n    force = false,\n  }\n\n = {}) => {\n    if (!this._isEnabled && !force) {\n      // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n      return;\n    }\n\n    if (!this.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.error('Attempting to finish replay event after session expired.');\n      return;\n    }\n\n    if (!this.session) {\n      // should never happen, as we would have bailed out before\n      return;\n    }\n\n    const start = this.session.started;\n    const now = Date.now();\n    const duration = now - start;\n\n    // A flush is about to happen, cancel any queued flushes\n    this._debouncedFlush.cancel();\n\n    // If session is too short, or too long (allow some wiggle room over maxReplayDuration), do not send it\n    // This _should_ not happen, but it may happen if flush is triggered due to a page activity change or similar\n    const tooShort = duration < this._options.minReplayDuration;\n    const tooLong = duration > this._options.maxReplayDuration + 5000;\n    if (tooShort || tooLong) {\n      DEBUG_BUILD &&\n        logger.info(\n          `Session duration (${Math.floor(duration / 1000)}s) is too ${\n            tooShort ? 'short' : 'long'\n          }, not sending replay.`,\n        );\n\n      if (tooShort) {\n        this._debouncedFlush();\n      }\n      return;\n    }\n\n    const eventBuffer = this.eventBuffer;\n    if (eventBuffer && this.session.segmentId === 0 && !eventBuffer.hasCheckout) {\n      DEBUG_BUILD && logger.info('Flushing initial segment without checkout.');\n      // TODO FN: Evaluate if we want to stop here, or remove this again?\n    }\n\n    const _flushInProgress = !!this._flushLock;\n\n    // this._flushLock acts as a lock so that future calls to `_flush()` will\n    // be blocked until current flush is finished (i.e. this promise resolves)\n    if (!this._flushLock) {\n      this._flushLock = this._runFlush();\n    }\n\n    try {\n      await this._flushLock;\n    } catch (err) {\n      this.handleException(err);\n    } finally {\n      this._flushLock = undefined;\n\n      if (_flushInProgress) {\n        // Wait for previous flush to finish, then call the debounced\n        // `_flush()`. It's possible there are other flush requests queued and\n        // waiting for it to resolve. We want to reduce all outstanding\n        // requests (as well as any new flush requests that occur within a\n        // second of the locked flush completing) into a single flush.\n        this._debouncedFlush();\n      }\n    }\n  };}\n\n  /** Save the session, if it is sticky */\n   _maybeSaveSession() {\n    if (this.session && this._options.stickySession) {\n      saveSession(this.session);\n    }\n  }\n\n  /** Handler for rrweb.record.onMutation */\n   __init6() {this._onMutationHandler = (mutations) => {\n    const count = mutations.length;\n\n    const mutationLimit = this._options.mutationLimit;\n    const mutationBreadcrumbLimit = this._options.mutationBreadcrumbLimit;\n    const overMutationLimit = mutationLimit && count > mutationLimit;\n\n    // Create a breadcrumb if a lot of mutations happen at the same time\n    // We can show this in the UI as an information with potential performance improvements\n    if (count > mutationBreadcrumbLimit || overMutationLimit) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.mutations',\n        data: {\n          count,\n          limit: overMutationLimit,\n        },\n      });\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Stop replay if over the mutation limit\n    if (overMutationLimit) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({ reason: 'mutationLimit', forceFlush: this.recordingMode === 'session' });\n      return false;\n    }\n\n    // `true` means we use the regular mutation handling by rrweb\n    return true;\n  };}\n}\n\nfunction getOption(selectors, defaultSelectors) {\n  return [\n    ...selectors,\n    // sentry defaults\n    ...defaultSelectors,\n  ].join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nfunction getPrivacyOptions({ mask, unmask, block, unblock, ignore }) {\n  const defaultBlockedElements = ['base', 'iframe[srcdoc]:not([src])'];\n\n  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]']);\n  const unmaskSelector = getOption(unmask, []);\n\n  const options = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n\n    blockSelector: getOption(block, ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements]),\n    unblockSelector: getOption(unblock, []),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]']),\n  };\n\n  return options;\n}\n\n/**\n * Masks an attribute if necessary, otherwise return attribute value as-is.\n */\nfunction maskAttribute({\n  el,\n  key,\n  maskAttributes,\n  maskAllText,\n  privacyOptions,\n  value,\n}) {\n  // We only mask attributes if `maskAllText` is true\n  if (!maskAllText) {\n    return value;\n  }\n\n  // unmaskTextSelector takes precedence\n  if (privacyOptions.unmaskTextSelector && el.matches(privacyOptions.unmaskTextSelector)) {\n    return value;\n  }\n\n  if (\n    maskAttributes.includes(key) ||\n    // Need to mask `value` attribute for `<input>` if it's a button-like\n    // type\n    (key === 'value' && el.tagName === 'INPUT' && ['submit', 'button'].includes(el.getAttribute('type') || ''))\n  ) {\n    return value.replace(/[\\S]/g, '*');\n  }\n\n  return value;\n}\n\nconst MEDIA_SELECTORS =\n  'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\n\nconst DEFAULT_NETWORK_HEADERS = ['content-length', 'content-type', 'accept'];\n\nlet _initialized = false;\n\n/**\n * Sentry integration for [Session Replay](https://sentry.io/for/session-replay/).\n *\n * See the [Replay documentation](https://docs.sentry.io/platforms/javascript/guides/session-replay/) for more information.\n *\n * @example\n *\n * ```\n * Sentry.init({\n *   dsn: '__DSN__',\n *   integrations: [Sentry.replayIntegration()],\n * });\n * ```\n */\nconst replayIntegration = ((options) => {\n  return new Replay(options);\n}) ;\n\n/**\n * Replay integration\n *\n * TODO: Rewrite this to be functional integration\n * Exported for tests.\n */\nclass Replay  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'Replay';}\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n\n   constructor({\n    flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n    flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n    minReplayDuration = MIN_REPLAY_DURATION,\n    maxReplayDuration = MAX_REPLAY_DURATION,\n    stickySession = true,\n    useCompression = true,\n    workerUrl,\n    _experiments = {},\n    maskAllText = true,\n    maskAllInputs = true,\n    blockAllMedia = true,\n\n    mutationBreadcrumbLimit = 750,\n    mutationLimit = 10000,\n\n    slowClickTimeout = 7000,\n    slowClickIgnoreSelectors = [],\n\n    networkDetailAllowUrls = [],\n    networkDetailDenyUrls = [],\n    networkCaptureBodies = true,\n    networkRequestHeaders = [],\n    networkResponseHeaders = [],\n\n    mask = [],\n    maskAttributes = ['title', 'placeholder'],\n    unmask = [],\n    block = [],\n    unblock = [],\n    ignore = [],\n    maskFn,\n\n    beforeAddRecordingEvent,\n    beforeErrorSampling,\n    onError,\n  } = {}) {\n    this.name = Replay.id;\n\n    const privacyOptions = getPrivacyOptions({\n      mask,\n      unmask,\n      block,\n      unblock,\n      ignore,\n    });\n\n    this._recordingOptions = {\n      maskAllInputs,\n      maskAllText,\n      maskInputOptions: { password: true },\n      maskTextFn: maskFn,\n      maskInputFn: maskFn,\n      maskAttributeFn: (key, value, el) =>\n        maskAttribute({\n          maskAttributes,\n          maskAllText,\n          privacyOptions,\n          key,\n          value,\n          el,\n        }),\n\n      ...privacyOptions,\n\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true,\n      errorHandler: (err) => {\n        try {\n          err.__rrweb__ = true;\n        } catch (error) {\n          // ignore errors here\n          // this can happen if the error is frozen or does not allow mutation for other reasons\n        }\n      },\n    };\n\n    this._initialOptions = {\n      flushMinDelay,\n      flushMaxDelay,\n      minReplayDuration: Math.min(minReplayDuration, MIN_REPLAY_DURATION_LIMIT),\n      maxReplayDuration: Math.min(maxReplayDuration, MAX_REPLAY_DURATION),\n      stickySession,\n      useCompression,\n      workerUrl,\n      blockAllMedia,\n      maskAllInputs,\n      maskAllText,\n      mutationBreadcrumbLimit,\n      mutationLimit,\n      slowClickTimeout,\n      slowClickIgnoreSelectors,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders: _getMergedNetworkHeaders(networkRequestHeaders),\n      networkResponseHeaders: _getMergedNetworkHeaders(networkResponseHeaders),\n      beforeAddRecordingEvent,\n      beforeErrorSampling,\n      onError,\n\n      _experiments,\n    };\n\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector\n        ? MEDIA_SELECTORS\n        : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n   get _isInitialized() {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n   set _isInitialized(value) {\n    _initialized = value;\n  }\n\n  /**\n   * Setup and initialize replay container\n   */\n   afterAllSetup(client) {\n    if (!isBrowser() || this._replay) {\n      return;\n    }\n\n    this._setup(client);\n    this._initialize(client);\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will log a message if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n   start() {\n    if (!this._replay) {\n      return;\n    }\n    this._replay.start();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, until an error occurs.\n   */\n   startBuffering() {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.startBuffering();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n   stop() {\n    if (!this._replay) {\n      return Promise.resolve();\n    }\n\n    return this._replay.stop({ forceFlush: this._replay.recordingMode === 'session' });\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * If replay is not enabled, a new session replay is started.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n   flush(options) {\n    if (!this._replay) {\n      return Promise.resolve();\n    }\n\n    // assuming a session should be recorded in this case\n    if (!this._replay.isEnabled()) {\n      this._replay.start();\n      return Promise.resolve();\n    }\n\n    return this._replay.sendBufferedReplayOrFlush(options);\n  }\n\n  /**\n   * Get the current session ID.\n   */\n   getReplayId() {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n\n    return this._replay.getSessionId();\n  }\n\n  /**\n   * Get the current recording mode. This can be either `session` or `buffer`.\n   *\n   * `session`: Recording the whole session, sending it continuously\n   * `buffer`: Always keeping the last 60s of recording, requires:\n   *   - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n   *   - or calling `flush()` to send the replay\n   */\n   getRecordingMode() {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n\n    return this._replay.recordingMode;\n  }\n\n  /**\n   * Initializes replay.\n   */\n   _initialize(client) {\n    if (!this._replay) {\n      return;\n    }\n\n    this._maybeLoadFromReplayCanvasIntegration(client);\n    this._replay.initializeSampling();\n  }\n\n  /** Setup the integration. */\n   _setup(client) {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    const finalOptions = loadReplayOptionsFromClient(this._initialOptions, client);\n\n    this._replay = new ReplayContainer({\n      options: finalOptions,\n      recordingOptions: this._recordingOptions,\n    });\n  }\n\n  /** Get canvas options from ReplayCanvas integration, if it is also added. */\n   _maybeLoadFromReplayCanvasIntegration(client) {\n    // To save bundle size, we skip checking for stuff here\n    // and instead just try-catch everything - as generally this should all be defined\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    try {\n      const canvasIntegration = client.getIntegrationByName('ReplayCanvas')\n\n;\n      if (!canvasIntegration) {\n        return;\n      }\n\n      this._replay['_canvas'] = canvasIntegration.getOptions();\n    } catch (e) {\n      // ignore errors here\n    }\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n  }\n}Replay.__initStatic();\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions, client) {\n  const opt = client.getOptions() ;\n\n  const finalOptions = {\n    sessionSampleRate: 0,\n    errorSampleRate: 0,\n    ...dropUndefinedKeys(initialOptions),\n  };\n\n  const replaysSessionSampleRate = parseSampleRate(opt.replaysSessionSampleRate);\n  const replaysOnErrorSampleRate = parseSampleRate(opt.replaysOnErrorSampleRate);\n\n  if (replaysSessionSampleRate == null && replaysOnErrorSampleRate == null) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.',\n      );\n    });\n  }\n\n  if (replaysSessionSampleRate != null) {\n    finalOptions.sessionSampleRate = replaysSessionSampleRate;\n  }\n\n  if (replaysOnErrorSampleRate != null) {\n    finalOptions.errorSampleRate = replaysOnErrorSampleRate;\n  }\n\n  return finalOptions;\n}\n\nfunction _getMergedNetworkHeaders(headers) {\n  return [...DEFAULT_NETWORK_HEADERS, ...headers.map(header => header.toLowerCase())];\n}\n\n/**\n * This is a small utility to get a type-safe instance of the Replay integration.\n */\nfunction getReplay() {\n  const client = getClient();\n  return client && client.getIntegrationByName('Replay');\n}\n\nexport { getReplay, replayIntegration };\n//# sourceMappingURL=index.js.map\n"],"names":["canvasService","canvasCtx","errorHandler","wrappedEmit","_takeFullSnapshot","handlers","NodeType","EventType2","IncrementalSource2","MouseInteractions2","PointerTypes2","NodeType$3","NodeType$1","NodeType$2","WINDOW","_sentry_core__WEBPACK_IMPORTED_MODULE_0__","GLOBAL_OBJ","REPLAY_SESSION_KEY","UNABLE_TO_SEND_REPLAY","_nullishCoalesce$1","lhs","rhsFn","_optionalChain$5","ops","lastAccessLHS","value","i","length","op","fn","args","call","undefined","isShadowRoot","n","host","_","_2","shadowRoot","isNativeShadowDom","Object","prototype","toString","stringifyStylesheet","s","cssText","rules","cssRules","Array","from","stringifyRule","join","includes","replace","error","rule","importStringified","styleSheet","escapeImportStatement","split","statement","JSON","stringify","href","layerName","push","supportsText","media","mediaText","needsSafariColonFix","selectorText","needsAllFix","style","fixAllCssProperty","styles","styleDeclaration","attribute","isImportant","getPropertyPriority","getPropertyValue","cssStringified","Mirror","constructor","idNodeMap","Map","nodeMetaMap","WeakMap","getId","_3","getMeta","_4","_5","id","getNode","get","getIds","keys","removeNodeFromMap","delete","childNodes","forEach","childNode","has","hasNode","node","add","meta","set","oldNode","reset","shouldMaskInput","maskInputOptions","tagName","type","Boolean","toLowerCase","maskInputValue","isMasked","element","maskInputFn","text","repeat","str","toUpperCase","ORIGINAL_ATTRIBUTE_NAME","getInputType","hasAttribute","getInputValue","el","getAttribute","extractFileExtension","path","baseURL","url","URL","window","location","err","pathname","match","_6","cachedImplementations$1","getImplementation$1","name","cached","document","impl","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","e","bind","setTimeout$2","rest","clearTimeout$2","getIframeContentDocument","iframe","contentDocument","_id","tagNameRegex","genId","URL_IN_CSS_REF","URL_PROTOCOL_MATCH","URL_WWW_MATCH","DATA_URI","absoluteToStylesheet","origin","quote1","path1","quote2","path2","path3","filePath","maybeQuote","test","indexOf","slice","stack","parts","part","pop","SRCSET_NOT_SPACES","SRCSET_COMMAS_OR_SPACES","cachedDocument","absoluteToDoc","doc","attributeValue","trim","getHref","customHref","a","startsWith","setAttribute","transformAttribute","maskAttributeFn","getAbsoluteSrcsetString","pos","collectCharacters","regEx","chars","exec","substring","output","descriptorsStr","inParens","c","charAt","ignoreAttribute","_value","distanceToMatch","matchPredicate","limit","Infinity","distance","nodeType","ELEMENT_NODE","parentNode","createMatchPredicate","className","selector","matches","elementClassMatchesRegex","regex","eIndex","classList","e2","needMaskingText","maskTextClass","maskTextSelector","unmaskTextClass","unmaskTextSelector","maskAllText","parentElement","autocomplete","disallowedAutocompleteValues","maskDistance","unmaskDistance","lowerIfExists","maybeAttr","serializeNodeWithId","options","mirror","blockClass","blockSelector","unblockSelector","skipChild","inlineStylesheet","maskTextFn","slimDOMOptions","dataURLOptions","inlineImages","recordCanvas","onSerialize","onIframeLoad","iframeLoadTimeout","onStylesheetLoad","stylesheetLoadTimeout","keepIframeSrcFn","newlyAddedElement","preserveWhiteSpace","_serializedNode","serializeNode","rootId","getRootId","docId","DOCUMENT_NODE","compatMode","Document","DOCUMENT_TYPE_NODE","DocumentType","publicId","systemId","serializeElementNode","isCustomElement","needBlock","_isBlockedElement","contains","getValidTagName","HTMLFormElement","processedTagName","attributes","len","attr","stylesheet","styleSheets","find","rel","crossorigin","_cssText","sheet","innerText","textContent","checked","forceMask","selected","__context","is2DCanvasBlank","canvas","ctx","getContext","x","width","y","height","getImageData","pixelBuffer","Uint32Array","originalGetImageData","Math","min","data","buffer","some","pixel","rr_dataURL","toDataURL","quality","canvasDataURL","blankCanvas","imageSrc","image","currentSrc","priorCrossOrigin","crossOrigin","recordInlineImage","removeEventListener","naturalWidth","naturalHeight","drawImage","complete","addEventListener","console","warn","removeAttribute","rr_mediaState","paused","rr_mediaCurrentTime","currentTime","scrollLeft","rr_scrollLeft","scrollTop","rr_scrollTop","getBoundingClientRect","class","rr_width","rr_height","src","rr_src","customElements","Element","isSVG","isSVGElement","ownerSVGElement","isCustom","TEXT_NODE","serializeTextNode","parentTagName","isStyle","isScript","isTextarea","nextSibling","previousSibling","_7","_8","_9","textarea","Text","CDATA_SECTION_NODE","CDATA","COMMENT_NODE","Comment","slimDOMExcluded","sn","comment","script","headFavicon","headMetaDescKeywords","headMetaSocial","property","headMetaRobots","headMetaHttpEquiv","headMetaAuthorship","headMetaVerification","serializedNode","assign","recordChild","isShadowHost","headWhitespace","bypassOptions","childN","serializedChildNode","isElement$1","isShadow","onceIframeLoaded","iframeEl","listener","readyState","win","fired","timer","blankUrl","iframeDoc","serializedIframeNode","onceStylesheetLoaded","link","styleSheetLoadTimeout","styleSheetLoaded","serializedLinkNode","_optionalChain$4","on","target","capture","passive","DEPARTED_MIRROR_ACCESS_WARNING","_mirror","map","throttle$1","func","wait","timeout","previous","now","Date","leading","remaining","context","clearTimeout$1","getImplementation","apply","trailing","setTimeout$1","patch","source","replacement","original","wrapped","defineProperties","__rrweb_original__","enumerable","Proxy","Reflect","prop","receiver","nowTimestamp","getWindowScroll","left","scrollingElement","pageXOffset","documentElement","body","top","pageYOffset","_10","_11","_12","_13","_14","getWindowHeight","innerHeight","clientHeight","getWindowWidth","innerWidth","clientWidth","closestElementOfNode","isBlocked","checkAncestors","blockedPredicate","isUnblocked","blockDistance","unblockDistance","isIgnored","legacy_isTouchEvent","event","changedTouches","isSerializedIframe","nodeName","isSerializedStylesheet","hasShadowRoot","_18","getTime","StyleSheetMirror","styleIDMap","idStyleMap","_sentry_core__WEBPACK_IMPORTED_MODULE_1__","h","newId","getStyle","generateId","getShadowHost","shadowHost","_19","getRootNode","_20","_21","Node","DOCUMENT_FRAGMENT_NODE","inDom","ownerDocument","shadowHostInDom","getRootShadowHost","rootShadowHost","cachedImplementations","EventType","IncrementalSource","MouseInteractions","PointerTypes","getIFrameContentDocument","DoubleLinkedList","tail","position","current","index","_optionalChain$3","next","addNode","__ln","removeNode","moveKey","parentId","MutationBuffer","frozen","locked","texts","attributeMap","removes","mapRemoves","movedMap","addedSet","Set","movedSet","droppedSet","processMutations","mutations","processMutation","emit","adds","addedIds","addList","getNextId","ns","nextId","pushAdd","currentN","iframeManager","addIframe","stylesheetManager","trackLinkElement","shadowDomManager","addShadowRoot","childSn","attachIframe","canvasManager","addWindow","observeAttachShadow","attachLinkElement","shift","isParentRemoved","isAncestorInSet","candidate","tailNode","_node","unhandledNode","payload","filter","diffAsStr","styleDiff","unchangedAsStr","_unchangedStyles","mutationCb","m","oldValue","attributeName","isInputMasked","item","unattachedDoc","implementation","createHTMLDocument","old","pname","newValue","newPriority","addedNodes","genAdds","removedNodes","nodeId","deepDelete","isAncestorRemoved","processedNodeManager","inOtherBuffer","targetId","init","key","freeze","unfreeze","isFrozen","lock","unlock","addsSet","_isParentRemoved","r","size","_isAncestorInSet","callbackWrapper","cb","_optionalChain$2","mutationBuffers","getEventTarget","composedPath","initMutationObserver","rootEl","mutationBuffer","mutationObserverCtor","MutationObserver","__rrMutationObserver","angularZoneSymbol","Zone","__symbol__","observer","onMutation","observe","attributeOldValue","characterData","characterDataOldValue","childList","subtree","initScrollObserver","scrollCb","sampling","evt","defaultView","scrollLeftTop","scroll","INPUT_TAGS","lastInputValueMap","getNestedCSSRulePositions","childRule","parentRule","CSSGroupingRule","hasNestedCSSRule","CSSMediaRule","CSSSupportsRule","CSSConditionRule","unshift","parentStyleSheet","getIdAndStyleId","styleMirror","styleId","ownerNode","initAdoptedStyleSheetObserver","hostId","patchTarget","ShadowRoot","originalPropertyDescriptor","getOwnPropertyDescriptor","defineProperty","configurable","sheets","result","_15","_16","adoptStyleSheets","initObservers","o","_hooks","mutationObserver","currentWindow","recordDOM","mousemoveHandler","initMoveObserver","mousemoveCb","timeBaseline","mousemove","threshold","callbackThreshold","mousemoveCallback","positions","wrappedCb","totalOffset","p","timeOffset","updatePosition","clientX","clientY","DragEvent","Drag","MouseEvent","MouseMove","TouchMove","mouseInteractionHandler","initMouseInteractionObserver","mouseInteractionCb","mouseInteraction","disableMap","currentPointerType","getHandler","pointerType","thisEventKey","eventKey","Mouse","Touch","Pen","MouseDown","MouseUp","Click","Number","isNaN","endsWith","eventName","handler","PointerEvent","TouchStart","TouchEnd","scrollHandler","viewportResizeHandler","initViewportResizeObserver","viewportResizeCb","lastH","lastW","inputHandler","initInputObserver","inputCb","ignoreClass","ignoreSelector","userTriggeredOnInput","eventHandler","userTriggered","isTrusted","isChecked","cbWithDedup","querySelectorAll","v","lastInputValue","events","input","propertyDescriptor","HTMLInputElement","hookProperties","HTMLSelectElement","HTMLTextAreaElement","HTMLOptionElement","hookSetter","d","isRevoked","mediaInteractionHandler","initMediaInteractionObserver","mediaInteractionCb","volume","muted","playbackRate","styleSheetObserver","adoptedStyleSheetObserver","styleDeclarationObserver","fontObserver","initStyleSheetObserver","styleSheetRuleCb","replaceSync","CSSStyleSheet","insertRule","thisArg","argumentsList","deleteRule","supportedNestedCSSRuleTypes","canMonkeyPatchNestedCSSRule","unmodifiedFunctions","entries","typeKey","initStyleDeclarationObserver","styleDeclarationCb","ignoreCSSAttributes","setProperty","CSSStyleDeclaration","priority","_17","removeProperty","remove","collectFonts","initFontObserver","fontCb","fontMap","originalFontFace","FontFace","family","descriptors","fontFace","fontSource","Uint8Array","restoreHandler","fonts","selectionObserver","initSelectionObserver","param","selectionCb","collapsed","updateSelection","selection","getSelection","isCollapsed","ranges","count","rangeCount","startContainer","startOffset","endContainer","endOffset","getRangeAt","start","end","customElementObserver","initCustomElementObserver","customElementCb","define","pluginHandlers","plugin","plugins","callback","b","_22","disconnect","_23","CrossOriginIframeMirror","generateIdFn","iframeIdToRemoteIdMap","iframeRemoteIdToIdMap","remoteId","idToRemoteMap","remoteToIdMap","idToRemoteIdMap","getIdToRemoteIdMap","remoteIdToIdMap","getRemoteIdToIdMap","getRemoteId","getRemoteIds","ids","_optionalChain$1","IframeManagerNoop","crossOriginIframeMirror","crossOriginIframeRootIdMap","addLoadListener","IframeManager","iframes","crossOriginIframeMap","recordCrossOriginIframes","crossOriginIframeStyleMirror","handleMessage","loadListener","isAttachIframe","adoptedStyleSheets","message","crossOriginMessageEvent","transformedEvent","transformCrossOriginEvent","isCheckout","FullSnapshot","replaceIdOnNode","patchRootIdOnNode","timestamp","IncrementalSnapshot","Mutation","Meta","Load","DomContentLoaded","Plugin","Custom","replaceIds","ViewportResize","MediaInteraction","MouseInteraction","Scroll","CanvasMutation","Input","StyleSheetRule","StyleDeclaration","replaceStyleIds","Font","Selection","range","AdoptedStyleSheet","iframeMirror","obj","isArray","child","ShadowDomManagerNoop","ShadowDomManager","shadowDoms","WeakSet","restoreHandlers","patchAttachShadow","iframeElement","iframeWindow","getIFrameContentWindow","manager","option","resetShadowRoots","CanvasManagerNoop","snapshot","StylesheetManager","trackedLinkElements","adoptedStyleSheetCb","linkEl","trackStylesheetInLinkElement","adoptedStyleSheetData","styleIds","CSSRule","ProcessedNodeManager","nodeMap","active","thisBuffer","buffers","onRequestAnimationFrame","destroy","cleanFrame","_sentry_core__WEBPACK_IMPORTED_MODULE_2__","debug","record","lastFullSnapshotEvent","checkoutEveryNms","checkoutEveryNth","maskAllInputs","_maskInputOptions","_slimDOMOptions","maxCanvasSize","packFn","mousemoveWait","recordAfter","getCanvasManager","inEmittingFrame","parent","passEmitsToParent","color","date","email","month","number","search","tel","time","week","select","radio","checkbox","polyfill","NodeList","DOMTokenList","incrementalSnapshotCount","eventProcessor","buf","postMessage","exceedCount","exceedTime","takeFullSnapshot","wrappedMutationEmit","wrappedScrollEmit","wrappedCanvasMutationEmit","__RRWEB_EXCLUDE_IFRAME__","getMirror","nodeMirror","_getCanvasManager","getCanvasManagerFn","__RRWEB_EXCLUDE_SHADOW_DOM__","slimDOM","initialOffset","canvasMutationCb","CustomElement","timestampToMs","isMs","timestampToS","addBreadcrumbEvent","replay","breadcrumb","category","triggerUserActivity","checkAndHandleExpiredSession","addUpdate","throttledAddEvent","tag","_sentry_core__WEBPACK_IMPORTED_MODULE_3__","Fv","getClosestInteractive","closestInteractive","closest","getClickTargetNode","getTargetNode","IncrementalMutationSources","ClickDetector","slowClickConfig","_addBreadcrumbEvent","_lastMutation","_lastScroll","_clicks","_timeout","_threshold","_scrollTimeout","scrollTimeout","_replay","_ignoreSelector","addListeners","cleanupWindowOpen","nowInSeconds","_sentry_core__WEBPACK_IMPORTED_MODULE_4__","hl","originalWindowOpen","splice","_teardown","removeListeners","_checkClickTimeout","clearTimeout","handleClick","ignoreElement","SLOW_CLICK_TAGS","newClick","clickBreadcrumb","clickCount","click","abs","_scheduleCheckClicks","registerMutation","registerScroll","registerClick","_handleMultiClick","_getClicks","_checkClicks","timedOutClicks","mutationAfter","scrollAfter","_generateBreadcrumbs","hadScroll","hadMutation","timeAfterClickMs","endReason","route","getCurrentRoute","metric","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_5__","iK","createBreadcrumb","ATTRIBUTES_TO_RECORD","handleDomListener","isEnabled","handleDom","handlerData","getDomTarget","isClick","_sentry_core__WEBPACK_IMPORTED_MODULE_6__","Rt","maxStringLength","getBaseDomBreadcrumb","clickDetector","altKey","metaKey","ctrlKey","shiftKey","getAttributesToRecord","normalizedKey","ENTRY_TYPES","resource","entry","entryType","initiatorType","responseEnd","startTime","decodedBodySize","encodedBodySize","responseStatus","transferSize","getAbsoluteTime","statusCode","paint","duration","navigation","domComplete","domContentLoadedEventStart","domContentLoadedEventEnd","domInteractive","loadEventStart","loadEventEnd","redirectCount","webVitalHandler","getter","replayPerformanceEntries","createPerformanceEntry","_sentry_core__WEBPACK_IMPORTED_MODULE_7__","Z1","performance","timeOrigin","getLargestContentfulPaint","lastEntry","getWebVital","getCumulativeLayoutShift","layoutShifts","nodes","sources","nodeIds","getFirstInputDelay","getInteractionToNextPaint","attributions","rating","DEBUG_BUILD","__SENTRY_DEBUG__","CONSOLE_LEVELS","PREFIX","_addBreadcrumb","level","_sentry_core__WEBPACK_IMPORTED_MODULE_9__","logger","makeReplayLogger","_capture","_trace","_logger","exception","infoTick","setConfig","opts","captureExceptions","traceInternals","_sentry_core__WEBPACK_IMPORTED_MODULE_10__","kg","_sentry_core__WEBPACK_IMPORTED_MODULE_11__","V","_sentry_core__WEBPACK_IMPORTED_MODULE_12__","Tb","info","setTimeout","EventBufferSizeExceededError","Error","EventBufferArray","_totalSize","hasCheckout","waitForCheckout","hasEvents","addEvent","eventSize","finish","Promise","resolve","eventsRet","clear","getEarliestTimestamp","sort","WorkerHandler","worker","_worker","ensureReady","_ensureReadyPromise","reject","success","once","terminate","method","arg","_getAndIncrementId","response","EventBufferCompressionWorker","_earliestTimestamp","_sendEventToWorker","_finishRequest","then","EventBufferProxy","_fallback","_compression","_used","_ensureWorkerIsLoadedPromise","_ensureWorkerIsLoaded","ensureWorkerIsLoaded","_switchToCompressionWorker","addEventPromises","all","hasSessionStorage","sessionStorage","isSampled","sampleRate","random","makeSession","session","_sentry_core__WEBPACK_IMPORTED_MODULE_13__","DM","started","lastActivity","segmentId","sampled","previousSessionId","saveSession","setItem","createSession","sessionSampleRate","allowBuffering","stickySession","isExpired","initialTime","expiry","targetTime","isSessionExpired","maxReplayDuration","sessionIdleExpire","shouldRefreshSession","loadOrCreateSession","sessionOptions","existingSession","fetchSession","sessionStringFromStorage","getItem","sessionObj","parse","addEventSync","shouldAddEvent","_addEvent","eventBuffer","isBufferMode","recordingMode","replayOptions","getOptions","eventAfterPossibleCallback","maybeApplyCallback","beforeAddRecordingEvent","isExceeded","handleException","stop","reason","client","_sentry_core__WEBPACK_IMPORTED_MODULE_14__","s3","recordDroppedEvent","isPaused","timestampInMs","timeouts","sessionIdlePause","initialTimestamp","isTransactionEvent","isFeedbackEvent","isBreadcrumbWithCategory","resetReplayIdOnDynamicSamplingContext","dsc","nZ","getPropagationContext","replay_id","activeSpan","_sentry_core__WEBPACK_IMPORTED_MODULE_15__","HN","_sentry_core__WEBPACK_IMPORTED_MODULE_16__","jC","createPerformanceSpans","description","startTimestamp","endTimestamp","addNetworkBreadcrumb","_experiments","_sentry_core__WEBPACK_IMPORTED_MODULE_17__","W","getBodySize","textEncoder","TextEncoder","encode","URLSearchParams","FormData","formDataStr","_serializeFormData","Blob","ArrayBuffer","byteLength","parseContentLengthHeader","header","parseInt","getBodyString","mergeWarning","warning","headers","_meta","warnings","newMeta","existingWarnings","makeNetworkReplayBreadcrumb","request","Jr","buildSkippedNetworkRequestOrResponse","bodySize","buildNetworkRequestOrResponse","normalizedBody","normalizeNetworkBody","exceedsSizeLimit","isProbablyJson","_strIsProbablyJson","first","last","truncatedBody","getAllowedHeaders","allowedHeaders","reduce","filteredHeaders","formData","urlMatches","urls","fullUrl","getFullUrl","baseURI","fixedUrl","_sentry_core__WEBPACK_IMPORTED_MODULE_18__","U0","captureFetchBreadcrumbToReplay","hint","_prepareFetchData","status_code","request_body_size","requestBodySize","response_body_size","responseBodySize","captureDetails","networkDetailAllowUrls","networkDetailDenyUrls","_getRequestInfo","networkCaptureBodies","networkRequestHeaders","fetchArgs","getHeadersFromOptions","bodyStr","_getFetchRequestArgBody","_getResponseInfo","networkResponseHeaders","getAllHeaders","bodyText","_parseFetchResponseBody","getResponseData","res","_tryCloneResponse","clone","_getResponseText","txt","finally","allHeaders","Headers","captureXhrBreadcrumbToReplay","_prepareXhrData","xhr","xhrInfo","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_19__","xU","request_headers","getResponseHeaders","getAllResponseHeaders","acc","line","requestBody","requestWarning","responseBody","responseWarning","_getXhrResponseBody","errors","responseText","_parseXhrResponse","responseType","outerHTML","addMemoryEntry","createMemoryEntry","memoryEntry","jsHeapSizeLimit","totalJSHeapSize","usedJSHeapSize","memory","NAVIGATOR","navigator","prepareReplayEvent","scope","replayId","event_id","eventHint","integrations","_integrations","preparedEvent","_sentry_core__WEBPACK_IMPORTED_MODULE_23__","R","aF","platform","metadata","getSdkMetadata","version","sdk","sendReplayRequest","recordingData","segment_id","eventContext","tunnel","preparedRecordingData","prepareRecordingData","payloadWithSequence","replayHeaders","sequence","enc","errorIds","traceIds","transport","getTransport","dsn","getDsn","_sentry_core__WEBPACK_IMPORTED_MODULE_24__","WD","baseEvent","replay_start_timestamp","error_ids","trace_ids","replay_type","replayEvent","sdkProcessingMetadata","envelope","_sentry_core__WEBPACK_IMPORTED_MODULE_22__","Jd","Cd","HY","send","cause","TransportStatusCodeError","rateLimits","_sentry_core__WEBPACK_IMPORTED_MODULE_25__","WG","Q","RateLimitError","sendReplay","replayData","retryConfig","interval","onError","_retryCount","THROTTLED","ReplayContainer","recordingOptions","__init","__init2","__init3","__init4","__init5","__init6","performanceEntries","_lastActivity","_isEnabled","_isPaused","_requiresManualStart","_hasInitializedCoreListeners","_context","initialUrl","_recordingOptions","_options","_debouncedFlush","debounce","callbackReturnValue","timerId","maxTimerId","maxWait","max","invokeFunc","cancelTimers","debounced","cancel","flush","_flush","flushMinDelay","flushMaxDelay","_throttledAddEvent","throttle","maxCount","durationSeconds","counter","_cleanup","_getTotalCount","values","isThrottled","floor","wasThrottled","slowClickTimeout","slowClickIgnoreSelectors","experiments","isRecordingCanvas","_canvas","initializeSampling","errorSampleRate","requiresManualStart","_initializeSessionForSampling","_initializeRecording","_updateUserActivity","startBuffering","startRecording","hadFirstEvent","canvasOptions","_stopRecording","continuousCheckout","_isCheckout","updateClickDetectorForRecordingEvent","HTMLElement","setInitialState","createOptionsEvent","shouldRecordCanvas","useCompressionOption","useCompression","blockAllMedia","networkDetailHasUrls","networkRequestHasHeaders","networkResponseHasHeaders","earliestEvent","userAgent","maxTouchPoints","_onMutationHandler","stopRecording","forceFlush","_removeListeners","force","deleteSession","removeItem","pause","resume","_checkSession","sendBufferedReplayOrFlush","continueRecording","flushImmediate","activityTime","hasStoppedRecording","_updateSessionActivity","_maybeSaveSession","cbResult","updateUserActivity","conditionalFlush","cancelFlush","getSessionId","urlPath","hash","_clearContext","lastActiveSpan","lastRootSpan","Gx","XU","_sentry_core__WEBPACK_IMPORTED_MODULE_26__","Zj","createEventBuffer","workerUrl","customWorkerUrl","Worker","_loadWorker","__SENTRY_EXCLUDE_REPLAY_WORKER__","createObjectURL","_addListeners","currentSession","_refreshSession","_handleVisibilityChange","_handleWindowBlur","_handleWindowFocus","_handleKeyboardEvent","addGlobalListeners","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_20__","O","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_21__","handleHistory","to","handleBreadcrumbs","beforeAddBreadcrumb","normalizeConsoleBreadcrumb","arguments","isTruncated","normalizedArgs","normalizedArg","stringified","handleNetworkBreadcrumbs","beforeAddNetworkBreadcrumb","_isXhrBreadcrumb","enrichXhrBreadcrumb","reqSize","resSize","getResponseHeader","_getBodySize","_isFetchBreadcrumb","enrichFetchBreadcrumb","breadcrumbs","contexts","feedback","feedbackId","originalException","__rrweb__","log","isErrorEventSampled","tags","Qy","handleHydrationError","exceptionValue","l4","sendResponse","handleTransactionEvent","replayContext","trace","trace_id","handleErrorEvent","beforeErrorSampling","span","feedbackEvent","includeReplay","_performanceCleanupCallback","setupPerformanceObserver","addPerformanceEntry","onEntries","clearCallbacks","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_8__","_j","$A","PR","YF","clearCallback","visibilityState","_doChangeToForegroundTasks","_doChangeToBackgroundTasks","handleKeyboardEvent","getKeyboardBreadcrumb","isContentEditable","hasModifierKey","isCharacterKey","baseBreadcrumb","_createCustomBreadcrumb","_addPerformanceEntries","createPerformanceEntries","concat","initialTimestampInSeconds","_updateInitialTimestampFromEventBuffer","_popEventContext","_runFlush","tooShort","minReplayDuration","tooLong","_flushInProgress","_flushLock","mutationLimit","mutationBreadcrumbLimit","overMutationLimit","getOption","selectors","defaultSelectors","MEDIA_SELECTORS","DEFAULT_NETWORK_HEADERS","_initialized","replayIntegration","Replay","__initStatic","mask","maskAttributes","unmask","block","unblock","ignore","maskFn","privacyOptions","getPrivacyOptions","password","maskAttribute","_initialOptions","_getMergedNetworkHeaders","_isInitialized","_sentry_core__WEBPACK_IMPORTED_MODULE_27__","j","afterAllSetup","_setup","_initialize","getReplayId","getRecordingMode","_maybeLoadFromReplayCanvasIntegration","finalOptions","loadReplayOptionsFromClient","initialOptions","opt","replaysSessionSampleRate","_sentry_core__WEBPACK_IMPORTED_MODULE_28__","replaysOnErrorSampleRate","Cf","canvasIntegration","getIntegrationByName"],"sourceRoot":""}